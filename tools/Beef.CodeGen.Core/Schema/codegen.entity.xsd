<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://schemas.beef.com/codegen/2015/01/entity" attributeFormDefault="unqualified" elementFormDefault="qualified">
  <xs:element name="CodeGeneration">
    <xs:annotation>
      <xs:documentation>'CodeGeneration' object (entity-driven)</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Entity" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>'Entity' object (entity-driven)</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Property" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>'Property' object (entity-driven)</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:attribute name="Name" use="required" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The unique property name.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Text" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The overriding text for use in comments. By default the `Text` will be the `Name` reformatted as sentence casing. Depending on whether the `Type` is `bool`, will appear in one of the two generated sentences. Where not `bool` it will be: Gets or sets a value indicating whether {text}.'. Otherwise, it will be: Gets or sets the {text}.'. To create a `&lt;see cref="XXX"/&gt;` within use moustache shorthand (e.g. {{Xxx}}).</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Type" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The .NET `Type`. Defaults to `string`. To reference a Reference Data `Type` always prefix with `RefDataNamespace` (e.g. `RefDataNamespace.Gender`). This will ensure that the appropriate Reference Data `using` statement is used. _Shortcut:_ Where the `Type` starts with (prefix) `RefDataNamespace.` and the correspondong `RefDataType` attribute is not specified it will automatically default the `RefDataType` to `string.`</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Nullable" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the .NET `Type` should be declared as nullable; e.g. `string?`. Will be inferred where the `Type` is denoted as nullable; i.e. suffixed by a `?`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Inherited" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the property is inherited and therefore should not be output within the generated Entity class.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="PrivateName" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The overriding private name. Overrides the `Name` to be used for private fields. By default reformatted from `Name`; e.g. `FirstName` as `_firstName`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ArgumentName" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The overriding argument name. Overrides the `Name` to be used for argument parameters. By default reformatted from `Name`; e.g. `FirstName` as `firstName`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="UniqueKey" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the property is considered part of the unique (primary) key. This is also used to simplify the parameter specification for an Entity Operation by inferrence.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="IsEntity" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates that the property `Type` is another generated entity / collection and therefore specific capabilities can be assumed (e.g. `CopyFrom` and `Clone`). Will be inferred (default to `true`) where the `Type` is `ChangeLog` or the `Type` is found as another `Entity` within the code-generation configuration file.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Immutable" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates that the value is immutable and therefore cannot be changed once set.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DateTimeTransform" use="optional">
                    <xs:annotation>
                      <xs:documentation>The `DateTime` transformation to be performed on `Set` and `CleanUp`. Defaults to `UseDefault`. This is only applied where the `Type` is `DateTime`.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="UseDefault" />
                        <xs:enumeration value="None" />
                        <xs:enumeration value="DateOnly" />
                        <xs:enumeration value="DateTimeLocal" />
                        <xs:enumeration value="DateTimeUtc" />
                        <xs:enumeration value="DateTimeUnspecified" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                  <xs:attribute name="StringTrim" use="optional">
                    <xs:annotation>
                      <xs:documentation>The `string` trimming of white space characters to be performed on `Set` and `CleanUp`. Defaults to `UseDefault`. This is only applied where the `Type` is `string`.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="UseDefault" />
                        <xs:enumeration value="None" />
                        <xs:enumeration value="Start" />
                        <xs:enumeration value="End" />
                        <xs:enumeration value="Both" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                  <xs:attribute name="StringTransform" use="optional">
                    <xs:annotation>
                      <xs:documentation>The `string` transformation to be performed on `Set` and `CleanUp`. Defaults to `UseDefault`. This is only applied where the `Type` is `string`.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="UseDefault" />
                        <xs:enumeration value="None" />
                        <xs:enumeration value="NullToEmpty" />
                        <xs:enumeration value="EmptyToNull" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                  <xs:attribute name="AutoCreate" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether an instance of the `Type` is to be automatically created/instantiated when the property is first accessed (i.e. lazy instantiation).</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Default" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The C# code to default the value. Where the `Type` is `string` then the specified default value will need to be delimited. Any valid value assignment C# code can be used.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="SecondaryPropertyChanged" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The names of the secondary property(s), comma delimited, that are to be notified on a property change.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="BubblePropertyChanges" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the value should bubble up property changes versus only recording within the sub-entity itself. Note that the `IsEntity` property is also required to enable.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ExcludeCleanup" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates that `CleanUp` is not to be performed for the property within the `Entity.CleanUp` method.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="RefDataType" use="optional">
                    <xs:annotation>
                      <xs:documentation>The underlying Reference Data Type that is also used as the Reference Data serialization identifier (SID). Defaults to `string` where not specified and the corresponding `Type` starts with (prefix) `RefDataNamespace.`.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="string" />
                        <xs:enumeration value="int" />
                        <xs:enumeration value="Guid" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                  <xs:attribute name="RefDataList" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates that the Reference Data property is to be a serializable list (`ReferenceDataSidList`). This is required to enable a list of Reference Data values (as per `RefDataType`) to be passed as an argument for example.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="RefDataText" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether a corresponding `Text` property is added when generating a Reference Data property, overriding the `Entity.RefDataText` selection. This is used where serializing within the Web API `Controller` and the `ExecutionContext.IsRefDataTextSerializationEnabled` is set to `true` (which is automatically set where the url contains `$text=true`).</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="RefDataMapping" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the property should use the underlying Reference Data mapping capabilities. Mapped properties are a special Reference Data property type that ensure value uniqueness; this allows the likes of additional to/from mappings to occur between systems where applicable.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="JsonName" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The JSON property name. Defaults to `ArgumentName` where not specified (i.e. camelCase).</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="IgnoreSerialization" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the property is not to be serialized. All properties are serialized by default.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="EmitDefaultValue" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether to emit the default value when serializing.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataModelJsonName" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The override JSON property name where outputting as a data model. Defaults to `JsonName` where not specified.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataName" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The data name where Entity.AutoImplement is selected. Defaults to the property `Name`. Represents the column name for a `Database`, or the correspinding property name for the other options.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataConverter" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The data `Converter` class name where `Entity.AutoImplement` is selected. A `Converter` is used to convert a data source value to/from a .NET `Type` where no standard data conversion can be applied.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="IsDataConverterGeneric" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the data `Converter` is a generic class and will automatically use the corresponding property `Type` as the generic `T`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataMapperIgnore" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the property should be ignored (excluded) from the `Data`-layer / data `Mapper` generated output. All properties are included by default.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataAutoGenerated" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the `UniqueKey` property value is automatically generated by the data source on `Create`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataOperationTypes" use="optional">
                    <xs:annotation>
                      <xs:documentation>The operations types (`ExecutionContext.OperationType`) selection to enable inclusion and exclusion of property mapping. Defaults to `Any`.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="Any" />
                        <xs:enumeration value="AnyExceptCreate" />
                        <xs:enumeration value="AnyExceptUpdate" />
                        <xs:enumeration value="AnyExceptGet" />
                        <xs:enumeration value="Get" />
                        <xs:enumeration value="Create" />
                        <xs:enumeration value="Update" />
                        <xs:enumeration value="Delete" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                  <xs:attribute name="DataDatabaseMapper" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The database property `Mapper` class name where `Entity.AutoImplement` is selected. A `Mapper` is used to map a data source value to/from a .NET complex `Type` (i.e. class with one or more properties).</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataDatabaseIgnore" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the property should be ignored (excluded) from the database `Mapper` generated output.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataEntityFrameworkMapper" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The Entity Framework property `Mapper` class name where `Entity.AutoImplement` is selected. A `Mapper` is used to map a data source value to/from a .NET complex `Type` (i.e. class with one or more properties).</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataEntityFrameworkIgnore" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the property should be ignored (excluded) from the Entity Framework `Mapper` generated output.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataCosmosMapper" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The Cosmos property `Mapper` class name where `Entity.AutoImplement` is selected. A `Mapper` is used to map a data source value to/from a .NET complex `Type` (i.e. class with one or more properties).</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataCosmosIgnore" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the property should be ignored (excluded) from the Cosmos `Mapper` generated output.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataODataMapper" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The OData property `Mapper` class name where `Entity.AutoImplement` is selected. A `Mapper` is used to map a data source value to/from a .NET complex `Type` (i.e. class with one or more properties).</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataODataIgnore" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the property should be ignored (excluded) from the OData `Mapper` generated output.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DisplayName" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The display name used in the likes of error messages for the property. Defaults to the `Name` as sentence case.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Annotation1" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The property annotation (e.g. attribute) declaration code.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Annotation2" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The property annotation (e.g. attribute) declaration code.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Annotation3" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The property annotation (e.g. attribute) declaration code.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="WebApiQueryStringConverter" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The `IPropertyMapperConverter` to perform `Type` to `string` conversion for writing to and parsing from the query string.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="GrpcFieldNo" use="optional" type="xs:int">
                    <xs:annotation>
                      <xs:documentation>The unique (immutable) field number required to enable gRPC support.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="GrpcType" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The underlying gRPC data type; will be inferred where not specified.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
              <xs:element name="Operation" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>'CodeGeneration' object (entity-driven)</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Parameter" minOccurs="0" maxOccurs="unbounded">
                      <xs:annotation>
                        <xs:documentation>'Parameter' object (entity-driven)</xs:documentation>
                      </xs:annotation>
                      <xs:complexType>
                        <xs:attribute name="Name" use="required" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The unique parameter name.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="Text" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The overriding text for use in comments. By default the `Text` will be the `Name` reformatted as sentence casing.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="Type" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The .NET `Type`. Defaults to `string`. To reference a Reference Data `Type` always prefix with `RefDataNamespace` (e.g. `RefDataNamespace.Gender`). This will ensure that the appropriate Reference Data using statement is used. Shortcut: Where the `Type` starts with (prefix) `RefDataNamespace.` and the correspondong `RefDataType` attribute is not specified it will automatically default the `RefDataType` to `string.`</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="Nullable" use="optional" type="xs:boolean">
                          <xs:annotation>
                            <xs:documentation>Indicates whether the .NET `Type should be declared as nullable; e.g. `string?`. Will be inferred where the `Type` is denoted as nullable; i.e. suffixed by a `?`.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="Default" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The C# code to default the value. Where the `Type` is `string` then the specified default value will need to be delimited. Any valid value assignment C# code can be used.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="PrivateName" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The overriding private name. Overrides the `Name` to be used for private fields. By default reformatted from `Name`; e.g. `FirstName` as `_firstName`.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="ArgumentName" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The overriding argument name. Overrides the `Name` to be used for argument parameters. By default reformatted from `Name`; e.g. `FirstName` as `firstName`.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="Property" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The `Property.Name` within the parent `Entity` to copy (set) the configuration/characteristics from where not already defined.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="RefDataType" use="optional">
                          <xs:annotation>
                            <xs:documentation>The underlying Reference Data Type that is also used as the Reference Data serialization identifier (SID). Defaults to `string` where not specified and the corresponding `Type` starts with (prefix) `RefDataNamespace.`.</xs:documentation>
                          </xs:annotation>
                          <xs:simpleType>
                            <xs:restriction base="xs:string">
                              <xs:enumeration value="string" />
                              <xs:enumeration value="int" />
                              <xs:enumeration value="Guid" />
                            </xs:restriction>
                          </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute name="RefDataList" use="optional" type="xs:boolean">
                          <xs:annotation>
                            <xs:documentation>Indicates that the Reference Data property is to be a serializable list (`ReferenceDataSidList`). This is required to enable a list of Reference Data values (as per `RefDataType`) to be passed as an argument for example.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="Validator" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The name of the .NET `Type` that will perform the validation.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="IValidator" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The name of the .NET Interface that the `Validator` implements/inherits. Defaults to `IValidator&lt;{Type}&gt;` where the `{Type}` is `Type`.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="ValidatorFluent" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The fluent-style method-chaining C# validator code to append to `IsMandatory` and `Validator` (where specified).</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="IsMandatory" use="optional" type="xs:boolean">
                          <xs:annotation>
                            <xs:documentation>Indicates whether a `ValidationException` should be thrown when the parameter value has its default value (null, zero, etc).</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="LayerPassing" use="optional">
                          <xs:annotation>
                            <xs:documentation>The option that determines the layers in which the parameter is passed. Defaults to `All`. To further describe, `All` passes the parameter through all layeys, `ToManagerSet` only passes the parameter to the `Manager` layer and overrides the same named property within the corresponding `value` parameter, `ToManagerCollSet` only passes the parameter to the `Manager` layer and overrides the same named property within the corresponding `value` collection parameter. Where using the `UniqueKey` option to automatically set `Parameters`, and the `Operation.Type` is `Create` or `Update` it will default to `ToManagerSet`.</xs:documentation>
                          </xs:annotation>
                          <xs:simpleType>
                            <xs:restriction base="xs:string">
                              <xs:enumeration value="All" />
                              <xs:enumeration value="ToManagerSet" />
                              <xs:enumeration value="ToManagerCollSet" />
                            </xs:restriction>
                          </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute name="DataConverter" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The data `Converter` class name where specific data conversion is required. A `Converter` is used to convert a data source value to/from a .NET `Type` where the standard data type conversion is not applicable.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="IsDataConverterGeneric" use="optional" type="xs:boolean">
                          <xs:annotation>
                            <xs:documentation>Indicates whether the data `Converter` is a generic class and will automatically use the corresponding property `Type` as the generic `T`.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="WebApiFrom" use="optional">
                          <xs:annotation>
                            <xs:documentation>The option for how the parameter will be delcared within the Web API Controller. Defaults to `FromQuery`; unless the parameter `Type` has also been defined as an `Entity` within the code-gen config file then it will default to `FromEntityProperties`. Specifies that the parameter will be declared with corresponding `FromQueryAttribute`, `FromBodyAttribute` or `FromRouteAttribute` for the Web API method. The `FromEntityProperties` will declare all properties of the `Entity` as query parameters.</xs:documentation>
                          </xs:annotation>
                          <xs:simpleType>
                            <xs:restriction base="xs:string">
                              <xs:enumeration value="FromQuery" />
                              <xs:enumeration value="FromBody" />
                              <xs:enumeration value="FromRoute" />
                              <xs:enumeration value="FromEntityProperties" />
                            </xs:restriction>
                          </xs:simpleType>
                        </xs:attribute>
                        <xs:attribute name="GrpcType" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The underlying gRPC data type; will be inferred where not specified.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                  <xs:attribute name="Name" use="required" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The unique operation name.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="OperationType" use="required">
                    <xs:annotation>
                      <xs:documentation>The operation type.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="Get" />
                        <xs:enumeration value="GetColl" />
                        <xs:enumeration value="Create" />
                        <xs:enumeration value="Update" />
                        <xs:enumeration value="Patch" />
                        <xs:enumeration value="Delete" />
                        <xs:enumeration value="Custom" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                  <xs:attribute name="Text" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The text for use in comments. The `Text` will be defaulted for all the `Operation.Type` options with the exception of `Custom`. To create a `&lt;see cref="XXX"/&gt;` within use moustache shorthand (e.g. {{Xxx}}).</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="UniqueKey" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the properties marked as a unique key (`Property.UniqueKey`) are to be used as the parameters. This simplifies the specification of these properties versus having to declare each specifically.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="PagingArgs" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether a `PagingArgs` argument is to be added to the operation to enable (standardized) paging related logic.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ValueType" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The .NET value parameter `Type` for the operation. Defaults to the parent `Entity.Name` where the `Operation.Type` options are `Create` or `Update`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ReturnType" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The .NET return `Type` for the operation. Defaults to the parent `Entity.Name` where the `Operation.Type` options are `Get`, `GetColl`, `Create` or `Update`; otherwise, defaults to `void`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ReturnTypeNullable" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the `ReturnType` is nullable for the operation. This is only applicable for an `Operation.Type` of `Custom`. Will be inferred where the `ReturnType` is denoted as nullable; i.e. suffixed by a `?`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ReturnText" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The text for use in comments to describe the `ReturnType`. A default will be created where not specified. To create a `&lt;see cref="XXX"/&gt;` within use moustache shorthand (e.g. {{Xxx}}).</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="PrivateName" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The overriding private name. Overrides the `Name` to be used for private usage. By default reformatted from `Name`; e.g. `GetByArgs` as `_getByArgs`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="AutoImplement" use="optional">
                    <xs:annotation>
                      <xs:documentation>The operation override for the `Entity.AutoImplement`. Defaults to `Entity.AutoImplement`. The corresponding `Entity.AutoImplement` must be defined for this to be enacted. Auto-implementation is applicable for all `Operation.Type` options with the exception of `Custom`.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="Database" />
                        <xs:enumeration value="EntityFramework" />
                        <xs:enumeration value="Cosmos" />
                        <xs:enumeration value="OData" />
                        <xs:enumeration value="None" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                  <xs:attribute name="DataEntityMapper" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The override for the data entity `Mapper`. Used where the default generated `Mapper` is not applicable.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DatabaseStoredProc" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The database stored procedure name used where `Operation.AutoImplement` is `Database`. Defaults to `sp` + `Entity.Name` + `Operation.Name`; e.g. `spPersonCreate`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataCosmosContainerId" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The Cosmos `ContainerId` override used where `Operation.AutoImplement` is `Cosmos`. Overrides the `Entity.CosmosContainerId`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataCosmosPartitionKey" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The C# code override to be used for setting the optional Cosmos `PartitionKey` used where `Operation.AutoImplement` is `Cosmos`. Overrides the `Entity.CosmosPartitionKey`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ODataCollectionName" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The override name of the underlying OData collection where `Operation.AutoImplement` is `OData`. Overriddes the `Entity.ODataCollectionName`; otherwise, the underlying `Simple.OData.Client` will attempt to infer.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ManagerCustom" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the `Manager` logic is a custom implementation; i.e. no auto-`DataSvc` invocation logic is to be generated.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ManagerTransaction" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether a `System.TransactionScope` should be created and orchestrated at the `Manager`-layer.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Validator" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The name of the .NET Type that will perform the validation. Defaults to the `Entity.Validator` where not specified explicitly. Only used for `Operation.Type` options `Create` or `Update`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="IValidator" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The name of the .NET Interface that the `Validator` implements/inherits. Defaults to the `Entity.IValidator` where specified; otherwise, defaults to `IValidator&lt;{Type}&gt;` where the `{Type}` is `ValueType`. Only used `Operation.Type` options `Create` or `Update`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataSvcCustom" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the `DataSvc` logic is a custom implementation; i.e. no auto-`DataSvc` invocation logic is to be generated.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="DataSvcTransaction" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether a `System.TransactionScope` should be created and orchestrated at the `DataSvc`-layer.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="EventPublish" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether to add logic to publish an event on the successful completion of the `DataSvc` layer invocation for a `Create`, `Update` or `Delete` operation. Defaults to the `CodeGeneration.EventPublish` or `Entity.EventPublish` configuration property (inherits) where not specified. Used to enable the sending of messages to the likes of EventGrid, Service Broker, SignalR, etc.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="EventSubject" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The event subject template and corresponding event action pair (separated by a colon). The event subject template defaults to `{AppName}.{Entity.Name}` plus each of the unique key placeholders comma separated; e.g. `Domain.Entity.{id1},{id2}`. The event action defaults to `WebApiOperationType` or `Operation.Type` where not specified. Multiple events can be raised by specifying more than one subject/action pair separated by a semicolon. E.g. `Demo.Person.{id}:Create;Demo.Other.{id}:Update`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="WebApiRoute" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The Web API `RouteAtttribute` to be appended to the `Entity.WebApiRoutePrefix`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="WebApiAuthorize" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The authorize attribute value to be used for the corresponding entity Web API controller; generally `Authorize` (or `true`), otherwise `AllowAnonymous` (or `false`). Defaults to the `Entity.WebApiAuthorize` configuration property (inherits) where not specified.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="WebApiMethod" use="optional">
                    <xs:annotation>
                      <xs:documentation>The HTTP Method for the operation. The value defaults as follows: `HttpGet` for `Operation.Type` value `Get` or `GetColl`, `HttpPost` for `Operation.Type` value `Create` or `Custom`, `HttpPut` for `Operation.Type` value `Update`, and `HttpDelete` for `Operation.Type` value `Delete`. An `Operation.Type` value `Patch` can not be specified and will always default to `HttpPatch`.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="HttpGet" />
                        <xs:enumeration value="HttpPost" />
                        <xs:enumeration value="HttpPut" />
                        <xs:enumeration value="HttpDelete" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                  <xs:attribute name="WebApiStatus" use="optional">
                    <xs:annotation>
                      <xs:documentation>The primary HTTP Status Code that will be returned for the operation where there is a non-`null` return value. The value defaults as follows: `OK` for `Operation.Type` value `Get`, `GetColl`, `Update`, `Delete` or `Custom`, `Created` for `Operation.Type` value `Create`.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="OK" />
                        <xs:enumeration value="Accepted" />
                        <xs:enumeration value="Created" />
                        <xs:enumeration value="NoContent" />
                        <xs:enumeration value="NotFound" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                  <xs:attribute name="WebApiAlternateStatus" use="optional">
                    <xs:annotation>
                      <xs:documentation>The primary HTTP Status Code that will be returned for the operation where there is a `null` return value. The value defaults as follows: `NotFound` for `Operation.Type` value `Get`, `NoContent` for `Operation.Type` value `GetColl`, `Create`, `Update` or `Patch`; otherwise, `ThrowException` which will result in an `InvalidOperationException`.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="OK" />
                        <xs:enumeration value="Accepted" />
                        <xs:enumeration value="Created" />
                        <xs:enumeration value="NoContent" />
                        <xs:enumeration value="NotFound" />
                        <xs:enumeration value="ThrowException" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                  <xs:attribute name="WebApiOperationType" use="optional">
                    <xs:annotation>
                      <xs:documentation>The `ExecutionContext.OperationType` (CRUD denotation) where the `Operation.Type` is `Custom` (i.e. can not be inferred). The default will be inferred where possible; otherwise, set to `Unspecified`.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="Create" />
                        <xs:enumeration value="Read" />
                        <xs:enumeration value="Update" />
                        <xs:enumeration value="Delete" />
                        <xs:enumeration value="Unspecified" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                  <xs:attribute name="PatchGetOperation" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The corresponding `Get` method name (in the `XxxManager`) where the `Operation.Type` is `Patch`. Defaults to `Get`. Specify either just the method name (e.g. `OperationName`) or, interface and method name (e.g. `IXxxManager.OperationName`) to be invoked where in a different `YyyManager.OperationName`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="PatchUpdateOperation" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The corresponding `Update` method name (in the `XxxManager`) where the `Operation.Type` is `Patch`. Defaults to `Update`. Specify either just the method name (e.g. `OperationName`) or, interface and method name (e.g. `IXxxManager.OperationName`) to be invoked where in a different `YyyManager.OperationName`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="AuthPermission" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The permission used by the `ExecutionContext.IsAuthorized(AuthPermission)` to determine whether the user is authorized.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="AuthRole" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The permission used by the `ExecutionContext.IsInRole(AuthRole)` to determine whether the user is authorized.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ExcludeAll" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>The option to exclude the generation of all `Operation` related output; excluding the `Entity` class. Is a shorthand means for setting all of the other `Exclude*` properties (with the exception of `ExcludeEntity`) to `true`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ExcludeIData" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether to exclude the generation of the `IData` interface (`IXxxData.cs`) output.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ExcludeData" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether to exclude the generation of the `Data` class (`XxxData.cs`) output.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ExcludeIDataSvc" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether to exclude the generation of the `IDataSvc` interface (`IXxxDataSvc.cs`) output.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ExcludeDataSvc" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether to exclude the generation of the `DataSvc` class (`IXxxDataSvc.cs`) output.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ExcludeIManager" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether to exclude the generation of the `IManager` interface (`IXxxManager.cs`) output.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ExcludeManager" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether to exclude the generation of the `Manager` class (`XxxManager.cs`) output.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ExcludeWebApi" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether to exclude the generation of the `XxxController` class (`IXxxController.cs`) output.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ExcludeWebApiAgent" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether to exclude the generation of the `XxxAgent` class (`XxxAgent.cs`) output.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ExcludeGrpcAgent" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether to exclude the generation of the `XxxAgent` class (`XxxAgent.cs`) output.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Grpc" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether gRPC support (more specifically service-side) is required for the Operation. gRPC support is an explicit opt-in model (see `CodeGeneration.Grpc` configuration); therefore, each corresponding `Entity`, `Property` and `Operation` will also need to be opted-in specifically.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
              <xs:element name="Const" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>'Const' object (entity-driven)</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:attribute name="Name" use="required" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The unique constant name.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Value" use="required" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The .NET (C#) code for the constant value. The code generation will ensure the value is delimited properly to output correctly formed (delimited) .NET (C#) code.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Text" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The overriding text for use in comments. By default the `Text` will be the `Name` reformatted as sentence casing. It will be formatted as: `Represents a {text} constant value.` To create a `&lt;see cref="XXX"/&gt;` within use moustache shorthand (e.g. `{{Xxx}}`).</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
            <xs:attribute name="Name" use="required" type="xs:string">
              <xs:annotation>
                <xs:documentation>The unique entity name.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Text" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The overriding text for use in comments. Overrides the Name (as sentence text) for the summary comments. It will be formatted as: `Represents the {Text} entity.`. To create a `&lt;see cref="XXX"/&gt;` within use moustache shorthand (e.g. {{Xxx}}).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="FileName" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The overriding file name. Overrides the Name as the code-generated file name.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="EntityScope" use="optional">
              <xs:annotation>
                <xs:documentation>The entity scope option. Determines whether the entity is considered `Common` (default) or should be scoped to the `Business` namespace/assembly only (i.e. not externally visible).</xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="Common" />
                  <xs:enumeration value="Business" />
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="PrivateName" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The overriding private name. Overrides the `Name` to be used for private fields. By default reformatted from `Name`; e.g. `FirstName` as `_firstName`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ArgumentName" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The overriding argument name. Overrides the `Name` to be used for argument parameters. By default reformatted from `Name`; e.g. `FirstName` as `firstName`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ConstType" use="optional">
              <xs:annotation>
                <xs:documentation>The Const .NET Type option. The .NET Type to be used for the `const` values. Defaults to `string`.</xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="int" />
                  <xs:enumeration value="Guid" />
                  <xs:enumeration value="string" />
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="IsInitialOverride" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether to override the `ICleanup.IsInitial` property. Set to either `true` or `false` to override as specified; otherwise, `null` to check each property. Defaults to `null`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="RefDataType" use="optional">
              <xs:annotation>
                <xs:documentation>The Reference Data identifier Type option. Required to identify an entity as being Reference Data. Specifies the underlying .NET Type used for the Reference Data identifier.</xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="int" />
                  <xs:enumeration value="Guid" />
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="RefDataText" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether a corresponding `Text` property is added when generating a Reference Data `Property` overriding the `CodeGeneration.RefDataText` selection. This is used where serializing within the Web API`Controller` and the `ExecutionContext.IsRefDataTextSerializationEnabled` is set to `true` (which is automatically set where the url contains `$text=true`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="RefDataSortOrder" use="optional">
              <xs:annotation>
                <xs:documentation>The Reference Data sort order option. Specifies the default sort order for the underlying Reference Data collection. Defaults to `SortOrder`.</xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="SortOrder" />
                  <xs:enumeration value="Id" />
                  <xs:enumeration value="Code" />
                  <xs:enumeration value="Text" />
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="RefDataStringFormat" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The Reference Data `ToString` composite format. The string format supports the standard composite formatting; where the following indexes are used: `{0}` for `Id`, `{1}` for `Code` and `{2}` for `Text`. Defaults to `{2}`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Inherits" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The base class that the entity inherits from. Defaults to `EntityBase` for a standard entity. For Reference Data it will default to `ReferenceDataBaseInt` or `ReferenceDataBaseGuid` depending on the corresponding `RefDataType` value. See `OmitEntityBase` if the desired outcome is to not inherit from any of the aforementioned base classes.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Implements" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The list of comma separated interfaces that are to be declared for the entity class.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="AutoInferImplements" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether to automatically infer the interface implements for the entity from the properties declared. Will attempt to infer the following: `IGuidIdentifier`, `IIntIdentifier`, `IStringIdentifier`, `IETag` and `IChangeLog`. Defaults to `true`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Abstract" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether the class should be defined as abstract.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="GenericWithT" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether the class should be defined as a generic with a single parameter `T`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Namespace" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The entity namespace to be appended. Appended to the end of the standard structure as follows: `{Company}.{AppName}.Common.Entities.{Namespace}`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="OmitEntityBase" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates that the entity should not inherit from `EntityBase`. As such any of the `EntityBase` related capabilites are not supported (are omitted from generation). The intention for this is more for the generation of simple internal entities.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="JsonSerializer" use="optional">
              <xs:annotation>
                <xs:documentation>The JSON Serializer to use for JSON property attribution. Defaults to the `CodeGeneration.JsonSerializer` configuration property where specified; otherwise, `Newtonsoft`.</xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="None" />
                  <xs:enumeration value="Newtonsoft" />
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="Collection" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether a corresponding entity collection class should be created.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="CollectionResult" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether a corresponding entity collection result class should be created Enables the likes of additional paging state to be stored with the underlying collection.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="CollectionKeyed" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether the entity collection is keyed using the properties defined as forming part of the unique key.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="CollectionInherits" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The base class that a `Collection` inherits from. Defaults to `EntityBaseCollection` or `EntityBaseKeyedCollection` depending on `CollectionKeyed`. For Reference Data it will default to `ReferenceDataCollectionBase`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="CollectionResultInherits" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The base class that a `CollectionResult` inherits from. Defaults to `EntityCollectionResult`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Get" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates that a `Get` operation will be automatically generated where not otherwise explicitly specified.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="GetAll" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates that a `GetAll` operation will be automatically generated where not otherwise explicitly specified.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Create" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates that a `Create` operation will be automatically generated where not otherwise explicitly specified.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Update" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates that a `Update` operation will be automatically generated where not otherwise explicitly specified.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Patch" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates that a `Patch` operation will be automatically generated where not otherwise explicitly specified.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Delete" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates that a `Delete` operation will be automatically generated where not otherwise explicitly specified.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="AutoImplement" use="optional">
              <xs:annotation>
                <xs:documentation>The data source auto-implementation option. Defaults to `None`. Indicates that the implementation for the underlying `Operations` will be auto-implemented using the selected data source (unless explicity overridden). When selected some of the related attributes will also be required (as documented). Additionally, the `AutoImplement` indicator must be selected for each underlying `Operation` that is to be auto-implemented.</xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="Database" />
                  <xs:enumeration value="EntityFramework" />
                  <xs:enumeration value="Cosmos" />
                  <xs:enumeration value="OData" />
                  <xs:enumeration value="None" />
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="MapperAddStandardProperties" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates that the `AddStandardProperties` method call is to be included for the generated (corresponding) `Mapper`. Defaults to `true`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DataConstructor" use="optional">
              <xs:annotation>
                <xs:documentation>The access modifier for the generated `Data` constructor. Defaults to `Public`.</xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="Public" />
                  <xs:enumeration value="Private" />
                  <xs:enumeration value="Protected" />
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="DataCtorParams" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The comma seperated list of additional (non-inferred) Dependency Injection (DI) arguments for the generated `Data` constructor. Each constructor argument should be formatted as `Type` + `^` + `Name`; e.g. `IConfiguration^Config`. Where the `Name` portion is not specified it will be inferred. Where the `Type` matches an already inferred value it will be ignored.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DataExtensions" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether the `Data` extensions logic should be generated.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DatabaseName" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The .NET database interface name (used where `AutoImplement` is `Database`). Defaults to the `CodeGeneration.DatabaseName` configuration property (its default value is `IDatabase`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DatabaseSchema" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The database schema name (used where `AutoImplement` is `Database`). Defaults to `dbo`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DataDatabaseMapperInheritsFrom" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The name of the `Mapper` that the generated Database `Mapper` inherits from.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DatabaseCustomerMapper" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates that a custom Database `Mapper` will be used; i.e. not generated. Otherwise, by default, a `Mapper` will be generated.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="EntityFrameworkName" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The .NET Entity Framework interface name used where `AutoImplement` is `EntityFramework`. Defaults to the `CodeGeneration.EntityFrameworkName` configuration property (its default value is `IEfDb`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="EntityFrameworkEntity" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The corresponding Entity Framework model name (required where `AutoImplement` is `EntityFramework`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DataEntityFrameworkMapperInheritsFrom" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The name of the `Mapper  that the generated Entity Framework `Mapper` inherits from. Defaults to `Model.{Name}`; i.e. an entity with the same name in the `Model` namespace.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DataEntityFrameworkCustomMapper" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates that a custom Entity Framework `Mapper` will be used; i.e. not generated. Otherwise, by default, a `Mapper` will be generated.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="CosmosName" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The .NET Cosmos interface name used where `AutoImplement` is `Cosmos`. Defaults to the `CodeGeneration.CosmosName` configuration property (its default value is `ICosmosDb`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="CosmosEntity" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The corresponding Cosmos model name (required where `AutoImplement` is `Cosmos`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="CosmosContainerId" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The Cosmos `ContainerId` required where `AutoImplement` is `Cosmos`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="CosmosPartitionKey" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The C# code to be used for setting the optional Cosmos `PartitionKey` where `AutoImplement` is `Cosmos`. Defaults to `PartitionKey.None`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DataCosmosValueContainer" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether the `CosmosDbValueContainer` is to be used; otherwise, `CosmosDbContainer`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DataCosmosMapperInheritsFrom" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The name of the `Mapper` that the generated Cosmos `Mapper` inherits from.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DataCosmosCustomMapper" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates that a custom Cosmos `Mapper` will be used; i.e. not generated. Otherwise, by default, a `Mapper` will be generated.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ODataName" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The .NET OData interface name used where `AutoImplement` is `OData`. Defaults to the `CodeGeneration.ODataName` configuration property (its default value is `IOData`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ODataEntity" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The corresponding OData model name (required where `AutoImplement` is `OData`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ODataCollectionName" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The name of the underlying OData collection where `AutoImplement` is `OData`. The underlying `Simple.OData.Client` will attempt to infer.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DataODataMapperInheritsFrom" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The name of the `Mapper` that the generated OData `Mapper` inherits from.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DataODataCustomMapper" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates that a custom OData `Mapper` will be used; i.e. not generated. Otherwise, by default, a `Mapper` will be generated.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DataSvcCaching" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether request-based `IRequestCache` caching is to be performed at the `DataSvc` layer to improve performance (i.e. reduce chattiness). Defaults to `true`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="EventPublish" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether to add logic to publish an event on the successful completion of the `DataSvc` layer invocation for a `Create`, `Update` or `Delete` operation. Defaults to the `CodeGeneration.EventPublish` configuration property (inherits) where not specified. Used to enable the sending of messages to the likes of EventGrid, Service Broker, SignalR, etc.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DataSvcConstructor" use="optional">
              <xs:annotation>
                <xs:documentation>The access modifier for the generated `DataSvc` constructor. Defaults to `Public`.</xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="Public" />
                  <xs:enumeration value="Private" />
                  <xs:enumeration value="Protected" />
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="DataSvcCtorParams" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The comma seperated list of additional (non-inferred) Dependency Injection (DI) arguments for the generated `DataSvc` constructor. Each constructor argument should be formatted as `Type` + `^` + `Name`; e.g. `IConfiguration^Config`. Where the `Name` portion is not specified it will be inferred. Where the `Type` matches an already inferred value it will be ignored.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DataSvcExtensions" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether the `DataSvc` extensions logic should be generated.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ManagerConstructor" use="optional">
              <xs:annotation>
                <xs:documentation>The access modifier for the generated `Manager` constructor. Defaults to `Public`.</xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="Public" />
                  <xs:enumeration value="Private" />
                  <xs:enumeration value="Protected" />
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="ManagerCtorParams" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The comma seperated list of additional (non-inferred) Dependency Injection (DI) arguments for the generated `Manager` constructor. Each constructor argument should be formatted as `Type` + `^` + `Name`; e.g. `IConfiguration^Config`. Where the `Name` portion is not specified it will be inferred. Where the `Type` matches an already inferred value it will be ignored.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ManagerExtensions" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether the `Manager` extensions logic should be generated.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Validator" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The name of the .NET `Type` that will perform the validation. Only used for defaulting the `Create` and `Update` operation types (`Operation.Type`) where not specified explicitly.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IValidator" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The name of the .NET Interface that the `Validator` implements/inherits. Only used for defaulting the `Create` and `Update` operation types (`Operation.Type`) where not specified explicitly.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="WebApiRoutePrefix" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The `RoutePrefixAtttribute` for the corresponding entity Web API controller. This is the base (prefix) `URI` for the entity and can be further extended when defining the underlying `Operation`(s).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="WebApiAuthorize" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The authorize attribute value to be used for the corresponding entity Web API controller; generally `Authorize` (or `true`), otherwise `AllowAnonymous` (or `false`). Defaults to the `CodeGeneration.WebApiAuthorize` configuration property (inherits) where not specified; can be overridden at the `Operation` level also.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="WebApiCtor" use="optional">
              <xs:annotation>
                <xs:documentation>The access modifier for the generated Web API `Controller` constructor. Defaults to `Public`.</xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="Public" />
                  <xs:enumeration value="Private" />
                  <xs:enumeration value="Protected" />
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="WebApiCtorParams" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The comma seperated list of additional (non-inferred) Dependency Injection (DI) arguments for the generated `WebApi` constructor. Each constructor argument should be formatted as `Type` + `^` + `Name`; e.g. `IConfiguration^Config`. Where the `Name` portion is not specified it will be inferred. Where the `Type` matches an already inferred value it will be ignored.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DataModel" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether a data `model` version of the entity should also be generated (output to `.\Business\Data\Model`). The model will be generated with `OmitEntityBase = true`. Any reference data properties will be defined using their `RefDataType` intrinsic `Type` versus their corresponding (actual) reference data `Type`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeEntity" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether to exclude the generation of the `Entity` class (`Xxx.cs`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeAll" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>The option to exclude the generation of all `Operation` related artefacts; excluding the `Entity` class. Is a shorthand means for setting all of the other `Exclude*` properties (with the exception of `ExcludeEntity`) to `true`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeIData" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether to exclude the generation of the `IData` interface (`IXxxData.cs`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeData" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether to exclude the generation of the `Data` class (`XxxData.cs`). An unspecified (null) value indicates _not_ to exclude. A value of `true` indicates to exclude all output; alternatively, where `false` is specifically specified it indicates to at least output the corresponding `Mapper` class.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeIDataSvc" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether to exclude the generation of the `IDataSvc` interface (`IXxxDataSvc.cs`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeDataSvc" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether to exclude the generation of the `DataSvc` class (`IXxxDataSvc.cs`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeIManager" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether to exclude the generation of the `IManager` interface (`IXxxManager.cs`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeManager" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether to exclude the generation of the `Manager` class (`XxxManager.cs`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeWebApi" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether to exclude the generation of the `XxxController` class (`IXxxController.cs`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeWebApiAgent" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether to exclude the generation of the `XxxAgent` class (`XxxAgent.cs`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeGrpcAgent" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether to exclude the generation of the `XxxAgent` class (`XxxAgent.cs`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="AuthRole" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The role (permission) used by the `ExecutionContext.IsInRole(role)` for each `Operation`. Used where not overridden specifically for an `Operation`; i.e. acts as the default.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Grpc" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether gRPC support (more specifically service-side) is required for the Entity. gRPC support is an explicit opt-in model (see `CodeGeneration.Grpc` configuration); therefore, each corresponding `Property` and `Operation` will also need to be opted-in specifically.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="RefDataNamespace" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The namespace for the Reference Data entities (adds as a c# `using` statement) where the `Entity.EntityScope` property configuration is `Common`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="RefDataText" use="optional" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Indicates whether a corresponding `Text` property is added when generating a Reference Data `Property` for an `Entity`. This is used where serializing within the Web API `Controller` and the `ExecutionContext.IsRefDataTextSerializationEnabled` is set to `true` (which is automatically set where the url contains `$text=true`).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="RefDataWebApiRoute" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The `RouteAtttribute` for the Reference Data Web API controller required for named pre-fetching.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="RefDataCache" use="optional">
        <xs:annotation>
          <xs:documentation>The cache used for the ReferenceData providers. Defaults to `ReferenceDataCache`. A value of `ReferenceDataCache` specifies a single-tenant cache; otherwise, `ReferenceDataMultiTenantCache` for a multi-tenant cache leverageing the `ExecutionContext.TenantId`.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="ReferenceDataCache" />
            <xs:enumeration value="ReferenceDataMultiTenantCache" />
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="AppendToNamespace" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The Reference Data entity namespace appended to end of the standard `company.appname.Common.Entities.{AppendToNamespace}`. Defaults to `null`; being nothing to append.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="RefDataBusNamespace" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The namespace for the Reference Data entities (adds as a c# `using` statement) where the `Entity.EntityScope` property configuration is `Business`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="JsonSerializer" use="optional">
        <xs:annotation>
          <xs:documentation>The JSON Serializer to use for JSON property attribution. Defaults to `Newtonsoft`. This can be overridden within the `Entity`(s).</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="None" />
            <xs:enumeration value="Newtonsoft" />
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="EntityUsing" use="optional">
        <xs:annotation>
          <xs:documentation>The namespace for the non Reference Data entities (adds as a c# &lt;c&gt;using&lt;/c&gt; statement). Defaults to `Common` which will add `.Common.Entities`. Otherwise, `Business` to add `.Business.Entities`, `All` to add both, and `None` to exclude any.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="Common" />
            <xs:enumeration value="Business" />
            <xs:enumeration value="All" />
            <xs:enumeration value="None" />
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="UsingNamespace1" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The additional Namespace using statement to the added to the generated `Entity` code. Typically used where referening a `Type` from a Namespace that is not generated by default.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="UsingNamespace2" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The additional Namespace using statement to the added to the generated `Entity` code. Typically used where referening a `Type` from a Namespace that is not generated by default.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="UsingNamespace3" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The additional Namespace using statement to the added to the generated `Entity` code. Typically used where referening a `Type` from a Namespace that is not generated by default.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="WebApiAuthorize" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The authorize attribute value to be used for the corresponding entity Web API controller; generally `Authorize` (or `true`), otherwise `AllowAnonymous` (or `false`). Defaults to `AllowAnonymous`. This can be overidden within the `Entity`(s) and/or their corresponding `Operation`(s).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="AppBasedAgentArgs" use="optional" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Indicates whether to create and use a domain-specific `WebApi.WebApiAgentArgs` to simplify dependency injection usage.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ValidatorLayer" use="optional">
        <xs:annotation>
          <xs:documentation>The namespace for the Reference Data entities (adds as a c# `using` statement). Defaults to `Business`. A value of `Business` indicates that the Validators will be defined within the `Business` namespace/assembly; otherwise, defined within the `Common` namespace/assembly.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="Business" />
            <xs:enumeration value="Common" />
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="DatabaseName" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The .NET database interface name (used where `Operation.AutoImplement` is `Database`). Defaults to `IDatabase`. This can be overridden within the `Entity`(s).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="EntityFrameworkName" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The .NET Entity Framework interface name used where `Operation.AutoImplement` is `EntityFramework`. Defaults to `IEfDb`. This can be overridden within the `Entity`(s).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="CosmosName" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The .NET Entity Framework interface name used where `Operation.AutoImplement` is `Cosmos`. Defaults to `ICosmosDb`. This can be overridden within the `Entity`(s).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ODataName" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The .NET OData interface name used where `Operation.AutoImplement` is `OData`. Defaults to `IOData`. This can be overridden within the `Entity`(s).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="MapperDefaultRefDataConverter" use="optional">
        <xs:annotation>
          <xs:documentation>The default Reference Data property `Converter` used by the generated `Mapper`(s) where not specifically defined. Defaults to `ReferenceDataCodeConverter`.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="ReferenceDataCodeConverter" />
            <xs:enumeration value="ReferenceDataInt32IdConverter" />
            <xs:enumeration value="ReferenceDataNullableInt32IdConverter" />
            <xs:enumeration value="ReferenceDataGuidIdConverter" />
            <xs:enumeration value="ReferenceDataNullableGuidIdConverter" />
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="DataUsingNamespace" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The additional Namespace using statement to the added to the generated `Data` code.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="DatabaseUsingNamespace" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The additional Namespace using statement to the added to the generated `Data` code where `Operation.AutoImplement` is `Database`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="EntityFrameworkUsingNamespace" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The additional Namespace using statement to the added to the generated `Data` code where `Operation.AutoImplement` is `EntityFramework`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="CosmosUsingNamespace" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>additional Namespace using statement to the added to the generated `Data` code where `Operation.AutoImplement` is `Cosmos`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ODataUsingNamespace" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>additional Namespace using statement to the added to the generated `Data` code where `Operation.AutoImplement` is `OData`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="EventPublish" use="optional" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Indicates whether to add logic to publish an event on the successful completion of the `DataSvc` layer invocation for a `Create`, `Update` or `Delete` operation. Defaults to `true`. Used to enable the sending of messages to the likes of EventHub, Service Broker, SignalR, etc. This can be overidden within the `Entity`(s).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="EventSubjectRoot" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The root for the event name by prepending to all event subject names. Used to enable the sending of messages to the likes of EventHub, Service Broker, SignalR, etc. This can be overidden within the `Entity`(s).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="EventActionFormat" use="optional">
        <xs:annotation>
          <xs:documentation>The formatting for the Action when an Event is published. Defaults to `None` (no formatting required)`.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="None" />
            <xs:enumeration value="UpperCase" />
            <xs:enumeration value="PastTense" />
            <xs:enumeration value="PastTenseUpperCase" />
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="Grpc" use="optional" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Indicates whether gRPC support (more specifically service-side) is required. gRPC support is an explicit opt-in model. Must be set to `true` for any of the subordinate gRPC capabilities to be code-generated. Will require each `Entity`, and corresponding `Property` and `Operation` to be opted-in specifically.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="PathBase" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The path (directory) for the Database-related artefacts. Defaults to `Company` (runtime parameter) + `.` + `AppName` (runtime parameter). For example `Beef.Demo`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="PathCommon" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The path (directory) for the Database-related artefacts. Defaults to `PathBase` + `.Common` (literal). For example `Beef.Demo.Common`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="PathBusiness" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The path (directory) for the Business-related (.NET) artefacts. Defaults to `PathBase` + `.Business` (literal). For example `Beef.Demo.Business`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="PathApi" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The path (directory) for the API-related (.NET) artefacts. Defaults to `PathBase` + `.` + `ApiName` (runtime parameter). For example `Beef.Demo.Api`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="NamespaceBase" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The base Namespace (root) for the .NET artefacts. Defaults to `Company` (runtime parameter) + `.` + `AppName` (runtime parameter). For example `Beef.Demo`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="NamespaceCommon" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The Namespace (root) for the Common-related .NET artefacts. Defaults to `NamespaceBase` + `.Common` (literal). For example `Beef.Demo.Common`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="NamespaceBusiness" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The Namespace (root) for the Business-related .NET artefacts. Defaults to `NamespaceBase` + `.Business` (literal). For example `Beef.Demo.Business`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="NamespaceApi" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The Namespace (root) for the Api-related .NET artefacts. Defaults to `NamespaceBase` + `.` + `ApiName` (runtime parameter). For example `Beef.Demo.Api`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
</xs:schema>
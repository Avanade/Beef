{
  "title": "JSON Schema for Beef Entity code-generation (https://github.com/Avanade/Beef).",
  "$schema": "http://json-schema.org/draft-04/schema",
  "type": "object",
  "properties": {
    "refDataNamespace": {
      "type": "string",
      "title": "The namespace for the Reference Data entities (adds as a c# `using` statement) where the `Entity.EntityScope` property configuration is `Common`."
    },
    "refDataBusNamespace": {
      "type": "string",
      "title": "The namespace for the Reference Data entities (adds as a c# `using` statement) where the `Entity.EntityScope` property configuration is `Business`."
    },
    "refDataWebApiRoutePrefix": {
      "type": "string",
      "title": "The `RouteAtttribute` for the Reference Data Web API controller required for named pre-fetching."
    },
    "refDataCache": {
      "type": "string",
      "title": "The cache used for the ReferenceData providers.",
      "description": "Defaults to `ReferenceDataCache`. A value of `ReferenceDataCache` specifies a single-tenant cache; otherwise, `ReferenceDataMultiTenantCache` for a multi-tenant cache leverageing the `ExecutionContext.TenantId`.",
      "enum": [
        "ReferenceDataCache",
        "ReferenceDataMultiTenantCache"
      ]
    },
    "refDataText": {
      "type": "boolean",
      "title": "Indicates whether a corresponding `text` property is added when generating a reference data property overridding the `CodeGeneration.RefDataText` selection.",
      "description": "This is used where serializing within the `Controller` and the `ExecutionContext.IsRefDataTextSerializationEnabled` is set to true (automatically performed where url contains `$text=true`)."
    },
    "refDataAppendToNamespace": {
      "type": "string",
      "title": "The Reference Data entity namespace appended to end of the standard `company.appname.Common.Entities.{AppendToNamespace}`.",
      "description": "Defaults to `null`; being nothing to append."
    },
    "jsonSerializer": {
      "type": "string",
      "title": "The JSON Serializer to use for JSON property attribution.",
      "description": "Defaults to `Newtonsoft`. This can be overridden within the `Entity`(s).",
      "enum": [
        "None",
        "Newtonsoft"
      ]
    },
    "entityUsing": {
      "type": "string",
      "title": "The namespace for the non Reference Data entities (adds as a c# <c>using</c> statement).",
      "description": "Defaults to `Common` to add `.Common.Entities`. Otherwise, `Business` to add `.Business.Entities`, `All` to add both, and `None` to exclude.",
      "enum": [
        "Common",
        "Business",
        "All",
        "None"
      ]
    },
    "usingNamespace1": {
      "type": "string",
      "title": "additional Namespace using statement to the added to the generated `Entity` code.",
      "description": "Typically used where referening a `Type` from a Namespace that is not generated by default."
    },
    "usingNamespace2": {
      "type": "string",
      "title": "additional Namespace using statement to the added to the generated `Entity` code.",
      "description": "Typically used where referening a `Type` from a Namespace that is not generated by default."
    },
    "usingNamespace3": {
      "type": "string",
      "title": "additional Namespace using statement to the added to the generated `Entity` code.",
      "description": "Typically used where referening a `Type` from a Namespace that is not generated by default."
    },
    "webApiAuthorize": {
      "type": "boolean",
      "title": "Indicates whether the Web API controller should use `Authorize` (`true`); otherwise, `AllowAnonynous` (`false`).",
      "description": "Defaults to the `AllowAnonynous`. This can be overidden within the `Entity`(s) and/or their corresponding `Operation`(s)."
    },
    "validatorLayer": {
      "type": "string",
      "title": "The namespace for the Reference Data entities (adds as a c# `using` statement).",
      "description": "Defaults to `Business`. A value of `Business` indicates that the Validators will be defined within the `Business` namespace/assembly; otherwise, defined within the `Common` namespace/assembly.",
      "enum": [
        "Business",
        "Common"
      ]
    },
    "databaseName": {
      "type": "string",
      "title": "The .NET database interface name (used where `Operation.AutoImplement` is `Database`).",
      "description": "Defaults to `IDatabase`. This can be overridden within the `Entity`(s)."
    },
    "entityFrameworkName": {
      "type": "string",
      "title": "The .NET Entity Framework interface name used where `Operation.AutoImplement` is `EntityFramework`.",
      "description": "Defaults to `IEfDb`. This can be overridden within the `Entity`(s)."
    },
    "cosmosName": {
      "type": "string",
      "title": "The .NET Entity Framework interface name used where `Operation.AutoImplement` is `Cosmos`.",
      "description": "Defaults to `ICosmosDb`. This can be overridden within the `Entity`(s)."
    },
    "odataName": {
      "type": "string",
      "title": "The .NET OData interface name used where `Operation.AutoImplement` is `OData`.",
      "description": "Defaults to `IOData`. This can be overridden within the `Entity`(s)."
    },
    "refDataDefaultMapperConverter": {
      "type": "string",
      "title": "The default Reference Data property `Converter` used by the generated `Mapper`(s) where not specifically defined.",
      "description": "Defaults to `Business`. A value of `Business` indicates that the Validators will be defined within the `Business` namespace/assembly; otherwise, defined within the `Common` namespace/assembly.",
      "enum": [
        "ReferenceDataCodeConverter",
        "ReferenceDataInt32IdConverter",
        "ReferenceDataNullableInt32IdConverter",
        "ReferenceDataGuidIdConverter",
        "ReferenceDataNullableGuidIdConverter"
      ]
    },
    "dataUsingNamespace": {
      "type": "string",
      "title": "additional Namespace using statement to the added to the generated `Data` code."
    },
    "databaseUsingNamespace": {
      "type": "string",
      "title": "additional Namespace using statement to the added to the generated `Data` code where `Operation.AutoImplement` is `Database`."
    },
    "entityFrameworkUsingNamespace": {
      "type": "string",
      "title": "additional Namespace using statement to the added to the generated `Data` code where `Operation.AutoImplement` is `EntityFramework`."
    },
    "cosmosUsingNamespace": {
      "type": "string",
      "title": "additional Namespace using statement to the added to the generated `Data` code where `Operation.AutoImplement` is `Cosmos`."
    },
    "odataUsingNamespace": {
      "type": "string",
      "title": "additional Namespace using statement to the added to the generated `Data` code where `Operation.AutoImplement` is `OData`."
    },
    "eventPublish": {
      "type": "boolean",
      "title": "Indicates whether to add logic to publish an event on the successful completion of the `DataSvc` layer invocation for a `Create`, `Update` or `Delete` operation.",
      "description": "Defaults to `true`. Used to enable the sending of messages to the likes of EventGrid, Service Broker, SignalR, etc. This can be overidden within the `Entity`(s)."
    },
    "eventSubjectRoot": {
      "type": "string",
      "title": "The root for the event name by prepending to all event subject names.",
      "description": "Used to enable the sending of messages to the likes of EventGrid, Service Broker, SignalR, etc. This can be overidden within the `Entity`(s)."
    },
    "eventActionFormat": {
      "type": "string",
      "title": "The formatting for the Action when an Event is published.",
      "description": "Defaults to `None` (no formatting required)`.",
      "enum": [
        "None",
        "UpperCase",
        "PastTense",
        "PastTenseUpperCase"
      ]
    },
    "grpc": {
      "type": "boolean",
      "title": "Indicates whether gRPC support (more specifically service-side) is required.",
      "description": "gRPC support is an explicit opt-in model. Must be set to `true` for any of the subordinate gRPC capabilities to be code-generated. Will require each `Entity`, and corresponding `Property` and `Operation` to be opted-in specifically."
    },
    "entities": {
      "type": "array",
      "title": "The corresponding `Entity` collection.",
      "items": [
        {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "The unique entity name."
            },
            "text": {
              "type": "string",
              "title": "The overriding text for use in comments.",
              "description": "Overrides the Name (as sentence text) for the summary comments. It will be formatted as: `Represents the {Text} entity.`. To create a `<see cref=\"XXX\"/>` within use moustache shorthand (e.g. {{Xxx}})."
            },
            "fileName": {
              "type": "string",
              "title": "The overriding file name.",
              "description": "Overrides the Name as the code-generated file name."
            },
            "entityScope": {
              "type": "string",
              "title": "The entity scope option.",
              "description": "Determines whether the entity is considered `Common` (default) or should be scoped to the `Business` namespace/assembly only (i.e. not externally visible).",
              "enum": [
                "Common",
                "Business"
              ]
            },
            "privateName": {
              "type": "string",
              "title": "The overriding private name.",
              "description": "Overrides the `Name` to be used for private fields. By default reformatted from `Name`; e.g. `FirstName` as `_firstName`."
            },
            "argumentName": {
              "type": "string",
              "title": "The overriding argument name.",
              "description": "Overrides the `Name` to be used for argument parameters. By default reformatted from `Name`; e.g. `FirstName` as `firstName`."
            },
            "constType": {
              "type": "string",
              "title": "The Const .NET Type option.",
              "description": "The .NET Type to be used for the `const` values. Defaults to `string`.",
              "enum": [
                "int",
                "Guid",
                "string"
              ]
            },
            "isInitialOverride": {
              "type": "boolean",
              "title": "Indicates whether to override the `ICleanup.IsInitial` property.",
              "description": "Set to either `true` or `false` to override as specified; otherwise, `null` to check each property. Defaults to `null`."
            },
            "refDataType": {
              "type": "string",
              "title": "The Reference Data identifier Type option.",
              "description": "Required to identify an entity as being Reference Data. Specifies the underlying .NET Type used for the Reference Data identifier.",
              "enum": [
                "int",
                "Guid"
              ]
            },
            "refDataText": {
              "type": "boolean",
              "title": "Indicates whether a corresponding `text` property is added when generating a Reference Data property overridding the `CodeGeneration.RefDataText` selection.",
              "description": "This is used where serializing within the `Controller` and the `ExecutionContext.IsRefDataTextSerializationEnabled` is set to true (automatically performed where url contains `$text=true`)."
            },
            "refDataSortOrder": {
              "type": "string",
              "title": "The Reference Data sort order option.",
              "description": "Specifies the default sort order for the underlying Reference Data collection. Defaults to `SortOrder`.",
              "enum": [
                "SortOrder",
                "Id",
                "Code",
                "Text"
              ]
            },
            "inherits": {
              "type": "string",
              "title": "The base class that the entity inherits from.",
              "description": "Defaults to `EntityBase` for a standard entity. For Reference Data it will default to `ReferenceDataBaseInt` or `ReferenceDataBaseGuid` depending on the corresponding `RefDataType` value. See `OmitEntityBase` if the desired outcome is to not inherit from any of the aforementioned base classes."
            },
            "implements": {
              "type": "string",
              "title": "The list of comma separated interfaces that are to be declared for the entity class."
            },
            "autoInferImplements": {
              "type": "boolean",
              "title": "Indicates whether to automatically infer the interface implements for the entity from the properties declared.",
              "description": "Will attempt to infer the following: `IGuidIdentifier`, `IIntIdentifier`, `IStringIdentifier`, `IETag` and `IChangeLog`. Defaults to `true`."
            },
            "abstract": {
              "type": "boolean",
              "title": "Indicates whether the class should be defined as abstract."
            },
            "genericWithT": {
              "type": "boolean",
              "title": "Indicates whether the class should be defined as a generic with a single parameter `T`."
            },
            "namespace": {
              "type": "string",
              "title": "The entity namespace to be appended.",
              "description": "Appended to the end of the standard structure as follows: `{Company}.{AppName}.Common.Entities.{Namespace}`."
            },
            "omitEntityBase": {
              "type": "boolean",
              "title": "Indicates that the entity should not inherit from `EntityBase`.",
              "description": "As such any of the `EntityBase` related capabilites are not supported (are omitted from generation). The intention for this is more for the generation of simple internal entities."
            },
            "jsonSerializer": {
              "type": "string",
              "title": "The JSON Serializer to use for JSON property attribution.",
              "description": "Defaults to the `CodeGeneration.JsonSerializer` configuration property where specified; otherwise, `Newtonsoft`.",
              "enum": [
                "None",
                "Newtonsoft"
              ]
            },
            "collection": {
              "type": "boolean",
              "title": "Indicates whether a corresponding entity collection class should be created."
            },
            "collectionResult": {
              "type": "boolean",
              "title": "Indicates whether a corresponding entity collection result class should be created",
              "description": "Enables the likes of additional paging state to be stored with the underlying collection."
            },
            "collectionKeyed": {
              "type": "boolean",
              "title": "Indicates whether the entity collection is keyed using the properties defined as forming part of the unique key."
            },
            "collectionInherits": {
              "type": "string",
              "title": "The base class that a `Collection` inherits from.",
              "description": "Defaults to `EntityBaseCollection` or `EntityBaseKeyedCollection` depending on `CollectionKeyed`. For Reference Data it will default to `ReferenceDataCollectionBase`."
            },
            "collectionResultInherits": {
              "type": "string",
              "title": "The base class that a `CollectionResult` inherits from.",
              "description": "Defaults to `EntityCollectionResult`."
            },
            "validator": {
              "type": "string",
              "title": "The name of the .NET `Type` that will perform the validation.",
              "description": "Only used for `Create` and `Update` operation types (`Operation.Type`) where not specified explicitly."
            },
            "get": {
              "type": "boolean",
              "title": "Indicates that a `Get` operation will be automatically generated where not otherwise explicitly specified."
            },
            "getAll": {
              "type": "boolean",
              "title": "Indicates that a `GetAll` operation will be automatically generated where not otherwise explicitly specified."
            },
            "create": {
              "type": "boolean",
              "title": "Indicates that a `Create` operation will be automatically generated where not otherwise explicitly specified."
            },
            "update": {
              "type": "boolean",
              "title": "Indicates that a `Update` operation will be automatically generated where not otherwise explicitly specified."
            },
            "patch": {
              "type": "boolean",
              "title": "Indicates that a `Patch` operation will be automatically generated where not otherwise explicitly specified."
            },
            "delete": {
              "type": "boolean",
              "title": "Indicates that a `Delete` operation will be automatically generated where not otherwise explicitly specified."
            },
            "autoImplement": {
              "type": "string",
              "title": "The data source auto-implementation option.",
              "description": "Defaults to `None`. Indicates that the implementation for the underlying `Operations` will be auto-implemented using the selected data source (unless explicity overridden). When selected some of the related attributes will also be required (as documented). Additionally, the `AutoImplement` indicator must be selected for each underlying `Operation` that is to be auto-implemented.",
              "enum": [
                "Database",
                "EntityFramework",
                "Cosmos",
                "OData",
                "None"
              ]
            },
            "mapperAddStandardProperties": {
              "type": "boolean",
              "title": "Indicates that the `AddStandardProperties` method call is to be included for the generated (corresponding) `Mapper`.",
              "description": "Defaults to `true`."
            },
            "dataConstructor": {
              "type": "string",
              "title": "The access modifier for the generated `Data` constructor.",
              "description": "Defaults to `Public`.",
              "enum": [
                "Public",
                "Private",
                "Protected"
              ]
            },
            "dataExtensions": {
              "type": "boolean",
              "title": "Indicates whether the `Data` extensions logic should be generated."
            },
            "databaseName": {
              "type": "string",
              "title": "The .NET database interface name (used where `AutoImplement` is `Database`).",
              "description": "Defaults to the `CodeGeneration.DatabaseName` configuration property (its default value is `IDatabase`)."
            },
            "databaseSchema": {
              "type": "string",
              "title": "The database schema name (used where `AutoImplement` is `Database`).",
              "description": "Defaults to `dbo`."
            },
            "databaseMapperInheritsFrom": {
              "type": "string",
              "title": "The name of the `Mapper` that the generated Database `Mapper` inherits from."
            },
            "databaseCustomerMapper": {
              "type": "boolean",
              "title": "Indicates that a custom Database `Mapper` will be used; i.e. not generated.",
              "description": "Otherwise, by default, a `Mapper` will be generated."
            },
            "entityFrameworkName": {
              "type": "string",
              "title": "The .NET Entity Framework interface name used where `AutoImplement` is `EntityFramework`.",
              "description": "Defaults to the `CodeGeneration.EntityFrameworkName` configuration property (its default value is `IEfDb`)."
            },
            "entityFrameworkEntity": {
              "type": "string",
              "title": "The corresponding Entity Framework entity model name (required where `AutoImplement` is `EntityFramework`)."
            },
            "dataEntityFrameworkMapperInheritsFrom": {
              "type": "string",
              "title": "The name of the `Mapper  that the generated Entity Framework `Mapper` inherits from.",
              "description": "Defaults to `Model.{Name}`; i.e. an entity with the same name in the `Model` namespace."
            },
            "dataEntityFrameworkCustomMapper": {
              "type": "boolean",
              "title": "Indicates that a custom Entity Framework `Mapper` will be used; i.e. not generated.",
              "description": "Otherwise, by default, a `Mapper` will be generated."
            },
            "cosmosName": {
              "type": "string",
              "title": "The .NET Cosmos interface name used where `AutoImplement` is `Cosmos`.",
              "description": "Defaults to the `CodeGeneration.CosmosName` configuration property (its default value is `ICosmosDb`)."
            },
            "cosmosEntity": {
              "type": "string",
              "title": "The corresponding Cosmos entity model name (required where `AutoImplement` is `Cosmos`)."
            },
            "cosmosContainerId": {
              "type": "string",
              "title": "The Cosmos `ContainerId` required where `AutoImplement` is `Cosmos`."
            },
            "cosmosPartitionKey": {
              "type": "string",
              "title": "The C# code to be used for setting the optional Cosmos `PartitionKey` where `AutoImplement` is `Cosmos`.",
              "description": "Defaults to `PartitionKey.None`."
            },
            "cosmosValueContainer": {
              "type": "boolean",
              "title": "Indicates whether the `CosmosDbValueContainer` is to be used; otherwise, `CosmosDbContainer`."
            },
            "cosmosMapperInheritsFrom": {
              "type": "string",
              "title": "The name of the `Mapper` that the generated Cosmos `Mapper` inherits from."
            },
            "cosmosCustomMapper": {
              "type": "boolean",
              "title": "Indicates that a custom Cosmos `Mapper` will be used; i.e. not generated.",
              "description": "Otherwise, by default, a `Mapper` will be generated."
            },
            "odataName": {
              "type": "string",
              "title": "The .NET OData interface name used where `AutoImplement` is `OData`.",
              "description": "Defaults to the `CodeGeneration.ODataName` configuration property (its default value is `IOData`)."
            },
            "odataEntity": {
              "type": "string",
              "title": "The corresponding OData entity model name (required where `AutoImplement` is `OData`)."
            },
            "odataCollectionName": {
              "type": "string",
              "title": "The name of the underlying OData collection where `AutoImplement` is `OData`.",
              "description": "The underlying `Simple.OData.Client` will attempt to infer."
            },
            "odataMapperInheritsFrom": {
              "type": "string",
              "title": "The name of the `Mapper` that the generated OData `Mapper` inherits from."
            },
            "odataCustomMapper": {
              "type": "boolean",
              "title": "Indicates that a custom OData `Mapper` will be used; i.e. not generated.",
              "description": "Otherwise, by default, a `Mapper` will be generated."
            },
            "dataSvcCaching": {
              "type": "boolean",
              "title": "Indicates whether request-based `IRequestCache` caching is to be performed at the `DataSvc` layer to improve performance (i.e. reduce chattiness).",
              "description": "Defaults to `true`."
            },
            "eventPublish": {
              "type": "boolean",
              "title": "Indicates whether to add logic to publish an event on the successful completion of the `DataSvc` layer invocation for a `Create`, `Update` or `Delete` operation.",
              "description": "Defaults to the `CodeGeneration.EventPublish` configuration property (inherits) where not specified. Used to enable the sending of messages to the likes of EventGrid, Service Broker, SignalR, etc."
            },
            "dataSvcConstructor": {
              "type": "string",
              "title": "The access modifier for the generated `DataSvc` constructor.",
              "description": "Defaults to `Public`.",
              "enum": [
                "Public",
                "Private",
                "Protected"
              ]
            },
            "dataSvcExtensions": {
              "type": "boolean",
              "title": "Indicates whether the `DataSvc` extensions logic should be generated."
            },
            "managerConstructor": {
              "type": "string",
              "title": "The access modifier for the generated `Manager` constructor.",
              "description": "Defaults to `Public`.",
              "enum": [
                "Public",
                "Private",
                "Protected"
              ]
            },
            "managerExtensions": {
              "type": "boolean",
              "title": "Indicates whether the `Manager` extensions logic should be generated."
            },
            "webApiRoutePrefix": {
              "type": "string",
              "title": "The `RoutePrefixAtttribute` for the corresponding entity Web API controller.",
              "description": "This is the base (prefix) `URI` for the entity and can be further extended when defining the underlying `Operation`(s)."
            },
            "webApiAuthorize": {
              "type": "boolean",
              "title": "Indicates whether the Web API controller should use `Authorize` (`true`); otherwise, `AllowAnonynous` (`false`).",
              "description": "Defaults to the `CodeGeneration.WebApiAuthorize` configuration property (inherits) where not specified; can be overridden at the `Operation` level also."
            },
            "webApiConstructor": {
              "type": "string",
              "title": "The access modifier for the generated Web API `Controller` constructor.",
              "description": "Defaults to `Public`.",
              "enum": [
                "Public",
                "Private",
                "Protected"
              ]
            },
            "dataModel": {
              "type": "boolean",
              "title": "Indicates whether a data `model` version of the entity should also be generated (output to `.\\Business\\Data\\Model`).",
              "description": "The model will be generated with `OmitEntityBase = true`. Any reference data properties will be defined using their `RefDataType` intrinsic `Type` versus their corresponding (actual) reference data `Type`."
            },
            "excludeEntity": {
              "type": "boolean",
              "title": "Indicates whether to exclude the creation of the `Entity` class (`Xxx.cs`)."
            },
            "excludeAll": {
              "type": "boolean",
              "title": "Indicates whether to exclude the generation of all< `Operation` related artefacts; excluding the `Entity` class.",
              "description": "Is a shorthand means for setting all of the other `Exclude*` properties (with the exception of `ExcludeEntity`) to `true`."
            },
            "excludeIData": {
              "type": "boolean",
              "title": "Indicates whether to exclude the creation of the `Data` interface (`IXxxData.cs`)."
            },
            "excludeData": {
              "type": "boolean",
              "title": "Indicates whether to exclude the creation of the `Data` class (`XxxData.cs`)."
            },
            "excludeIDataSvc": {
              "type": "boolean",
              "title": "Indicates whether to exclude the creation of the `DataSvc` interface (`IXxxDataSvc.cs`)."
            },
            "excludeDataSvc": {
              "type": "boolean",
              "title": "Indicates whether to exclude the creation of the `DataSvc` class (`XxxDataSvc.cs`)."
            },
            "excludeIManager": {
              "type": "boolean",
              "title": "Indicates whether to exclude the creation of the `Manager` interface (`IXxxManager.cs`)."
            },
            "excludeManager": {
              "type": "boolean",
              "title": "Indicates whether to exclude the creation of the `Manager` class (`XxxManager.cs`)."
            },
            "excludeWebApi": {
              "type": "boolean",
              "title": "Indicates whether to exclude the creation of the WebAPI `Controller` class (`XxxController.cs`)."
            },
            "excludeWebApiAgent": {
              "type": "boolean",
              "title": "Indicates whether to exclude the creation of the WebAPI consuming `Agent` class (`XxxAgent.cs`)."
            },
            "excludeGrpcAgent": {
              "type": "boolean",
              "title": "Indicates whether to exclude the creation of the gRPC consuming `Agent` class (`XxxAgent.cs`)."
            },
            "authRole": {
              "type": "string",
              "title": "The role (permission) used by the `ExecutionContext.IsInRole(role)` for each `Operation`.",
              "description": "Used where not overridden specifically for an `Operation`; i.e. acts as the default."
            },
            "grpc": {
              "type": "boolean",
              "title": "Indicates whether gRPC support (more specifically service-side) is required for the Entity.",
              "description": "gRPC support is an explicit opt-in model (see `CodeGeneration.Grpc` configuration); therefore, each corresponding `Property` and `Operation` will also need to be opted-in specifically."
            },
            "properties": {
              "type": "array",
              "title": "The corresponding `Property` collection.",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "title": "The unique property name."
                    },
                    "text": {
                      "type": "string",
                      "title": "The overriding text for use in comments.",
                      "description": "By default the `Text` will be the `Name` reformatted as sentence casing. Depending on whether the `Type` is `bool`, will appear in one of the two generated sentences. Where not `bool` it will be: Gets or sets a value indicating whether {text}.'. Otherwise, it will be: Gets or sets the {text}.'. To create a `<see cref=\"XXX\"/>` within use moustache shorthand (e.g. {{Xxx}})."
                    },
                    "inherited": {
                      "type": "boolean",
                      "title": "Indicates whether the property is inherited and therefore should not be output within the generated Entity class."
                    },
                    "privateName": {
                      "type": "string",
                      "title": "The overriding private name.",
                      "description": "Overrides the `Name` to be used for private fields. By default reformatted from `Name`; e.g. `FirstName` as `_firstName`."
                    },
                    "argumentName": {
                      "type": "string",
                      "title": "The overriding argument name.",
                      "description": "Overrides the `Name` to be used for argument parameters. By default reformatted from `Name`; e.g. `FirstName` as `firstName`."
                    },
                    "type": {
                      "type": "string",
                      "title": "The .NET `Type`.",
                      "description": "Defaults to `string`. To reference a Reference Data `Type` always prefix with `RefDataNamespace` (e.g. `RefDataNamespace.Gender`). This will ensure that the appropriate Reference Data using statement is used. Shortcut: Where the `Type` starts with (prefix) `RefDataNamespace.` and the correspondong `RefDataType` attribute is not specified it will automatically default the `RefDataType` to `string.`"
                    },
                    "nullable": {
                      "type": "boolean",
                      "title": "Indicates whether the .NET `Type should be declared as nullable; e.g. `string?`."
                    },
                    "uniqueKey": {
                      "type": "boolean",
                      "title": "Indicates whether the property is considered part of the unique (primary) key.",
                      "description": "This is also used to simplify the parameter specification for an Entity Operation by inferrence."
                    },
                    "isEntity": {
                      "type": "boolean",
                      "title": "Indicates that the property `Type` is another generated entity / collection and therefore specific capabilities can be assumed (e.g. `CopyFrom` and `Clone`)."
                    },
                    "immutable": {
                      "type": "boolean",
                      "title": "Indicates that the value is immutable and therefore cannot be changed once set."
                    },
                    "dateTimeTransform": {
                      "type": "string",
                      "title": "The `DateTime` transformation to be performed on `Set` and `CleanUp`.",
                      "description": "Defaults to `UseDefault`. This is only applied where the `Type` is `DateTime`.",
                      "enum": [
                        "UseDefault",
                        "None",
                        "DateOnly",
                        "DateTimeLocal",
                        "DateTimeUtc",
                        "DateTimeUnspecified"
                      ]
                    },
                    "stringTrim": {
                      "type": "string",
                      "title": "The `string` trimming of white space characters to be performed on `Set` and `CleanUp`.",
                      "description": "Defaults to `UseDefault`. This is only applied where the `Type` is `string`.",
                      "enum": [
                        "UseDefault",
                        "None",
                        "Start",
                        "End",
                        "Both"
                      ]
                    },
                    "stringTransform": {
                      "type": "string",
                      "title": "The `string` transformation to be performed on `Set` and `CleanUp`.",
                      "description": "Defaults to `UseDefault`. This is only applied where the `Type` is `string`.",
                      "enum": [
                        "UseDefault",
                        "None",
                        "NullToEmpty",
                        "EmptyToNull"
                      ]
                    },
                    "autoCreate": {
                      "type": "boolean",
                      "title": "Indicates whether an instance of the `Type` is to be automatically created/instantiated when the property is first accessed (i.e. lazy instantiation)."
                    },
                    "default": {
                      "type": "string",
                      "title": "The C# code to default the value.",
                      "description": "Where the `Type` is `string` then the specified default value will need to be delimited. Any valid value assignment C# code can be used."
                    },
                    "secondaryPropertyChanged": {
                      "type": "string",
                      "title": "The names of the secondary property(s), comma delimited, that are to be notified on a property change."
                    },
                    "bubblePropertyChanges": {
                      "type": "boolean",
                      "title": "Indicates whether the value should bubble up property changes versus only recording within the sub-entity itself.",
                      "description": "Note that the `IsEntity` property is also required to enable."
                    },
                    "excludeCleanup": {
                      "type": "boolean",
                      "title": "Indicates that `CleanUp` is not to be performed for the property within the `Entity.CleanUp` method."
                    },
                    "refDataType": {
                      "type": "string",
                      "title": "The underlying Reference Data Type that is also used as the Reference Data serialization identifier (SID).",
                      "description": "Defaults to `string` where not specified and the corresponding `Type` starts with (prefix) `RefDataNamespace.`.",
                      "enum": [
                        "string",
                        "int",
                        "Guid"
                      ]
                    },
                    "refDataList": {
                      "type": "boolean",
                      "title": "Indicates that the Reference Data property is to be a serializable list (`ReferenceDataSidList`).",
                      "description": "This is required to enable a list of Reference Data values (as per `RefDataType`) to be passed as an argument for example."
                    },
                    "refDataText": {
                      "type": "boolean",
                      "title": "Indicates whether a corresponding `text` property is added when generating a Reference Data property overridding the `Entity.RefDataText` selection.",
                      "description": "This is used where serializing within the `Controller` and the `ExecutionContext.IsRefDataTextSerializationEnabled` is set to true (automatically performed where url contains `$text=true`)."
                    },
                    "refDataMapping": {
                      "type": "boolean",
                      "title": "Indicates whether the property should use the underlying Reference Data mapping capabilities.",
                      "description": "Mapped properties are a special Reference Data property type that ensure value uniqueness; this allows the likes of additional to/from mappings to occur between systems where applicable."
                    },
                    "jsonName": {
                      "type": "string",
                      "title": "The JSON property name.",
                      "description": "Defaults to `ArgumentName` where not specified (i.e. camelCase)."
                    },
                    "serializationIgnore": {
                      "type": "boolean",
                      "title": "Indicates whether the property is not to be serialized.",
                      "description": "All properties are serialized by default."
                    },
                    "serializationEmitDefault": {
                      "type": "boolean",
                      "title": "Indicates whether to emit the default value when serializing."
                    },
                    "dataModelJsonName": {
                      "type": "string",
                      "title": "The override JSON property name where outputting as a data model.",
                      "description": "Defaults to `JsonName` where not specified."
                    },
                    "dataName": {
                      "type": "string",
                      "title": "The data name where Entity.AutoImplement is selected.",
                      "description": "Defaults to the property `Name`. Represents the column name for a `Database`, or the correspinding property name for the other options."
                    },
                    "dataConverter": {
                      "type": "string",
                      "title": "The data `Converter` class name where `Entity.AutoImplement` is selected.",
                      "description": "A `Converter` is used to convert a data source value to/from a .NET `Type` where no standard data conversion can be applied."
                    },
                    "dataConverterIsGeneric": {
                      "type": "boolean",
                      "title": "Indicates whether the data `Converter` is a generic class and will automatically use the corresponding property `Type` as the generic `T`."
                    },
                    "dataMapperIgnore": {
                      "type": "boolean",
                      "title": "Indicates whether the property should be ignored (excluded) from the `Data`-layer / data `Mapper` generated output.",
                      "description": "All properties are included by default."
                    },
                    "dataAutoGenerated": {
                      "type": "boolean",
                      "title": "Indicates whether the `UniqueKey` property value is automatically generated by the data source on `Create`."
                    },
                    "dataOperationTypes": {
                      "type": "string",
                      "title": "The operations types (`ExecutionContext.OperationType`) selection to enable inclusion and exclusion of property mapping.",
                      "description": "Defaults to `Any`.",
                      "enum": [
                        "Any",
                        "AnyExceptCreate",
                        "AnyExceptUpdate",
                        "AnyExceptGet",
                        "Get",
                        "Create",
                        "Update",
                        "Delete"
                      ]
                    },
                    "databaseMapper": {
                      "type": "string",
                      "title": "The database property `Mapper` class name where `Entity.AutoImplement` is selected.",
                      "description": "A `Mapper` is used to map a data source value to/from a .NET complex `Type` (i.e. class with one or more properties)."
                    },
                    "databaseIgnore": {
                      "type": "boolean",
                      "title": "Indicates whether the property should be ignored (excluded) from the database `Mapper` generated output."
                    },
                    "dataEntityFrameworkMapper": {
                      "type": "string",
                      "title": "The Entity Framework property `Mapper` class name where `Entity.AutoImplement` is selected.",
                      "description": "A `Mapper` is used to map a data source value to/from a .NET complex `Type` (i.e. class with one or more properties)."
                    },
                    "dataEntityFrameworkIgnore": {
                      "type": "boolean",
                      "title": "Indicates whether the property should be ignored (excluded) from the Entity Framework `Mapper` generated output."
                    },
                    "cosmosMapper": {
                      "type": "string",
                      "title": "The Cosmos property `Mapper` class name where `Entity.AutoImplement` is selected.",
                      "description": "A `Mapper` is used to map a data source value to/from a .NET complex `Type` (i.e. class with one or more properties)."
                    },
                    "cosmosIgnore": {
                      "type": "boolean",
                      "title": "Indicates whether the property should be ignored (excluded) from the Cosmos `Mapper` generated output."
                    },
                    "odataMapper": {
                      "type": "string",
                      "title": "The OData property `Mapper` class name where `Entity.AutoImplement` is selected.",
                      "description": "A `Mapper` is used to map a data source value to/from a .NET complex `Type` (i.e. class with one or more properties)."
                    },
                    "odataIgnore": {
                      "type": "boolean",
                      "title": "Indicates whether the property should be ignored (excluded) from the OData `Mapper` generated output."
                    },
                    "displayName": {
                      "type": "string",
                      "title": "The display name used in the likes of error messages for the property.",
                      "description": "Defaults to the `Name` as sentence case."
                    },
                    "annotation1": {
                      "type": "string",
                      "title": "The property annotation (e.g. attribute) declaration code."
                    },
                    "annotation2": {
                      "type": "string",
                      "title": "The property annotation (e.g. attribute) declaration code."
                    },
                    "annotation3": {
                      "type": "string",
                      "title": "The property annotation (e.g. attribute) declaration code."
                    },
                    "webApiQueryStringConverter": {
                      "type": "string",
                      "title": "the `IPropertyMapperConverter` to perform `Type` to `string` conversion for writing to and parsing from the query string."
                    },
                    "grpcFieldNo": {
                      "type": "integer",
                      "title": "The unique (immutable) field number required to enable gRPC support."
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              ]
            },
            "operations": {
              "type": "array",
              "title": "The corresponding `Operation` collection.",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "title": "The unique operation name."
                    },
                    "type": {
                      "type": "string",
                      "title": "The operation type.",
                      "enum": [
                        "Get",
                        "GetColl",
                        "Create",
                        "Update",
                        "Patch",
                        "Delete",
                        "Custom"
                      ]
                    },
                    "text": {
                      "type": "string",
                      "title": "The text for use in comments.",
                      "description": "The `Text` will be defaulted for all the `Operation.Type` options with the exception of `Custom`. To create a `<see cref=\"XXX\"/>` within use moustache shorthand (e.g. {{Xxx}})."
                    },
                    "validator": {
                      "type": "string",
                      "title": "The name of the .NET Type that will perform the validation.",
                      "description": "Defaults to the `Entity.Validator` where not specified explicitly. Only used for `Operation.Type` options `Create` or `Update`."
                    },
                    "uniqueKey": {
                      "type": "boolean",
                      "title": "Indicates that the properties marked as a unique key (`Property.UniqueKey`) are to be used as the parameters.",
                      "description": "This simplifies the specification of these properties versus having to declare each specifically."
                    },
                    "pagingArgs": {
                      "type": "boolean",
                      "title": "Indicates that a `PagingArgs` argument is to be added to the operation to enable (standardized) paging related logic."
                    },
                    "valueType": {
                      "type": "string",
                      "title": "The .NET value parameter `Type` for the operation.",
                      "description": "Defaults to the parent `Entity.Name` where the `Operation.Type` options are `Create` or `Update`."
                    },
                    "returnType": {
                      "type": "string",
                      "title": "The .NET return `Type` for the operation.",
                      "description": "Defaults to the parent `Entity.Name` where the `Operation.Type` options are `Get`, `GetColl`, `Create` or `Update`; otherwise, defaults to `void`."
                    },
                    "returnText": {
                      "type": "string",
                      "title": "The text for use in comments to describe the `ReturnType`.",
                      "description": "A default will be created where not specified. To create a `<see cref=\"XXX\"/>` within use moustache shorthand (e.g. {{Xxx}})."
                    },
                    "privateName": {
                      "type": "string",
                      "title": "The overriding private name.",
                      "description": "Overrides the `Name` to be used for private usage. By default reformatted from `Name`; e.g. `GetByArgs` as `_getByArgs`."
                    },
                    "autoImplement": {
                      "type": "string",
                      "title": "The operation override for the `Entity.AutoImplement`.",
                      "description": "Defaults to `Entity.AutoImplement`. The corresponding `Entity.AutoImplement` must be defined for this to be enacted. Auto-implementation is applicable for all `Operation.Type` options with the exception of `Custom`.",
                      "enum": [
                        "Database",
                        "EntityFramework",
                        "Cosmos",
                        "OData",
                        "None"
                      ]
                    },
                    "dataEntityMapper": {
                      "type": "string",
                      "title": "The override for the data entity `Mapper`.",
                      "description": "Used where the default generated `Mapper` is not applicable."
                    },
                    "databaseStoredProc": {
                      "type": "string",
                      "title": "The database stored procedure name used where `Operation.AutoImplement` is `Database`.",
                      "description": "Defaults to `sp` + `Entity.Name` + `Operation.Name`; e.g. `spPersonCreate`."
                    },
                    "cosmosContainerId": {
                      "type": "string",
                      "title": "The Cosmos `ContainerId` override used where `Operation.AutoImplement` is `Cosmos`.",
                      "description": "Overrides the `Entity.CosmosContainerId`."
                    },
                    "cosmosPartitionKey": {
                      "type": "string",
                      "title": "The C# code override to be used for setting the optional Cosmos `PartitionKey` used where `Operation.AutoImplement` is `Cosmos`.",
                      "description": "Overrides the `Entity.CosmosPartitionKey`."
                    },
                    "odataCollectionName": {
                      "type": "string",
                      "title": "The override name of the underlying OData collection where `Operation.AutoImplement` is `OData`.",
                      "description": "Overriddes the `Entity.ODataCollectionName`; otherwise, the underlying `Simple.OData.Client` will attempt to infer."
                    },
                    "managerCustom": {
                      "type": "boolean",
                      "title": "Indicates whether the `Manager` logic is a custom implementation; i.e. no auto-`DataSvc` invocation logic is to be generated."
                    },
                    "managerTransaction": {
                      "type": "boolean",
                      "title": "Indicates whether a `System.TransactionScope` should be created and orchestrated at the `Manager`-layer."
                    },
                    "dataSvcCustom": {
                      "type": "boolean",
                      "title": "Indicates whether the `DataSvc` logic is a custom implementation; i.e. no auto-`DataSvc` invocation logic is to be generated."
                    },
                    "dataSvcTransaction": {
                      "type": "boolean",
                      "title": "Indicates whether a `System.TransactionScope` should be created and orchestrated at the `DataSvc`-layer."
                    },
                    "eventPublish": {
                      "type": "boolean",
                      "title": "Indicates whether to add logic to publish an event on the successful completion of the `DataSvc` layer invocation for a `Create`, `Update` or `Delete` operation.",
                      "description": "Defaults to the `CodeGeneration.EventPublish` or `Entity.EventPublish` configuration property (inherits) where not specified. Used to enable the sending of messages to the likes of EventGrid, Service Broker, SignalR, etc."
                    },
                    "eventSubject": {
                      "type": "string",
                      "title": "The event subject template and corresponding event action pair (separated by a colon).",
                      "description": "The event subject template defaults to `{AppName}.{Entity.Name}` plus each of the unique key placeholders comma separated; e.g. Domain.Entity.{id1},{id2}. The event action defaults to `WebApiOperationType` or `Operation.Type` where not specified. Multiple events can be raised by specifying more than one subject/action pair separated by a semicolon. E.g. `Demo.Person.{id}:Create;Demo.Other.{id}:Update`."
                    },
                    "webApiRoute": {
                      "type": "string",
                      "title": "The Web API `RouteAtttribute` to be appended to the `Entity.WebApiRoutePrefix`."
                    },
                    "webApiMethod": {
                      "type": "string",
                      "title": "The HTTP Method for the operation.",
                      "description": "The value defaults as follows: `HttpGet` for `Operation.Type` value `Get` or `GetColl`, `HttpPost` for `Operation.Type` value `Create` or `Custom`, `HttpPut` for `Operation.Type` value `Update`, and `HttpDelete` for `Operation.Type` value `Delete`. An `Operation.Type` value `Patch` can not be specified and will always default to `HttpPatch`.",
                      "enum": [
                        "HttpGet",
                        "HttpPost",
                        "HttpPut",
                        "HttpDelete"
                      ]
                    },
                    "webApiStatus": {
                      "type": "string",
                      "title": "The primary HTTP Status Code that will be returned for the operation where there is a non-`null` return value.",
                      "description": "The value defaults as follows: `OK` for `Operation.Type` value `Get`, `GetColl`, `Update`, `Delete` or `Custom`, `Created` for `Operation.Type` value `Create`.",
                      "enum": [
                        "OK",
                        "Accepted",
                        "Created",
                        "NoContent",
                        "NotFound"
                      ]
                    },
                    "webApiAlternateStatus": {
                      "type": "string",
                      "title": "The primary HTTP Status Code that will be returned for the operation where there is a `null` return value.",
                      "description": "The value defaults as follows: `NotFound` for `Operation.Type` value `Get`, `NoContent` for `Operation.Type` value `GetColl`, `Create`, `Update` or `Patch`; otherwise, `ThrowException` which will result in an `InvalidOperationException`.",
                      "enum": [
                        "OK",
                        "Accepted",
                        "Created",
                        "NoContent",
                        "NotFound",
                        "ThrowException"
                      ]
                    },
                    "webApiOperationType": {
                      "type": "string",
                      "title": "The `ExecutionContext.OperationType` (CRUD denotation) where the `Operation.Type` is `Custom` (i.e. can not be inferred).",
                      "description": "The default will be inferred where possible; otherwise, set to `Unspecified`.",
                      "enum": [
                        "Create",
                        "Read",
                        "Update",
                        "Delete",
                        "Unspecified"
                      ]
                    },
                    "patchGetOperation": {
                      "type": "string",
                      "title": "The corresponding `Get` method name (in the `XxxManager`) where the `Operation.Type` is `Patch`.",
                      "description": "Defaults to `Get`. Specify either just the method name (e.g. `OperationName`) or, class and method name (e.g. `XxxManager.OperationName`) to be invoked where in a different `YyyManager.OperationName`."
                    },
                    "patchUpdateOperation": {
                      "type": "string",
                      "title": "The corresponding `Update` method name (in the `XxxManager`) where the `Operation.Type` is `Patch`.",
                      "description": "Defaults to `Update`. Specify either just the method name (e.g. `OperationName`) or, class and method name (e.g. `XxxManager.OperationName`) to be invoked where in a different `YyyManager.OperationName`."
                    },
                    "authPermission": {
                      "type": "string",
                      "title": "The permission used by the `ExecutionContext.IsAuthorized(AuthPermission)` to determine whether the user is authorized."
                    },
                    "authRole": {
                      "type": "string",
                      "title": "The permission used by the `ExecutionContext.IsInRole(AuthRole)` to determine whether the user is authorized."
                    },
                    "excludeAll": {
                      "type": "boolean",
                      "title": "Indicates whether to exclude the generation of all `Operation` related output.",
                      "description": "Is a shorthand means for setting all of the other `Exclude*` properties to `true`."
                    },
                    "excludeIData": {
                      "type": "boolean",
                      "title": "Indicates whether to exclude the creation of the operation within the `Data` interface (`IXxxData.cs`)."
                    },
                    "excludeData": {
                      "type": "boolean",
                      "title": "Indicates whether to exclude the creation of the operation within the `Data` class (`XxxData.cs`)."
                    },
                    "excludeIDataSvc": {
                      "type": "boolean",
                      "title": "Indicates whether to exclude the creation of the operation within the `DataSvc` interface (`IXxxDataSvc.cs`)."
                    },
                    "excludeDataSvc": {
                      "type": "boolean",
                      "title": "Indicates whether to exclude the creation of the operation within the `DataSvc` class (`XxxDataSvc.cs`)."
                    },
                    "excludeIManager": {
                      "type": "boolean",
                      "title": "Indicates whether to exclude the creation of the operation within the `Manager` interface (`IXxxManager.cs`)."
                    },
                    "excludeManager": {
                      "type": "boolean",
                      "title": "Indicates whether to exclude the creation of the operation within the `Manager` class (`XxxManager.cs`)."
                    },
                    "excludeWebApi": {
                      "type": "boolean",
                      "title": "Indicates whether to exclude the creation of the operation within the WebAPI `Controller` class (`XxxController.cs`)."
                    },
                    "excludeWebApiAgent": {
                      "type": "boolean",
                      "title": "Indicates whether to exclude the creation of the operation within the WebAPI consuming `Agent` class (`XxxAgent.cs`)."
                    },
                    "excludeGrpcAgent": {
                      "type": "boolean",
                      "title": "Indicates whether to exclude the creation of the operation within the gRPC consuming `Agent` class (`XxxAgent.cs`)."
                    },
                    "grpc": {
                      "type": "boolean",
                      "title": "Indicates whether gRPC support (more specifically service-side) is required for the Operation.",
                      "description": "gRPC support is an explicit opt-in model (see `CodeGeneration.Grpc` configuration); therefore, each corresponding `Entity`, `Property` and `Operation` will also need to be opted-in specifically."
                    },
                    "parameters": {
                      "type": "array",
                      "title": "The corresponding `Parameter` collection.",
                      "items": [
                        {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "title": "The unique parameter name."
                            },
                            "text": {
                              "type": "string",
                              "title": "The overriding text for use in comments.",
                              "description": "By default the `Text` will be the `Name` reformatted as sentence casing."
                            },
                            "privateName": {
                              "type": "string",
                              "title": "The overriding private name.",
                              "description": "Overrides the `Name` to be used for private fields. By default reformatted from `Name`; e.g. `FirstName` as `_firstName`."
                            },
                            "argumentName": {
                              "type": "string",
                              "title": "The overriding argument name.",
                              "description": "Overrides the `Name` to be used for argument parameters. By default reformatted from `Name`; e.g. `FirstName` as `firstName`."
                            },
                            "property": {
                              "type": "string",
                              "title": "The `Property.Name` within the parent `Entity` to copy (set) the configuration/characteristics from where not already defined."
                            },
                            "type": {
                              "type": "string",
                              "title": "The .NET `Type`.",
                              "description": "Defaults to `string`. To reference a Reference Data `Type` always prefix with `RefDataNamespace` (e.g. `RefDataNamespace.Gender`). This will ensure that the appropriate Reference Data using statement is used. Shortcut: Where the `Type` starts with (prefix) `RefDataNamespace.` and the correspondong `RefDataType` attribute is not specified it will automatically default the `RefDataType` to `string.`"
                            },
                            "nullable": {
                              "type": "boolean",
                              "title": "Indicates whether the .NET `Type should be declared as nullable; e.g. `string?`."
                            },
                            "default": {
                              "type": "string",
                              "title": "The C# code to default the value.",
                              "description": "Where the `Type` is `string` then the specified default value will need to be delimited. Any valid value assignment C# code can be used."
                            },
                            "refDataType": {
                              "type": "string",
                              "title": "The underlying Reference Data Type that is also used as the Reference Data serialization identifier (SID).",
                              "description": "Defaults to `string` where not specified and the corresponding `Type` starts with (prefix) `RefDataNamespace.`.",
                              "enum": [
                                "string",
                                "int",
                                "Guid"
                              ]
                            },
                            "refDataList": {
                              "type": "boolean",
                              "title": "Indicates that the Reference Data property is to be a serializable list (`ReferenceDataSidList`).",
                              "description": "This is required to enable a list of Reference Data values (as per `RefDataType`) to be passed as an argument for example."
                            },
                            "validator": {
                              "type": "string",
                              "title": "The name of the .NET `Type` that will perform the validation."
                            },
                            "validatorFluent": {
                              "type": "string",
                              "title": "The fluent-style method-chaining C# validator code to append to `IsMandatory` and `Validator` (where specified)."
                            },
                            "isMandatory": {
                              "type": "boolean",
                              "title": "Indicates whether a `ValidationException` should be thrown when the parameter value has its default value (null, zero, etc)."
                            },
                            "layerPassing": {
                              "type": "string",
                              "title": "The option that determines the layers in which the parameter is passed.",
                              "description": "Defaults to `All`. To further describe, `All` passes the parameter through all layeys, `ToManagerSet` only passes the parameter to the `Manager` layer and overrides the same named property within the corresponding `value` parameter, `ToManagerCollSet` only passes the parameter to the `Manager` layer and overrides the same named property within the corresponding `value` collection parameter. Where using the `UniqueKey` option to automatically set `Parameters`, and the `Operation.Type` is `Create` or `Update` it will default to `ToManagerSet`.",
                              "enum": [
                                "All",
                                "ToManagerSet",
                                "ToManagerCollSet"
                              ]
                            },
                            "dataConverter": {
                              "type": "string",
                              "title": "The data `Converter` class name where specific data conversion is required.",
                              "description": "A `Converter` is used to convert a data source value to/from a .NET `Type` where the standard data type conversion is not applicable."
                            },
                            "dataConverterIsGeneric": {
                              "type": "boolean",
                              "title": "Indicates whether the data `Converter` is a generic class and will automatically use the corresponding property `Type` as the generic `T`."
                            },
                            "webApiFrom": {
                              "type": "string",
                              "title": "The option for how the parameter will be delcared within the Web API Controller.",
                              "description": "Defaults to `FromQuery`; unless the parameter `Type` has also been defined as an `Entity` within the code-gen config file then it will default to `FromEntityProperties`. Specifies that the parameter will be declared with corresponding `FromQueryAttribute`, `FromBodyAttribute` or `FromRouteAttribute` for the Web API method. The `FromEntityProperties` will declare all properties of the `Entity` as query parameters.",
                              "enum": [
                                "FromQuery",
                                "FromBody",
                                "FromRoute",
                                "FromEntityProperties"
                              ]
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              ]
            },
            "consts": {
              "type": "array",
              "title": "The corresponding `Consts` collection.",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "title": "The unique constant name."
                    },
                    "value": {
                      "type": "string",
                      "title": "The C# code for the constant value.",
                      "description": "Where the `Type` is `string` then the specified default value will need to be delimited. Any valid value assignment C# code can be used."
                    },
                    "text": {
                      "type": "string",
                      "title": "The overriding text for use in comments.",
                      "description": "By default the `Text` will be the `Name` reformatted as sentence casing. It will be formatted as: Represents a {text} constant value.'. To create a `<see cref=\"XXX\"/>` within use moustache shorthand (e.g. {{Xxx}})."
                    }
                  },
                  "required": [
                    "name",
                    "value"
                  ]
                }
              ]
            }
          },
          "required": [
            "name"
          ]
        }
      ]
    }
  }
}
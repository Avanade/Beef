<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="unqualified">
  <xs:element name="CodeGeneration">
    <xs:annotation>
      <xs:documentation>'CodeGeneration' object (database-driven)</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element name="Table" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>'Table' object (entity-driven)</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:choice maxOccurs="unbounded">
              <xs:element name="StoredProcedure" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>'StoredProcedure' object (database-driven)</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="Parameter" minOccurs="0" maxOccurs="unbounded">
                      <xs:annotation>
                        <xs:documentation>'Parameter' object (database-driven)</xs:documentation>
                      </xs:annotation>
                      <xs:complexType>
                        <xs:attribute name="Name" use="required" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The parameter name (without the `@` prefix).</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="Column" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The corresponding column name; used to infer characteristics. Defaults to `Name`.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="SqlType" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The SQL type definition (overrides inherited Column definition) including length/precision/scale.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="IsNullable" use="optional" type="xs:boolean">
                          <xs:annotation>
                            <xs:documentation>Indicates whether the parameter is nullable. Note that when the parameter value is `NULL` it will not be included in the query.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="TreatColumnNullAs" use="optional" type="xs:boolean">
                          <xs:annotation>
                            <xs:documentation>Indicates whether the column value where NULL should be treated as the specified value; results in: `ISNULL([x].[col], value)`.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="IsCollection" use="optional" type="xs:boolean">
                          <xs:annotation>
                            <xs:documentation>Indicates whether the parameter is a collection (one or more values to be included `IN` the query).</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="Operator" use="optional">
                          <xs:annotation>
                            <xs:documentation>The where clause equality operator Defaults to `EQ`.</xs:documentation>
                          </xs:annotation>
                          <xs:simpleType>
                            <xs:restriction base="xs:string">
                              <xs:enumeration value="EQ" />
                              <xs:enumeration value="NE" />
                              <xs:enumeration value="LT" />
                              <xs:enumeration value="LE" />
                              <xs:enumeration value="GT" />
                              <xs:enumeration value="GE" />
                              <xs:enumeration value="LIKE" />
                            </xs:restriction>
                          </xs:simpleType>
                        </xs:attribute>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="Where" minOccurs="0" maxOccurs="unbounded">
                      <xs:annotation>
                        <xs:documentation>'Where' object (database-driven)</xs:documentation>
                      </xs:annotation>
                      <xs:complexType>
                        <xs:attribute name="Statement" use="required" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The where statement (TSQL).</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="OrderBy" minOccurs="0" maxOccurs="unbounded">
                      <xs:annotation>
                        <xs:documentation>'OrderBy' object (database-driven)</xs:documentation>
                      </xs:annotation>
                      <xs:complexType>
                        <xs:attribute name="Name" use="required" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The name of the `Column` to order by.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="Order" use="optional">
                          <xs:annotation>
                            <xs:documentation>The corresponding sort order. Defaults to `Asc`.</xs:documentation>
                          </xs:annotation>
                          <xs:simpleType>
                            <xs:restriction base="xs:string">
                              <xs:enumeration value="Asc" />
                              <xs:enumeration value="Desc" />
                            </xs:restriction>
                          </xs:simpleType>
                        </xs:attribute>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="Execute" minOccurs="0" maxOccurs="unbounded">
                      <xs:annotation>
                        <xs:documentation>'Execute' object (database-driven)</xs:documentation>
                      </xs:annotation>
                      <xs:complexType>
                        <xs:attribute name="Statement" use="required" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The additional TSQL statement.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="Location" use="optional">
                          <xs:annotation>
                            <xs:documentation>The location of the statement in relation to the underlying primary stored procedure statement. Defaults to `After`.</xs:documentation>
                          </xs:annotation>
                          <xs:simpleType>
                            <xs:restriction base="xs:string">
                              <xs:enumeration value="Before" />
                              <xs:enumeration value="After" />
                            </xs:restriction>
                          </xs:simpleType>
                        </xs:attribute>
                      </xs:complexType>
                    </xs:element>
                  </xs:choice>
                  <xs:attribute name="Name" use="required" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The name of the `StoredProcedure`; generally the verb/action, i.e. `Get`, `Update`, etc. See `StoredProcedureName` for the actual name used in the database.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Type" use="optional">
                    <xs:annotation>
                      <xs:documentation>The stored procedure operation type. Defaults to `GetAll`.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="Get" />
                        <xs:enumeration value="GetAll" />
                        <xs:enumeration value="Create" />
                        <xs:enumeration value="Update" />
                        <xs:enumeration value="Upsert" />
                        <xs:enumeration value="Delete" />
                        <xs:enumeration value="Merge" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                  <xs:attribute name="Paging" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether standardized paging support should be added. This only applies where the stored procedure operation `Type` is `GetColl`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="StoredProcedureName" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The `StoredProcedure` name in the database. Defaults to `sp` + `Table.Name` + `Name`; e.g. `spTableName` or `spPersonGet`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ReselectStatement" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The SQL statement to perform the reselect after a `Create`, `Update` or `Upsert` stored procedure operation `Type`. Defaults to `[{{Table.Schema}}].[sp{{Table.Name}}Get]` passing the primary key column(s).</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="IntoTempTable" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether to select into a `#TempTable` to allow other statements access to the selected data. A `Select * from #TempTable` is also performed (code-generated) where the stored procedure operation `Type` is `GetColl`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="WithHints" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>the table hints using the SQL Server `WITH()` statement; the value specified will be used as-is; e.g. `NOLOCK` will result in `WITH(NOLOCK)`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="MergeOverrideIdentityColumns" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The comma seperated list of `Column` names to be used in the `Merge` statement to determine whether to _insert_, _update_ or _delete_. This is used to override the default behaviour of using the primary key column(s).</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Permission" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The name of the `StoredProcedure` in the database.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="OrgUnitImmutable" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether the `OrgUnitId` column is considered immutable, in that it can not be changed once set. Defaults to `Table.OrgUnitImmutable`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="IncludeColumns" use="optional">
                    <xs:annotation>
                      <xs:documentation>The list of `Column` names to be included in the underlying generated _settable_ output (further filters `Table.IncludeColumns`). Where not specified this indicates that all `Columns` are to be included. Only filters the columns where `Type` is `Get`, `GetColl`, `Create`, `Update` or `Upsert`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ExcludeColumns" use="optional">
                    <xs:annotation>
                      <xs:documentation>The list of `Column` names to be excluded from the underlying generated _settable_ output (further filters `Table.ExcludeColumns`). Where not specified this indicates no `Columns` are to be excluded. Only filters the columns where `Type` is `Get`, `GetColl`, `Create`, `Update` or `Upsert`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
            </xs:choice>
            <xs:attribute name="Name" use="required" type="xs:string">
              <xs:annotation>
                <xs:documentation>The name of the `Table` in the database.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Schema" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The name of the `Schema` where the `Table` is defined in the database. Defaults to `CodeGeneration.Schema`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Alias" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The `Schema.Table` alias name. Will automatically default where not specified.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IncludeColumns" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The comma separated list of `Column` names to be included in the underlying generated output. Where not specified this indicates that all `Columns` are to be included.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeColumns" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The comma seperated list of `Column` names to be excluded from the underlying generated output. Where not specified this indicates no `Columns` are to be excluded.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Get" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether a `Get` stored procedure is to be automatically generated where not otherwise explicitly specified.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="GetAll" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether a `GetAll` stored procedure is to be automatically generated where not otherwise explicitly specified. The `GetAllOrderBy` is used to specify the `GetAll` query sort order.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="GetAllOrderBy" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The comma seperated list of `Column` names (including sort order ASC/DESC) to be used as the `GetAll` query sort order.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Create" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether a `Create` stored procedure is to be automatically generated where not otherwise explicitly specified.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Update" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether a `Update` stored procedure is to be automatically generated where not otherwise explicitly specified.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Upsert" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether a `Upsert` stored procedure is to be automatically generated where not otherwise explicitly specified.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Delete" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether a `Delete` stored procedure is to be automatically generated where not otherwise explicitly specified.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Merge" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether a `Merge` (insert/update/delete of `Udt` list) stored procedure is to be automatically generated where not otherwise explicitly specified. This will also require a `Udt` (SQL User Defined Table) and `Tvp` (.NET Table-Valued Parameter) to function.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="EfModel" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether an `Entity Framework` .NET (C#) model is to be generated.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="EfModelName" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The .NET (C#) EntityFramework (EF) model name. Defaults to `Name`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Udt" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether a `User Defined Table (UDT)` type should be created.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="UdtExcludeColumns" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The comma seperated list of `Column` names to be excluded from the `User Defined Table (UDT)`. Where not specified this indicates that no `Columns` are to be excluded.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Tvp" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The name of the .NET entity associated with the `Udt` so that it can be expressed (created) as a Table-Valued Parameter for usage within the corresponding `DbMapper`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="EntityScope" use="optional">
              <xs:annotation>
                <xs:documentation>The entity scope option. Defaults to `CodeGeneration.EntityScope`. Determines where the entity is scoped/defined, being `Common` or `Business` (i.e. not externally visible).</xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="Common" />
                  <xs:enumeration value="Business" />
                  <xs:enumeration value="Autonomous" />
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="Permission" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The permission (prefix) to be used for security permission checking (suffix defaults to `Read`, `Write` or `Delete` and can be overridden in the underlying stored procedure).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="OrgUnitImmutable" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether the `OrgUnitId` column is considered immutable, in that it can not be changed once set. Defaults to `CodeGeneration.OrgUnitImmutable`. This is only applicable for stored procedures.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameIsDeleted" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `IsDeleted` capability. Defaults to `CodeGeneration.IsDeleted`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameTenantId" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `TenantId` capability. Defaults to `CodeGeneration.TenantId`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameOrgUnitId" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `OrgUnitId` capability. Defaults to `CodeGeneration.OrgUnitId`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameRowVersion" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `RowVersion` capability. Defaults to `CodeGeneration.RowVersion`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameCreatedBy" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `CreatedBy` capability. Defaults to `CodeGeneration.CreatedBy`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameCreatedDate" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `CreatedDate` capability. Defaults to `CodeGeneration.CreatedDate`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameUpdatedBy" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `UpdatedBy` capability. Defaults to `CodeGeneration.UpdatedBy`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameUpdatedDate" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `UpdatedDate` capability. Defaults to `CodeGeneration.UpdatedDate`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameDeletedBy" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `DeletedBy` capability. Defaults to `CodeGeneration.UpdatedBy`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameDeletedDate" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `DeletedDate` capability. Defaults to `CodeGeneration.UpdatedDate`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
        <xs:element name="Query" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>'Query' object (database-driven)</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:choice maxOccurs="unbounded">
              <xs:element name="QueryJoin" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>'QueryJoin' object (database-driven)</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="QueryJoinOn" minOccurs="0" maxOccurs="unbounded">
                      <xs:annotation>
                        <xs:documentation>'QueryJoinOn' object (database-driven)</xs:documentation>
                      </xs:annotation>
                      <xs:complexType>
                        <xs:attribute name="Name" use="required" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The name of the join column (from the `Join` table).</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="ToSchema" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The name of the other join to table schema. Defaults to `Table.Schema`; i.e. same schema. See also `ToTable` and `ToColumn` as these all relate.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="ToTable" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The name of the other join to table. Defaults to `Table.Name`; i.e. primary table. See also `ToSchema` and `ToColumn` as these all relate.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="ToColumn" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The name of the other join to column. Defaults to `Name`; i.e. assumes same name. See also `ToSchema` and `ToTable` as these all relate.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="ToStatement" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The fully qualified name (`Alias.Name`) of the other column being joined to or other valid SQL (e.g. function) bypassing the corresponding `Schema`, `Table` and `Column` logic.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                      </xs:complexType>
                    </xs:element>
                  </xs:choice>
                  <xs:attribute name="Name" use="required" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The name of the table to join.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Schema" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The schema name of the table to join. Defaults to `Table.Schema`; i.e. same schema.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Alias" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The `Schema.Table` alias name. Will automatically default where not specified.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Type" use="optional">
                    <xs:annotation>
                      <xs:documentation>The SQL join type. Defaults to `Inner`.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="Inner" />
                        <xs:enumeration value="Left" />
                        <xs:enumeration value="Right" />
                        <xs:enumeration value="Full" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                  <xs:attribute name="IncludeColumns" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The comma separated list of `Column` names to be included in the underlying generated output. Where not specified this indicates that all `Columns` are to be included.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ExcludeColumns" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The comma seperated list of `Column` names to be excluded from the underlying generated output. Where not specified this indicates no `Columns` are to be excluded.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="AliasColumns" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The comma seperated list of `Column` and `Alias` pairs (split by a `^` lookup character) to enable column aliasing/renaming. Each alias value should be formatted as `Column` + `^` + `Alias`; e.g. `PCODE^ProductCode`</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ColumnNameIsDeleted" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The column name for the `IsDeleted` capability. Defaults to `CodeGeneration.IsDeleted`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ColumnNameTenantId" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The column name for the `TenantId` capability. Defaults to `CodeGeneration.TenantId`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ColumnNameOrgUnitId" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The column name for the `OrgUnitId` capability. Defaults to `CodeGeneration.OrgUnitId`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ColumnNameRowVersion" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The column name for the `RowVersion` capability. Defaults to `CodeGeneration.RowVersion`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ColumnNameCreatedBy" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The column name for the `CreatedBy` capability. Defaults to `CodeGeneration.CreatedBy`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ColumnNameCreatedDate" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The column name for the `CreatedDate` capability. Defaults to `CodeGeneration.CreatedDate`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ColumnNameUpdatedBy" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The column name for the `UpdatedBy` capability. Defaults to `CodeGeneration.UpdatedBy`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ColumnNameUpdatedDate" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The column name for the `UpdatedDate` capability. Defaults to `CodeGeneration.UpdatedDate`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ColumnNameDeletedBy" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The column name for the `DeletedBy` capability. Defaults to `CodeGeneration.UpdatedBy`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ColumnNameDeletedDate" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The column name for the `DeletedDate` capability. Defaults to `CodeGeneration.UpdatedDate`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
              <xs:element name="QueryOrder" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>'QueryOrder' object (database-driven)</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:attribute name="Name" use="required" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The name of the `Column` to order by. See also `Schema` and `Table` as these all relate.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Schema" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The name of order by table schema. See also `Name` and `Column` as these all relate. Defaults to `Query.Schema`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Table" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The name of the order by table. Defaults to `Table.Name`; i.e. primary table. See also `Schema` and `Column` as these all relate.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Order" use="optional">
                    <xs:annotation>
                      <xs:documentation>The corresponding sort order. Defaults to `Ascending`.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="Ascending" />
                        <xs:enumeration value="Descending" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
              <xs:element name="QueryWhere" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>'QueryWhere' object (database-driven)</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:attribute name="Statement" use="required" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The where TSQL statement.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
            </xs:choice>
            <xs:attribute name="Name" use="required" type="xs:string">
              <xs:annotation>
                <xs:documentation>The name of the primary table of the query.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Schema" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The schema name of the primary table of the view. Defaults to `CodeGeneration.dbo`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Alias" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The `Schema.Table` alias name. Will automatically default where not specified.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IncludeColumns" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The comma separated list of `Column` names to be included in the underlying generated output. Where not specified this indicates that all `Columns` are to be included.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeColumns" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The comma seperated list of `Column` names to be excluded from the underlying generated output. Where not specified this indicates no `Columns` are to be excluded.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="AliasColumns" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The comma seperated list of `Column` and `Alias` pairs (split by a `^` lookup character) to enable column aliasing/renaming. Each alias value should be formatted as `Column` + `^` + `Alias`; e.g. `PCODE^ProductCode`</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="View" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether a `View` is to be generated.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ViewName" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The `View` name. Defaults to `vw` + `Name`; e.g. `vwTableName`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ViewSchema" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The schema name for the `View`. Defaults to `Schema`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Permission" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The permission to be used for security permission checking. The suffix is optional, and where not specified will default to `.READ`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameIsDeleted" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `IsDeleted` capability. Defaults to `CodeGeneration.IsDeleted`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameTenantId" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `TenantId` capability. Defaults to `CodeGeneration.TenantId`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameOrgUnitId" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `OrgUnitId` capability. Defaults to `CodeGeneration.OrgUnitId`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameRowVersion" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `RowVersion` capability. Defaults to `CodeGeneration.RowVersion`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameCreatedBy" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `CreatedBy` capability. Defaults to `CodeGeneration.CreatedBy`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameCreatedDate" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `CreatedDate` capability. Defaults to `CodeGeneration.CreatedDate`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameUpdatedBy" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `UpdatedBy` capability. Defaults to `CodeGeneration.UpdatedBy`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameUpdatedDate" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `UpdatedDate` capability. Defaults to `CodeGeneration.UpdatedDate`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameDeletedBy" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `DeletedBy` capability. Defaults to `CodeGeneration.UpdatedBy`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameDeletedDate" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `DeletedDate` capability. Defaults to `CodeGeneration.UpdatedDate`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
        <xs:element name="Cdc" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>'Cdc' object (database-driven)</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:choice maxOccurs="unbounded">
              <xs:element name="CdcJoin" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>'CdcJoin' object (database-driven)</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="CdcJoinOn" minOccurs="0" maxOccurs="unbounded">
                      <xs:annotation>
                        <xs:documentation>'CdcJoinOn' object (database-driven)</xs:documentation>
                      </xs:annotation>
                      <xs:complexType>
                        <xs:attribute name="Name" use="required" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The name of the join column (from the `Join` table).</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="ToColumn" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The name of the join to column. Defaults to `Name`; i.e. assumes same name.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="ToStatement" use="optional" type="xs:string">
                          <xs:annotation>
                            <xs:documentation>The SQL statement for the join on bypassing the corresponding `Column` specification.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                      </xs:complexType>
                    </xs:element>
                  </xs:choice>
                  <xs:attribute name="Name" use="required" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The unique name.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Schema" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The schema name of the table to join. Defaults to `Cdc.Schema`; i.e. same schema.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="TableName" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The name of the table to join. Defaults to `Name`. This is used to specify the actual underlying database table name (where the `Name` has been changed to enable uniqueness).</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Alias" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The `Schema.Table` alias name. Will automatically default where not specified.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="JoinTo" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The name of the table to join to (must be previously specified). Defaults to `Parent.Name`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="JoinToSchema" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The schema name of the table to join to. Defaults to `Parent.Schema`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="JoinCardinality" use="optional">
                    <xs:annotation>
                      <xs:documentation>The join cardinality being whether there is a One-to-Many or One-to-One relationship. Defaults to `OneToMany`. This represents the Parent (`JoinTo`) to child (_this_) relationship.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="OneToMany" />
                        <xs:enumeration value="OneToOne" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                  <xs:attribute name="IncludeColumns" use="optional">
                    <xs:annotation>
                      <xs:documentation>The list of `Column` names to be included in the underlying generated output. Where not specified this indicates that all `Columns` are to be included.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ExcludeColumns" use="optional">
                    <xs:annotation>
                      <xs:documentation>The list of `Column` names to be excluded from the underlying generated output. Where not specified this indicates no `Columns` are to be excluded.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="AliasColumns" use="optional">
                    <xs:annotation>
                      <xs:documentation>The list of `Column` and `Alias` pairs (split by a `^` lookup character) to enable column renaming. Each alias value should be formatted as `Column` + `^` + `Alias`; e.g. `PCODE^ProductCode`</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="Type" use="optional">
                    <xs:annotation>
                      <xs:documentation>The SQL join type. Defaults to `Cdc`. The `Cdc` value indicates this is a related secondary table that also has Change Data Capture turned on and equally needs to be monitored for changes.</xs:documentation>
                    </xs:annotation>
                    <xs:simpleType>
                      <xs:restriction base="xs:string">
                        <xs:enumeration value="Cdc" />
                        <xs:enumeration value="Inner" />
                        <xs:enumeration value="Left" />
                        <xs:enumeration value="Right" />
                        <xs:enumeration value="Full" />
                      </xs:restriction>
                    </xs:simpleType>
                  </xs:attribute>
                  <xs:attribute name="ModelName" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The .NET model name. Defaults to `Name`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="PropertyName" use="optional" type="xs:string">
                    <xs:annotation>
                      <xs:documentation>The .NET property name. Defaults to `TableName` where `JoinCardinality` is `OneToOne`; otherwise, it will be `Name` suffixed by an `s` except when already ending in `s` where it will be suffixed by an `es`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="IncludeColumnsOnDelete" use="optional">
                    <xs:annotation>
                      <xs:documentation>The list of `Column` names that should be included (in addition to the primary key) for a logical delete. Where a column is not specified in this list its corresponding .NET property will be automatically cleared by the `CdcDataOrchestrator` as the data is technically considered as non-existing.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="ExcludeColumnsFromETag" use="optional">
                    <xs:annotation>
                      <xs:documentation>The list of `Column` names that should be excluded from the generated ETag (used for the likes of duplicate send tracking). Defaults to `CodeGeneration.CdcExcludeColumnsFromETag`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="IdentifierMapping" use="optional" type="xs:boolean">
                    <xs:annotation>
                      <xs:documentation>Indicates whether to perform Identifier Mapping (mapping to `GlobalId`) for the primary key. This indicates whether to create a new `GlobalId` property on the _entity_ to house the global mapping identifier to be the reference outside of the specific database realm as a replacement to the existing primary key column(s).</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                  <xs:attribute name="IdentifierMappingColumns" use="optional">
                    <xs:annotation>
                      <xs:documentation>The list of `Column` with related `Schema`/`Table` values (all split by a `^` lookup character) to enable column one-to-one identifier mapping. Each value is formatted as `Column` + `^` + `Schema` + `^` + `Table` where the schema is optional; e.g. `ContactId^dbo^Contact` or `ContactId^Contact`.</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
            </xs:choice>
            <xs:attribute name="Name" use="required" type="xs:string">
              <xs:annotation>
                <xs:documentation>The name of the primary table.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Schema" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The default schema name used where not otherwise explicitly specified. Defaults to `CodeGeneration.Schema`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="Alias" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The `Schema.Table` alias name. Will automatically default where not specified.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IncludeColumns" use="optional">
              <xs:annotation>
                <xs:documentation>The list of `Column` names to be included in the underlying generated output. Where not specified this indicates that all `Columns` are to be included.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeColumns" use="optional">
              <xs:annotation>
                <xs:documentation>The list of `Column` names to be excluded from the underlying generated output. Where not specified this indicates no `Columns` are to be excluded.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="AliasColumns" use="optional">
              <xs:annotation>
                <xs:documentation>The list of `Column` and `Alias` pairs (split by a `^` lookup character) to enable column aliasing/renaming. Each alias value should be formatted as `Column` + `^` + `Alias`; e.g. `PCODE^ProductCode`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExecuteStoredProcedureName" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The `CDC` _execute_ outbox stored procedure name. Defaults to `spExecute` (literal) + `Name` + `CdcOutbox` (literal); e.g. `spExecuteTableNameCdcOutbox`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="CompleteStoredProcedureName" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The `CDC` _complete_ outbox stored procedure name. Defaults to `spComplete` (literal) + `Name` + `CdcOutbox` (literal); e.g. `spCompleteTableNameCdcOutbox`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="CdcSchema" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The schema name for the generated `CDC`-related database artefacts. Defaults to `CodeGeneration.CdcSchema`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="OutboxTableName" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The corresponding `CDC` Outbox table name. Defaults to `Name` + `Outbox` (literal).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ModelName" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The .NET model name. Defaults to `Name`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DataConstructor" use="optional">
              <xs:annotation>
                <xs:documentation>The access modifier for the generated CDC `Data` constructor. Defaults to `Public`.</xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="Public" />
                  <xs:enumeration value="Private" />
                  <xs:enumeration value="Protected" />
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="DataCtorParams" use="optional">
              <xs:annotation>
                <xs:documentation>The list of additional (non-default) Dependency Injection (DI) parameters for the generated CDC `Data` constructor. Each constructor parameter should be formatted as `Type` + `^` + `Name`; e.g. `IConfiguration^Config`. Where the `Name` portion is not specified it will be inferred.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="DatabaseName" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The .NET database interface name. Defaults to `IDatabase`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="EventSource" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The Event Source. Defaults to `ModelName` (as lowercase). Note: when used in code-generation the `CodeGeneration.EventSourceRoot` will be prepended where specified.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="EventSourceFormat" use="optional">
              <xs:annotation>
                <xs:documentation>The default formatting for the Source when an Event is published. Defaults to `CodeGeneration.EventSourceFormat`.</xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="NameOnly" />
                  <xs:enumeration value="NameAndKey" />
                  <xs:enumeration value="NameAndGlobalId" />
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="EventSubject" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The Event Subject. Defaults to `ModelName`. Note: when used in code-generation the `CodeGeneration.EventSubjectRoot` will be prepended where specified.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="EventSubjectFormat" use="optional">
              <xs:annotation>
                <xs:documentation>The default formatting for the Subject when an Event is published. Defaults to `CodeGeneration.EventSubjectFormat`.</xs:documentation>
              </xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="NameOnly" />
                  <xs:enumeration value="NameAndKey" />
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="IncludeColumnsOnDelete" use="optional">
              <xs:annotation>
                <xs:documentation>The list of `Column` names that should be included (in addition to the primary key) for a logical delete. Where a column is not specified in this list its corresponding .NET property will be automatically cleared by the `CdcDataOrchestrator` as the data is technically considered as non-existing.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeHostedService" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>The option to exclude the generation of the `CdcHostedService` (background) class (`XxxHostedService.cs`).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ExcludeColumnsFromETag" use="optional">
              <xs:annotation>
                <xs:documentation>The list of `Column` names that should be excluded from the generated ETag (used for the likes of duplicate send tracking). Defaults to `CodeGeneration.CdcExcludeColumnsFromETag`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IdentifierMapping" use="optional" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>Indicates whether to perform Identifier Mapping (mapping to `GlobalId`) for the primary key. This indicates whether to create a new `GlobalId` property on the _entity_ to house the global mapping identifier to be the reference outside of the specific database realm as a replacement to the existing primary key column(s).</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="IdentifierMappingColumns" use="optional">
              <xs:annotation>
                <xs:documentation>The list of `Column` with related `Schema`/`Table` values (all split by a `^` lookup character) to enable column one-to-one identifier mapping. Each value is formatted as `Column` + `^` + `Schema` + `^` + `Table` where the schema is optional; e.g. `ContactId^dbo^Contact` or `ContactId^Contact`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
            <xs:attribute name="ColumnNameIsDeleted" use="optional" type="xs:string">
              <xs:annotation>
                <xs:documentation>The column name for the `IsDeleted` capability. Defaults to `CodeGeneration.IsDeleted`.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
      </xs:choice>
      <xs:attribute name="Schema" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The name of the `Schema` where the artefacts are defined in, or should be created in, the database. This is used as the default `Schema` for all child objects.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ColumnNameIsDeleted" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The column name for the `IsDeleted` capability. Defaults to `IsDeleted`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ColumnNameTenantId" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The column name for the `TenantId` capability. Defaults to `TenantId`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ColumnNameOrgUnitId" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The column name for the `OrgUnitId` capability. Defaults to `OrgUnitId`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ColumnNameRowVersion" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The column name for the `RowVersion` capability. Defaults to `RowVersion`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ColumnNameCreatedBy" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The column name for the `CreatedBy` capability. Defaults to `CreatedBy`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ColumnNameCreatedDate" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The column name for the `CreatedDate` capability. Defaults to `CreatedDate`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ColumnNameUpdatedBy" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The column name for the `UpdatedBy` capability. Defaults to `UpdatedBy`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ColumnNameUpdatedDate" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The column name for the `UpdatedDate` capability. Defaults to `UpdatedDate`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ColumnNameDeletedBy" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The column name for the `DeletedBy` capability. Defaults to `UpdatedBy`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="ColumnNameDeletedDate" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The column name for the `DeletedDate` capability. Defaults to `UpdatedDate`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="OrgUnitJoinSql" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The SQL table or function that is to be used to join against for security-based `OrgUnitId` verification. Defaults to `[Sec].[fnGetUserOrgUnits]()`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="CheckUserPermissionSql" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The SQL stored procedure that is to be used for `Permission` verification. Defaults to `[Sec].[spCheckUserHasPermission]`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="GetUserPermissionSql" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The SQL function that is to be used for `Permission` verification. Defaults to `[Sec].[fnGetUserHasPermission]`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="CdcSchema" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The schema name for the generated `CDC`-related database artefacts. Defaults to `XCdc` (literal).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="CdcAuditTableName" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The table name for the `Cdc`-Tracking. Defaults to `CdcTracking` (literal).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="CdcIdentifierMapping" use="optional" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Indicates whether to include the generation of the generic `Cdc`-IdentifierMapping database capabilities.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="CdcIdentifierMappingTableName" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The table name for the `Cdc`-IdentifierMapping. Defaults to `CdcIdentifierMapping` (literal).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="CdcIdentifierMappingStoredProcedureName" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The table name for the `Cdc`-IdentifierMapping. Defaults to `spCreateCdcIdentifierMapping` (literal).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="CdcExcludeColumnsFromETag" use="optional">
        <xs:annotation>
          <xs:documentation>The default list of `Column` names that should be excluded from the generated ETag (used for the likes of duplicate send tracking)</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="JsonSerializer" use="optional">
        <xs:annotation>
          <xs:documentation>The JSON Serializer to use for JSON property attribution. Defaults to `Newtonsoft`. This can be overridden within the `Entity`(s).</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="None" />
            <xs:enumeration value="Newtonsoft" />
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="PluralizeCollectionProperties" use="optional" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Indicates whether the .NET collection properties should be pluralized.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="HasBeefDbo" use="optional" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Indicates whether the database has (contains) the standard _Beef_ `dbo` schema objects. Defaults to `true`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="AutoDotNetRename" use="optional">
        <xs:annotation>
          <xs:documentation>The option to automatically rename the SQL Tables and Columns for use in .NET. Defaults `SnakeKebabToPascalCase` that will remove any underscores or hyphens separating each word and capitalize the first character of each; e.g. `internal-customer_id` would be renamed as `InternalCustomerId`. The `PascalCase` option will capatilize the first character only.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="None" />
            <xs:enumeration value="PascalCase" />
            <xs:enumeration value="SnakeKebabToPascalCase" />
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="EntityScope" use="optional">
        <xs:annotation>
          <xs:documentation>The entity scope option. Defaults to `Common` for backwards compatibility; `Autonomous` is recommended. Determines where the entity is scoped/defined, being `Common` or `Business` (i.e. not externally visible).</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="Common" />
            <xs:enumeration value="Business" />
            <xs:enumeration value="Autonomous" />
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="EventSubjectRoot" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The root for the event name by prepending to all event subject names via CDC. Used to enable the sending of messages to the likes of EventHub, Service Broker, SignalR, etc. This can be extended within the `Entity`(s).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="EventSubjectFormat" use="optional">
        <xs:annotation>
          <xs:documentation>The default formatting for the Subject when an Event is published via CDC. Defaults to `NameAndKey` (being the event subject name appended with the corresponding unique key.)`.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="NameOnly" />
            <xs:enumeration value="NameAndKey" />
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="EventActionFormat" use="optional">
        <xs:annotation>
          <xs:documentation>The formatting for the Action when an Event is published via CDC. Defaults to `None` (no formatting required, i.e. as-is).</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="None" />
            <xs:enumeration value="PastTense" />
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="EventSourceRoot" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The URI root for the event source by prepending to all event source URIs for CDC. The event source is only updated where an `EventSourceKind` is not `None`. This can be extended within the `Entity`(s).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="EventSourceKind" use="optional">
        <xs:annotation>
          <xs:documentation>The URI kind for the event source URIs for CDC. Defaults to `None` (being the event source is not updated).</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="None" />
            <xs:enumeration value="Absolute" />
            <xs:enumeration value="Relative" />
            <xs:enumeration value="RelativeOrAbsolute" />
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="EventSourceFormat" use="optional">
        <xs:annotation>
          <xs:documentation>The default formatting for the Source when an Event is published via CDC. Defaults to `NameAndKey` (being the event subject name appended with the corresponding unique key.)`.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="NameOnly" />
            <xs:enumeration value="NameAndKey" />
            <xs:enumeration value="NameAndGlobalId" />
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="EventOutbox" use="optional" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Indicates whether events will publish using the outbox pattern and therefore the event outbox artefacts are required.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="EventOutboxTableName" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The table name for the `EventOutbox`. Defaults to `EventOutbox` (literal).</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="PathBase" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The base path (directory) prefix for the Database-related artefacts; other `Path*` properties append to this value when they are not specifically overridden. Defaults to `Company` (runtime parameter) + `.` + `AppName` (runtime parameter). For example `Beef.Demo`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="PathDatabaseSchema" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The path (directory) for the Schema Database-related artefacts. Defaults to `PathBase` + `.Database/Schema` (literal). For example `Beef.Demo.Database/Schema`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="PathDatabaseMigrations" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The path (directory) for the Schema Database-related artefacts. Defaults to `PathBase` + `.Database/Migrations` (literal). For example `Beef.Demo.Database/Migrations`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="PathBusiness" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The path (directory) for the Business-related (.NET) artefacts. Defaults to `PathBase` + `.Business` (literal). For example `Beef.Demo.Business`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="PathCdcPublisher" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The path (directory) for the CDC-related (.NET) artefacts. Defaults to `PathBase` + `.Cdc` (literal). For example `Beef.Demo.Cdc`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="OrgUnitImmutable" use="optional" type="xs:boolean">
        <xs:annotation>
          <xs:documentation>Indicates whether the `OrgUnitId` column is considered immutable, in that it can not be changed once set. This is only applicable for stored procedures.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="NamespaceBase" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The base Namespace (root) for the .NET artefacts. Defaults to `Company` (runtime parameter) + `.` + `AppName` (runtime parameter). For example `Beef.Demo`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="NamespaceCommon" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The Namespace (root) for the Common-related .NET artefacts. Defaults to `NamespaceBase` + `.Common` (literal). For example `Beef.Demo.Common`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="NamespaceBusiness" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The Namespace (root) for the Business-related .NET artefacts. Defaults to `NamespaceBase` + `.Business` (literal). For example `Beef.Demo.Business`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="NamespaceCdcPublisher" use="optional" type="xs:string">
        <xs:annotation>
          <xs:documentation>The Namespace (root) for the CDC-related publisher .NET artefacts. Defaults to `NamespaceBase` + `.CdcPublisher` (literal). For example `Beef.Demo.CdcPublisher`.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
</xs:schema>
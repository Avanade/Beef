<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef -->
<Template OutputGenDirName="Generated" OutputFileName="ReferenceData.cs" OutputDirName="{{Config.AppendToNamespace}}">
  <![CDATA[/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Threading.Tasks;
using Beef.RefData;
]]>
  <If Condition="Config.RefDataNamespace != null">
    <![CDATA[using RefDataNamespace = {{Config.RefDataNamespace}};
]]>
  </If>
  <If Condition="Config.RefDataBusNamespace != null">
    <![CDATA[using RefDataBusNamespace = {{Config.RefDataBusNamespace}};
]]>
  </If>
  <![CDATA[
namespace {{Config.Company}}.{{Config.AppName}}.Common.Entities]]>
  <If Condition="Config.AppendToNamespace != null">
    <Then><![CDATA[.{{Config.AppendToNamespace}}]]></Then>
  </If>
  <![CDATA[
{
    /// <summary>
    /// Provides a standard mechanism for accessing the <b>ReferenceData</b>. 
    /// </summary>
    public abstract partial class ReferenceData : IReferenceDataProvider
    {
        private static ReferenceData _current;

        #region PropertyNames
    
]]>
  <Entity Condition="Entity.RefDataType != null and Entity.Abstract == false">
    <Set Name="Entity.EntityName" Condition="Config.RefDataNamespace == null" Value="${{Entity.Name}}" Otherwise="$RefDataNamespace.{{Entity.Name}}" />
    <Set Name="Entity.EntityCollectionName" Condition="Config.RefDataNamespace == null" Value="${{Entity.Name}}Collection" Otherwise="$RefDataNamespace.{{Entity.Name}}Collection" />
    <![CDATA[        /// <summary>
        /// Represents the {{Entity.Name:ToSeeComments}} property name.
        /// </summary>
        public const string Property_{{Entity.Name}} = "{{Entity.Name}}";

]]>
  </Entity>
  <![CDATA[        #endregion

        /// <summary>
        /// Gets the current <see cref="ReferenceData"/> instance; uses the <see cref="ReferenceDataManager.Register(IReferenceDataProvider[])">registered</see> instance from the
        /// <see cref="ReferenceDataManager.GetProvider(string)"/> using the defined <see cref="IReferenceDataProvider.ProviderName"/>.
        /// </summary>
        public static ReferenceData Current => _current ?? (_current = (ReferenceData)ReferenceDataManager.Current.GetProvider(typeof(ReferenceData).FullName));

        /// <summary>
        /// Gets the unique provider name.
        /// </summary>
        string IReferenceDataProvider.ProviderName => typeof(ReferenceData).FullName;

        /// <summary>
        /// Gets all the underlying <see cref="ReferenceDataBase"/> <see cref="Type">types</see>.
        /// </summary>
        /// <returns>An array of the <see cref="ReferenceDataBase"/> <see cref="Type">types</see>.</returns>
        public Type[] GetAllTypes() => new Type[] 
            {
]]>
  <Entity Condition="Entity.RefDataType != null and Entity.Abstract == false">
    <If Condition="System.Index > 0">
      <![CDATA[,
]]>
    </If>
    <![CDATA[                typeof({{Entity.Name}})]]>
  </Entity>
  <![CDATA[
            };
        
]]>
  <![CDATA[        /// <summary>
        /// Gets the <see cref="IReferenceDataCollection"/> for the associated <see cref="ReferenceDataBase"/> <see cref="Type"/>.
        /// </summary>
        /// <param name="type">The associated <see cref="ReferenceDataBase"/> <see cref="Type"/>.</param>
        /// <returns>The corresponding <see cref="IReferenceDataCollection"/>.</returns>
        public abstract IReferenceDataCollection this[Type type] { get; }

        /// <summary>
        /// Prefetches all of the named <see cref="ReferenceDataBase"/> objects.
        /// </summary>
        /// <param name="names">The list of <see cref="ReferenceDataBase"/> names.</param>
        /// <remarks>Note for implementers; should only fetch where not already cached or expired. This is provided to improve performance for consuming applications to reduce the overhead of
        /// making multiple individual invocations, i.e. reduces chattiness across a potentially high-latency connection.</remarks>
        public abstract Task PrefetchAsync(params string[] names);
        
        #region Collections

]]>
  <Entity Condition="Entity.RefDataType != null and Entity.Abstract == false">
    <![CDATA[        /// <summary> 
        /// Gets the {{Entity.EntityCollectionName:ToSeeComments}}.
        /// </summary>
        public abstract {{Entity.EntityCollectionName}} {{Entity.Name}} { get; }

]]>
  </Entity>
  <![CDATA[        #endregion
    }
}]]>
</Template>
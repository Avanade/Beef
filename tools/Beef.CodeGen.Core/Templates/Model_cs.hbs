{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

{{! ===== Using ===== }}
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Beef.Entities;
{{#ifval RefDataType}}
using Beef.RefData.Model;
{{/ifval}}
{{#ifeq JsonSerializer 'Newtonsoft'}}
using Newtonsoft.Json;
{{/ifeq}}
{{#unless Root.IsDataModel}}
  {{#if Root.UsingNamespace1}}
using {{Root.UsingNamespace1}};
  {{/if}}
  {{#if Root.UsingNamespace2}}
using {{Root.UsingNamespace2}};
  {{/if}}
  {{#if Root.UsingNamespace3}}
using {{Root.UsingNamespace3}};
  {{/if}}
  {{#ifeq EntityUsing 'Common' 'All'}}
    {{#ifeq EntityScope 'Business'}}
using {{Root.NamespaceCommon}}.Entities;
    {{/ifeq}}
  {{/ifeq}}
{{/unless}}

{{! ===== Class ===== }}
namespace {{#if Root.IsDataModel}}{{Root.NamespaceBusiness}}.Data.Model{{else}}{{#ifeq Root.RuntimeEntityScope 'Common'}}{{Root.NamespaceCommon}}{{else}}{{Root.NamespaceBusiness}}{{/ifeq}}.Entities{{/if}}
{
    /// <summary>
    /// Represents the {{{Text}}} {{#if Root.IsDataModel}}model{{else}}entity{{/if}}.
    /// </summary>
{{#ifeq JsonSerializer 'Newtonsoft'}}
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
{{/ifeq}}
    public {{#if Abstract}}abstract {{/if}}partial class {{{EntityName}}}{{#ifval ModelInherits}} : {{{ModelInherits}}}{{/ifval}}{{#ifval ModelImplements}}{{#ifval ModelInherits}}, {{else}} : {{/ifval}}{{{ModelImplements}}}{{/ifval}}
    {
{{! ===== Properties ===== }}
{{#each CoreProperties}}
  {{#unless @first}}

  {{/unless}}
        /// <summary>
        /// {{{SummaryText}}}
        /// </summary>
    {{#ifeq Parent.JsonSerializer 'Newtonsoft'}}
      {{#unless SerializationIgnore}}
        [JsonProperty("{{#if Root.IsDataModel}}{{JsonDataModelName}}{{else}}{{JsonName}}{{/if}}", DefaultValueHandling = {{#if SerializationEmitDefault}}DefaultValueHandling.Include{{else}}DefaultValueHandling.Ignore{{/if}})]
      {{/unless}}
    {{/ifeq}}
    {{#unless IsDataModel}}
      {{#ifval Annotation1}}
        {{Annotation1}}
      {{/ifval}}
      {{#ifval Annotation2}}
        {{Annotation2}}
      {{/ifval}}
      {{#ifval Annotation3}}
        {{Annotation3}}
      {{/ifval}}
    {{/unless}}
        public {{{PrivateType}}} {{Name}} { get; set; }
{{/each}}
{{#unless RefDataType}}
  {{#ifne UniqueKeyProperties.Count 0}}

        /// <summary>
        /// Gets the list of property names that represent the unique key.
        /// </summary>
        public string[] UniqueKeyProperties => new string[] { {{#each UniqueKeyProperties}}{{#unless @first}}, {{/unless}}nameof({{PropertyName}}){{/each}} };
        
        /// <summary>
        /// Creates the <see cref="UniqueKey"/>.
        /// </summary>
        /// <returns>The <see cref="Beef.Entities.UniqueKey"/>.</returns>
  {{#each UniqueKeyProperties}}
        /// <param name="{{ArgumentName}}">The {{{PropertyNameSeeComments}}}.</param>
  {{/each}}
        public static UniqueKey CreateUniqueKey({{#each UniqueKeyProperties}}{{#unless @first}}, {{/unless}}{{{PrivateType}}} {{PropertyArgumentName}}{{/each}}) => new UniqueKey({{#each UniqueKeyProperties}}{{#unless @first}}, {{/unless}}{{PropertyArgumentName}}{{/each}});

        /// <summary>
        /// Gets the <see cref="UniqueKey"/> (consists of the following property(s): {{#each UniqueKeyProperties}}{{#unless @first}}, {{/unless}}{{{PropertyNameSeeComments}}}{{/each}}).
        /// </summary>
        public UniqueKey UniqueKey => CreateUniqueKey({{#each UniqueKeyProperties}}{{#unless @first}}, {{/unless}}{{PropertyName}}{{/each}});
  {{/ifne}}
{{/unless}}
    }
{{! ===== Collection ===== }}
{{#if Collection}}

    /// <summary>
    /// Represents the {{{EntityNameSeeComments}}} collection.
    /// </summary>
    public partial class {{{EntityCollectionName}}} : {{{CollectionInherits}}} { }
{{/if}}
{{#if CollectionResult}}
  {{#unless Root.IsDataModel}}

    /// <summary>
    /// Represents the {{{EntityNameSeeComments}}} collection result.
    /// </summary>
    public class {{{EntityCollectionResultName}}} : {{{CollectionResultInherits}}}
    {
        /// <summary>
        /// Initializes a new instance of the {{{seecomments EntityCollectionResultName}}} class.
        /// </summary>
        public {{{EntityCollectionResultName}}}() { }
        
        /// <summary>
        /// Initializes a new instance of the {{{seecomments EntityCollectionResultName}}} class with <paramref name="paging"/>.
        /// </summary>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        public {{{EntityCollectionResultName}}}(PagingArgs? paging) : base(paging) { }
        
        /// <summary>
        /// Initializes a new instance of the {{{seecomments EntityCollectionResultName}}} class with a <paramref name="collection"/> of items to add.
        /// </summary>
        /// <param name="collection">A collection containing items to add.</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        public {{{EntityCollectionResultName}}}(IEnumerable<{{{EntityName}}}> collection, PagingArgs? paging = null) : base(paging) => Result.AddRange(collection);
    }
  {{/unless}}
{{/if}}
}

#pragma warning restore
#nullable restore
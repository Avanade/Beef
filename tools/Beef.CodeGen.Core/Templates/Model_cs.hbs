{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable
{{set 'HasUsingStatement' false}}
{{! ===== Using ===== }}
{{#unless Root.IsDataModel}}
using System;{{set 'HasUsingStatement' true}}
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
  {{#ifeq JsonSerializer 'SystemText'}}
using System.Text.Json.Serialization;
  {{/ifeq}}
using CoreEx.Entities;
  {{#ifval RefDataType}}
using CoreEx.RefData.Models;
  {{/ifval}}
{{/unless}}
{{#ifeq JsonSerializer 'Newtonsoft'}}
using Newtonsoft.Json;{{set 'HasUsingStatement' true}}
{{/ifeq}}
{{#unless Root.IsDataModel}}
  {{#if Root.UsingNamespace1}}
using {{Root.UsingNamespace1}};{{set 'HasUsingStatement' true}}
  {{/if}}
  {{#if Root.UsingNamespace2}}
using {{Root.UsingNamespace2}};{{set 'HasUsingStatement' true}}
  {{/if}}
  {{#if Root.UsingNamespace3}}
using {{Root.UsingNamespace3}};{{set 'HasUsingStatement' true}}
  {{/if}}
  {{#ifeq EntityUsing 'Common' 'All'}}
    {{#ifeq EntityScope 'Business'}}
using {{Root.NamespaceCommon}}.Entities;{{set 'HasUsingStatement' true}}
    {{/ifeq}}
  {{/ifeq}}
{{/unless}}
{{#if HasUsingStatement}}

{{/if}}
{{! ===== Class ===== }}
namespace {{#if Root.IsDataModel}}{{Root.NamespaceBusiness}}.Data.Model{{else}}{{#ifeq Root.RuntimeEntityScope 'Common'}}{{Root.NamespaceCommon}}{{else}}{{Root.NamespaceBusiness}}{{/ifeq}}.Entities{{/if}}
{
    /// <summary>
    /// Represents the {{{Text}}} {{#if Root.IsDataModel}}model{{else}}entity{{/if}}.
    /// </summary>
    public {{#if Abstract}}abstract {{/if}}partial class {{{EntityName}}}{{#ifval ModelInherits}} : {{{ModelInherits}}}{{/ifval}}{{#ifval ModelImplements}}{{#ifval ModelInherits}}, {{else}} : {{/ifval}}{{{ModelImplements}}}{{/ifval}}{{#ifval RefDataType}}{{#ifeq CoreProperties.Count 0}} { }{{/ifeq}}{{/ifval}}
{{#ifnull RefDataType}}
    {
{{else}}
  {{#ifne CoreProperties.Count 0}}
    {
  {{/ifne}}
{{/ifnull}}
{{! ===== Properties ===== }}
{{#each CoreProperties}}
  {{#unless @first}}

  {{/unless}}
  {{#ifval RefDataType}}
    {{#unless SerializationIgnore}}
      {{#unless RefDataList}}
        {{#unless Root.IsDataModel}}
          {{#if RefDataText}}
        /// <summary>
        /// {{{SummaryRefDataText}}}
        /// </summary>
            {{#ifval JsonName}}
              {{#ifeq Root.JsonSerializer 'SystemText'}}
        [JsonPropertyName("{{#if Root.IsDataModel}}{{JsonDataModelName}}{{else}}{{JsonName}}{{/if}}Text")]
              {{else}}
        [JsonProperty("{{#if Root.IsDataModel}}{{JsonDataModelName}}{{else}}{{JsonName}}{{/if}}Text")]
              {{/ifeq}}
            {{/ifval}}
        public string? {{Name}}Text { get; set ; }

          {{/if}}
        {{/unless}}
      {{/unless}}
    {{/unless}}
  {{/ifval}}
        /// <summary>
        /// {{{ModelSummaryText}}}
        /// </summary>
      {{#unless SerializationIgnore}}
        {{#ifeq Root.JsonSerializer 'SystemText'}}
          {{#if Root.IsDataModel}}
            {{#ifval JsonDataModelName}}
        [JsonPropertyName("{{JsonDataModelName}}")]
            {{/ifval}}
          {{else}}
            {{#ifval JsonName}}
        [JsonPropertyName("{{JsonName}}")]
            {{/ifval}}
          {{/if}}
        {{else}}
          {{#if Root.IsDataModel}}
            {{#ifval JsonDataModelName}}
        [JsonProperty("{{JsonDataModelName}}")]
            {{/ifval}}
          {{else}}
            {{#ifval JsonName}}
        [JsonProperty("{{JsonName}}")]
            {{/ifval}}
          {{/if}}        
         {{/ifeq}}
      {{/unless}}
    {{#unless Root.IsDataModel}}
      {{#ifval Annotation1}}
        {{Annotation1}}
      {{/ifval}}
      {{#ifval Annotation2}}
        {{Annotation2}}
      {{/ifval}}
      {{#ifval Annotation3}}
        {{Annotation3}}
      {{/ifval}}
    {{/unless}}
        public {{{PrivateType}}} {{Name}} { get; set; }
{{/each}}
{{#unless HasIdentifier}}
  {{#unless RefDataType}}
    {{#ifne UniqueKeyProperties.Count 0}}
        
        /// <summary>
        /// Creates the primary <see cref="CompositeKey"/>.
        /// </summary>
        /// <returns>The primary <see cref="CompositeKey"/>.</returns>
    {{#each UniqueKeyProperties}}
        /// <param name="{{ArgumentName}}">The {{{PropertyNameSeeComments}}}.</param>
    {{/each}}
        public static CompositeKey CreatePrimaryKey({{#each UniqueKeyProperties}}{{#unless @first}}, {{/unless}}{{{PrivateType}}} {{PropertyArgumentName}}{{/each}}) => new CompositeKey({{#each UniqueKeyProperties}}{{#unless @first}}, {{/unless}}{{PropertyArgumentName}}{{/each}});

        /// <summary>
        /// Gets the primary <see cref="CompositeKey"/> (consists of the following property(s): {{#each UniqueKeyProperties}}{{#unless @first}}, {{/unless}}{{{PropertyNameSeeComments}}}{{/each}}).
        /// </summary>
        [JsonIgnore]
        public CompositeKey PrimaryKey => CreatePrimaryKey({{#each UniqueKeyProperties}}{{#unless @first}}, {{/unless}}{{PropertyName}}{{/each}});
    {{/ifne}}
  {{/unless}}
{{/unless}}
{{#ifnull RefDataType}}
    }
{{else}}
  {{#ifne CoreProperties.Count 0}}
    }
  {{/ifne}}
{{/ifnull}}
{{! ===== Collection ===== }}
{{#if Collection}}

    /// <summary>
    /// Represents the {{{EntityNameSeeComments}}} collection.
    /// </summary>
    public partial class {{{EntityCollectionName}}} : {{{CollectionInherits}}} { }
{{/if}}
{{#if CollectionResult}}
  {{#unless Root.IsDataModel}}

    /// <summary>
    /// Represents the {{{EntityNameSeeComments}}} collection result.
    /// </summary>
    public class {{{EntityCollectionResultName}}} : {{{CollectionResultInherits}}}
    {
        /// <summary>
        /// Initializes a new instance of the {{{see-comments EntityCollectionResultName}}} class.
        /// </summary>
        public {{{EntityCollectionResultName}}}() { }
        
        /// <summary>
        /// Initializes a new instance of the {{{see-comments EntityCollectionResultName}}} class with <paramref name="paging"/>.
        /// </summary>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        public {{{EntityCollectionResultName}}}(PagingArgs? paging) : base(paging) { }
        
        /// <summary>
        /// Initializes a new instance of the {{{see-comments EntityCollectionResultName}}} class with a <paramref name="collection"/> of items to add.
        /// </summary>
        /// <param name="collection">A collection containing items to add.</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        public {{{EntityCollectionResultName}}}(IEnumerable<{{{EntityName}}}> collection, PagingArgs? paging = null) : base(paging) => Collection.AddRange(collection);
    }
  {{/unless}}
{{/if}}
}

#pragma warning restore
#nullable restore
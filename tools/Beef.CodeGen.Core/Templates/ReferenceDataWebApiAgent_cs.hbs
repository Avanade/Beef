/*
 * This file is automatically generated; any changes will be lost. 
 */

{{#if Root.PreprocessorDirectives}}
#nullable enable
#pragma warning disable

{{/if}}
namespace {{Root.NamespaceCommon}}.Agents;

/// <summary>
/// Provides the <b>ReferenceData</b> HTTP agent.
/// </summary>
/// <param name="client">The underlying <see cref="HttpClient"/>.</param>
/// <param name="jsonSerializer">The optional <see cref="IJsonSerializer"/>.</param>
/// <param name="executionContext">The optional <see cref="CoreEx.ExecutionContext"/>.</param>
public partial class ReferenceDataAgent(HttpClient client, IJsonSerializer? jsonSerializer = null, CoreEx.ExecutionContext? executionContext = null) : TypedHttpClientBase<ReferenceDataAgent>(client, jsonSerializer, executionContext), IReferenceDataAgent
{
{{#each RefDataEntities}}
    /// <inheritdoc/>
    public Task<HttpResult<{{RefDataQualifiedEntityCollectionName}}>> {{Name}}GetAllAsync(ReferenceDataFilter? args = null, HttpRequestOptions? requestOptions = null, CancellationToken cancellationToken = default)
        => GetAsync<{{RefDataQualifiedEntityCollectionName}}>("{{WebApiRoutePrefix}}", requestOptions, [new HttpArg<ReferenceDataFilter?>("args", args, HttpArgType.FromUriUseProperties)], cancellationToken);      

{{/each}}
    /// <inheritdoc/>
    public Task<HttpResult> GetNamedAsync(string[] names, HttpRequestOptions? requestOptions = null, CancellationToken cancellationToken = default)
    {
        var ro = requestOptions ?? new HttpRequestOptions();
        if (names != null)
            ro.UrlQueryString += string.Join("&", names);
            
        return GetAsync("{{Root.RefDataWebApiRoute}}", ro, null, cancellationToken);
    }
}{{#if Root.PreprocessorDirectives}}

#pragma warning restore
#nullable restore{{/if}}
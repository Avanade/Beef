{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Net;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json.Linq;
using Beef;
using Beef.AspNetCore.WebApi;
using Beef.Entities;
using {{Root.NamespaceBusiness}};
{{#ifeq EntityUsing 'Business' 'All'}}
using {{Root.NamespaceBusiness}}.Entities;
{{/ifeq}}
{{#ifeq EntityUsing 'Common' 'All'}}
using {{Root.NamespaceCommon}}.Entities;
{{/ifeq}}
{{#ifval Root.RefDataNamespace}}
using RefDataNamespace = {{Root.RefDataNamespace}};
{{/ifval}}
{{#ifval Root.RefDataBusNamespace}}
using RefDataNamespace = {{Root.RefDataBusNamespace}};
{{/ifval}}

namespace {{Root.NamespaceApi}}.Controllers
{
    /// <summary>
    /// Provides the {{{EntityNameSeeComments}}} Web API functionality.
    /// </summary>
{{#ifval WebApiAuthorize}}
    [{{{WebApiAuthorize}}}]
{{/ifval}}
{{#ifval WebApiRoutePrefix}}
    [Route("{{WebApiRoutePrefix}}")]
{{/ifval}}
    public partial class {{Name}}Controller : ControllerBase
    {
{{#each WebApiCtorParameters}}
        private readonly {{Type}} {{PrivateName}};
  {{#if @last}}

  {{/if}}
{{/each}}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{Name}}Controller"/> class.
        /// </summary>
{{#each WebApiCtorParameters}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
{{/each}}
        {{lower WebApiCtor}} {{Name}}Controller({{#each WebApiCtorParameters}}{{#unless @first}}, {{/unless}}{{Type}} {{ArgumentName}}{{/each}})
{{#ifle WebApiCtorParameters.Count 2}}
            { {{#each WebApiCtorParameters}}{{PrivateName}} = Check.NotNull({{ArgumentName}}, nameof({{ArgumentName}})); {{/each}}{{Name}}ControllerCtor(); }
{{else}}
        {
  {{#each WebApiCtorParameters}}
            {{PrivateName}} = Check.NotNull({{ArgumentName}}, nameof({{ArgumentName}}));
  {{/each}}
            {{Name}}ControllerCtor();
        }
{{/ifle}}

        partial void {{Name}}ControllerCtor(); // Enables additional functionality to be added to the constructor.

{{#each WebApiOperations}}
  {{#unless @first}}

  {{/unless}} 
        /// <summary>
        /// {{{SummaryText}}}
        /// </summary>
  {{#each PagingLessParameters}}
   {{#ifeq WebApiFrom 'FromEntityProperties'}}
     {{#each RelatedEntity.Properties}}
        /// <param name="{{ArgumentName}}">{{{ParameterSummaryText}}}</param>
     {{/each}}
   {{else}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
   {{/ifeq}}
  {{/each}}
  {{#if HasReturnValue}}
        /// <returns>{{{WebApiReturnText}}}</returns>
  {{/if}}
  {{#ifval WebApiAuthorize}}
        [{{{WebApiAuthorize}}}]
  {{/ifval}}
        [{{WebApiMethod}}("{{WebApiRoute}}")]
        [ProducesResponseType({{#if HasReturnValue}}typeof({{#ifeq Type 'GetColl'}}{{BaseReturnType}}Collection{{else}}{{BaseReturnType}}{{/ifeq}}), {{/if}}(int)HttpStatusCode.{{WebApiStatus}})]
  {{#if HasReturnValue}}
    {{#ifne WebApiAlternateStatus 'ThrowException'}}
        [ProducesResponseType((int)HttpStatusCode.{{WebApiAlternateStatus}})]
    {{/ifne}}
  {{/if}}
        public IActionResult {{Name}}({{#each PagingLessParameters}}{{#unless @first}}, {{/unless}}{{#ifeq WebApiFrom 'FromEntityProperties'}}{{#each RelatedEntity.Properties}}{{#unless @first}}, {{/unless}}{{#ifne ArgumentName JsonName}}[FromQuery(Name = "{{JsonName}}")] {{/ifne}}{{{WebApiParameterType}}} {{ArgumentName}} = {{#ifval Default}}{{Default}}{{else}}default{{/ifval}}{{/each}}{{else}}{{#ifne WebApiFrom 'FromQuery'}}[{{WebApiFrom}}] {{/ifne}}{{{WebApiParameterType}}} {{ArgumentName}}{{#ifval Default}} = {{Default}}{{/ifval}}{{/ifeq}}{{/each}}){{#unless HasFromEntityPropertiesParameters}} =>{{/unless}}
  {{#if HasFromEntityPropertiesParameters}} 
        {
  {{/if}}
  {{#each Parameters}}
    {{#ifeq WebApiFrom 'FromEntityProperties'}}
            var {{ArgumentName}} = new {{Type}} { {{#each RelatedEntity.Properties}}{{#unless @first}}, {{/unless}}{{PropertyName}} = {{#ifval WebApiQueryStringConverter}}new {{WebApiQueryStringConverter}}().ConvertToSrce({{ArgumentName}}){{else}}{{ArgumentName}}{{/ifval}}{{/each}} };
    {{/ifeq}}
  {{/each}}
  {{#ifeq WebApiMethod 'HttpGet'}}
    {{#ifeq Type 'GetColl'}}
            {{#if HasFromEntityPropertiesParameters}}return {{/if}}new WebApiGet<{{BaseReturnType}}CollectionResult, {{BaseReturnType}}Collection, {{BaseReturnType}}>(this, () => _manager.{{Name}}Async({{#each Parameters}}{{#unless @first}}, {{/unless}}{{#if IsPagingArgs}}WebApiQueryString.CreatePagingArgs(this){{else}}{{ArgumentName}}{{/if}}{{/each}}),
    {{else}}
            {{#if HasFromEntityPropertiesParameters}}return {{/if}}new WebApiGet<{{OperationReturnType}}>(this, () => _manager.{{Name}}Async({{#each Parameters}}{{#unless @first}}, {{/unless}}{{#if IsValueArg}}WebApiActionBase.Value({{ArgumentName}}){{else}}{{#if IsPagingArgs}}WebApiQueryString.CreatePagingArgs(this){{else}}{{ArgumentName}}{{/if}}{{/if}}{{/each}}),
    {{/ifeq}}
  {{/ifeq}}
  {{#ifeq WebApiMethod 'HttpPost'}}
            {{#if HasFromEntityPropertiesParameters}}return {{/if}}new WebApiPost{{#if HasReturnValue}}<{{OperationReturnType}}>{{/if}}(this, () => _manager.{{Name}}Async({{#each Parameters}}{{#unless @first}}, {{/unless}}{{#if IsValueArg}}WebApiActionBase.Value({{ArgumentName}}){{else}}{{#if IsPagingArgs}}WebApiQueryString.CreatePagingArgs(this){{else}}{{ArgumentName}}{{/if}}{{/if}}{{/each}}),
  {{/ifeq}}
  {{#ifeq WebApiMethod 'HttpPut'}}
            {{#if HasFromEntityPropertiesParameters}}return {{/if}}new WebApiPut{{#if HasReturnValue}}<{{OperationReturnType}}>{{/if}}(this, () => _manager.{{Name}}Async({{#each Parameters}}{{#unless @first}}, {{/unless}}{{#if IsValueArg}}WebApiActionBase.Value({{ArgumentName}}){{else}}{{#if IsPagingArgs}}WebApiQueryString.CreatePagingArgs(this){{else}}{{ArgumentName}}{{/if}}{{/if}}{{/each}}),
  {{/ifeq}}
  {{#ifeq WebApiMethod 'HttpPatch'}}
            {{#if HasFromEntityPropertiesParameters}}return {{/if}}new WebApiPatch{{#if HasReturnValue}}<{{OperationReturnType}}>{{/if}}(this, value, () => {{PatchGetVariable}}.{{PatchGetOperation}}Async({{#each ValueLessParameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}}), (__value) => {{PatchUpdateVariable}}.{{PatchUpdateOperation}}Async(__value{{#each ValueLessParameters}}, {{ArgumentName}}{{/each}}),
  {{/ifeq}}
  {{#ifeq WebApiMethod 'HttpDelete'}}
            {{#if HasFromEntityPropertiesParameters}}return {{/if}}new WebApiDelete{{#if HasReturnValue}}<{{OperationReturnType}}>{{/if}}(this, () => _manager.{{Name}}Async({{#each Parameters}}{{#unless @first}}, {{/unless}}{{#if IsValueArg}}WebApiActionBase.Value({{ArgumentName}}){{else}}{{#if IsPagingArgs}}WebApiQueryString.CreatePagingArgs(this){{else}}{{ArgumentName}}{{/if}}{{/if}}{{/each}}),
  {{/ifeq}}
                operationType: OperationType.{{ManagerOperationType}}, statusCode: HttpStatusCode.{{WebApiStatus}}{{#if HasReturnValue}}, alternateStatusCode: {{#ifeq WebApiAlternateStatus 'ThrowException'}}null{{else}}HttpStatusCode.{{WebApiAlternateStatus}}{{/ifeq}}{{/if}}{{#ifval WebApiLocation}}, locationUri: ({{#if HasReturnValue}}r{{/if}}) => new Uri($"{{WebApiLocation}}", UriKind.Relative){{/ifval}});
  {{#if HasFromEntityPropertiesParameters}} 
        }
  {{/if}}
{{/each}}
    }
}

#pragma warning restore
#nullable restore
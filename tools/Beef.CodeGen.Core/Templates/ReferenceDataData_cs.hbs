/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Text;
{{#if Root.CancellationToken}}
using System.Threading;
{{/if}}
using System.Threading.Tasks;
{{#if RefData.UsesCosmos}}
using Microsoft.Azure.Cosmos;
{{/if}}
using CoreEx.Business;
{{#if RefData.UsesCosmos}}
using Beef.Data.Cosmos;
  {{#ifval Root.CosmosUsingNamespace}}
using {{Root.CosmosUsingNamespace}};
  {{/ifval}}
{{/if}}
{{#if RefData.UsesDatabase}}
using CoreEx.Data.Database;
  {{#ifval Root.DatabaseUsingNamespace}}
using {{Root.DatabaseUsingNamespace}};
  {{/ifval}}
{{/if}}
{{#if RefData.UsesEntityFramework}}
  {{#unless RefData.UsesDatabase}}
using CoreEx.Database;
  {{/unless}}
using CoreEx.EntityFrameworkCore;
  {{#ifval Root.EntityFrameworkUsingNamespace}}
using {{Root.EntityFrameworkUsingNamespace}};
  {{/ifval}}
{{/if}}
{{#if RefData.UsesOData}}
using Beef.Data.OData;
  {{#ifval Root.ODataUsingNamespace}}
using {{Root.ODataUsingNamespace}};
  {{/ifval}}
{{/if}}
using CoreEx.Mapping;
using CoreEx.Mapping.Converters;
using CoreEx;
{{#ifval Root.RefDataNamespace}}
using RefDataNamespace = {{Root.RefDataNamespace}};
{{/ifval}}
{{#ifval Root.RefDataBusNamespace}}
using RefDataBusNamespace = {{Root.RefDataBusNamespace}};
{{/ifval}}

namespace {{Root.NamespaceBusiness}}.Data
{
    /// <summary>
    /// Provides the <b>ReferenceData</b> data access.
    /// </summary>
    public partial class ReferenceDataData : IReferenceDataData
    {
{{#each RefData.DataCtorParameters}}
        private readonly {{Type}} {{PrivateName}};
  {{#if @last}}

  {{/if}}
{{/each}}
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataData"/> class.
        /// </summary>
{{#each RefData.DataCtorParameters}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
{{/each}}
        public ReferenceDataData({{#each RefData.DataCtorParameters}}{{#unless @first}}, {{/unless}}{{Type}} {{ArgumentName}}{{/each}})
            { {{#each RefData.DataCtorParameters}}{{PrivateName}} = {{ArgumentName}} ?? throw new ArgumentNullException(nameof({{ArgumentName}})); {{/each}}ReferenceDataDataCtor(); }

        partial void ReferenceDataDataCtor(); // Enables additional functionality to be added to the constructor.

{{#each RefDataEntities}}
  {{#unless @first}}

  {{/unless}}
        /// <inheritdoc/>
        public {{#ifeq AutoImplement 'Database'}}async {{/ifeq}}Task<{{RefDataQualifiedEntityCollectionName}}> {{Name}}GetAllAsync({{#if Root.CancellatioToken}}CancellationToken cancellationToken = default{{/if}})
  {{#ifeq AutoImplement 'Database'}}
        {
            var __coll = new {{RefDataQualifiedEntityCollectionName}}();
            await DataInvoker.Current.InvokeAsync(this, async {{#if Root.CancellationToken}}ct{{else}}_{{/if}} => 
            {
                await _db.GetRefDataAsync<{{RefDataQualifiedEntityCollectionName}}, {{RefDataQualifiedEntityName}}>(__coll, "[{{DatabaseSchema}}].[sp{{Name}}GetAll]", "{{Name}}Id"{{#ifeq CoreProperties.Count 0}});{{else}}, additionalProperties: (dr, item, fields) =>{{/ifeq}}
    {{#ifne CoreProperties.Count 0}}
                {
      {{#each CoreProperties}}
                    item.{{DataMapperPropertyName}} = {{#ifval RefDataConverterCode}}{{{RefDataConverterCode}}}{{/ifval}}dr.GetValue<{{{DataReaderType}}}>("{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}"){{#ifval RefDataConverterCode}}){{/ifval}};
      {{/each}}
                }{{#if Root.CancellationToken}}, ct{{/if}});
    {{/ifne}}
            }, BusinessInvokerArgs.TransactionSuppress{{#if Root.CancellationToken}}, cancellationToken{{/if}}).ConfigureAwait(false);

            return __coll;
        }
  {{/ifeq}}
  {{#ifeq AutoImplement 'EntityFramework'}}
            => DataInvoker.Current.InvokeAsync(this, {{#if Root.CancellationToken}}ct{{else}}_{{/if}} => _ef.Query<{{RefDataQualifiedEntityName}}, {{EntityFrameworkModel}}>().SelectQueryAsync<{{RefDataQualifiedEntityCollectionName}}>({{#if Root.CancellationToken}}ct{{/if}}), BusinessInvokerArgs.TransactionSuppress{{#if Root.CancellationToken}}, cancellationToken{{/if}});
  {{/ifeq}}
  {{#ifeq AutoImplement 'Cosmos'}}
            await DataInvoker.Current.InvokeAsync(this, async {{#if Root.CancellationToken}}ct{{else}}_{{/if}} => { _cosmos.ValueQuery<{{RefDataQualifiedEntityName}}, {{CosmosModel}}>(CosmosDbArgs.Create(_mapper, "{{CosmosContainerId}}", new Beef.Entities.PagingArgs().OverrideTake(100000))).SelectQuery(__coll); await Task.CompletedTask.ConfigureAwait(false); }{{#if Root.CancellationToken}}, cancellationToken{{/if}}).ConfigureAwait(false);
  {{/ifeq}}
  {{#ifeq AutoImplement 'None'}}
            await DataInvoker.Current.InvokeAsync(this, async {{#if Root.CancellationToken}}ct{{else}}_{{/if}} => await {{Name}}GetAll_OnImplementationAsync(__coll{{#if Root.CancellationToken}}, ct{{/if}}).ConfigureAwait(false){{#if Root.CancellationToken}}, cancellationToken{{/if}}).ConfigureAwait(false);
  {{/ifeq}}
{{/each}}
{{#each RefDataEntities}}
  {{#ifeq AutoImplement 'EntityFramework'}}
    {{#unless EntityFrameworkCustomMapper}}

        /// <summary>
        /// Provides the {{see-comments RefDataQualifiedEntityName}} and Entity Framework {{{see-comments EntityFrameworkModel}}} <i>AutoMapper</i> mapping.
        /// </summary>
        public partial class {{Name}}MapperProfile : AutoMapper.Profile
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="{{Name}}MapperProfile"/> class.
            /// </summary>
            public {{Name}}MapperProfile()
            {
                var d2s = CreateMap<{{EntityFrameworkModel}}, {{RefDataQualifiedEntityName}}>();
                d2s.ForMember(s => s.Id, o => o.MapFrom(d => d.{{Name}}Id));
          {{#each CoreProperties}}
                d2s.ForMember(s => s.{{DataMapperPropertyName}}, o => o.{{#ifval DataConverterName}}ConvertUsing({{DataConverterName}}.ToSrce, {{else}}MapFrom({{/ifval}}d => d.{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}));
          {{/each}}
                d2s.ForMember(s => s.ETag, o => o.ConvertUsing(AutoMapperStringToBase64Converter.Default.ToSource, d => d.RowVersion));

                {{Name}}MapperProfileCtor(d2s);
            }

            partial void {{Name}}MapperProfileCtor(AutoMapper.IMappingExpression<{{EntityFrameworkModel}}, {{RefDataQualifiedEntityName}}> d2s); // Enables the constructor to be extended.
        }
    {{/unless}}
  {{/ifeq}}
  {{#ifeq AutoImplement 'Cosmos'}}
    {{#unless CosmosCustomMapper}}

        /// <summary>
        /// Provides the {{see-comments RefDataQualifiedEntityName}} and Entity Framework {{{see-comments CosmosModel}}} <i>AutoMapper</i> mapping.
        /// </summary>
        public partial class {{Name}}MapperProfile : AutoMapper.Profile
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="{{Name}}MapperProfile"/> class.
            /// </summary>
            public {{Name}}MapperProfile()
            {
                var d2s = CreateMap<{{CosmosModel}}, {{RefDataQualifiedEntityName}}>();
          {{#each CoreProperties}}
                d2s.ForMember(s => s.{{DataMapperPropertyName}}, o => o.{{#ifval DataConverterName}}ConvertUsing({{DataConverterName}}.ToSrce, {{else}}MapFrom({{/ifval}}d => d.{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}));
          {{/each}}

                {{Name}}MapperProfileCtor(d2s);
            }

            partial void {{Name}}MapperProfileCtor(AutoMapper.IMappingExpression<{{CosmosModel}}, {{RefDataQualifiedEntityName}}> d2s); // Enables the constructor to be extended.
        }
    {{/unless}}
  {{/ifeq}}
{{/each}}
    }
}

#pragma warning restore
#nullable restore
{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options
#pragma warning disable CA2227, CA1819 // Collection/Array properties should be read only; ignored, as acceptable for a DTO.

{{! ===== Using ===== }}
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Beef.Entities;
using Beef.RefData;
{{#ifeq JsonSerializer 'Newtonsoft'}}
using Newtonsoft.Json;
{{/ifeq}}
{{#if Root.UsingNamespace1}}
using {{Root.UsingNamespace1}};
{{/if}}
{{#if Root.UsingNamespace2}}
using {{Root.UsingNamespace2}};
{{/if}}
{{#if Root.UsingNamespace3}}
using {{Root.UsingNamespace3}};
{{/if}}
{{#ifeq Root.EntityUsing 'Common' 'All'}}
  {{#ifeq EntityScope 'Business'}}
using {{Root.NamespaceCommon}}.Entities;
  {{/ifeq}}
{{/ifeq}}
{{#ifval Root.RefDataNamespace}}
using RefDataNamespace = {{Root.RefDataNamespace}};
{{/ifval}}
{{#ifval Root.RefDataBusNamespace}}
using RefDataBusNamespace = {{Root.RefDataBusNamespace}};
{{/ifval}}

{{! ===== Class ===== }}
namespace {{#ifeq Root.EntityScope 'Common'}}{{Root.NamespaceCommon}}{{else}}{{Root.NamespaceBusiness}}{{/ifeq}}.Entities{{#ifval Namespace}}.{{Namespace}}{{/ifval}}
{
    /// <summary>
    /// Represents the {{{Text}}} entity.
    /// </summary>
{{#ifeq JsonSerializer 'Newtonsoft'}}
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
{{/ifeq}}
{{#ifval RefDataType}}
    [ReferenceDataInterface(typeof(IReferenceData))]
{{/ifval}}
    public {{#if Abstract}}abstract {{/if}}partial class {{{EntityName}}} : {{{EntityInherits}}}{{#ifval EntityImplements}}, {{{EntityImplements}}}{{/ifval}}
    {
{{! ===== Constants ===== }}
{{#each Consts}}
  {{#if @first}}
        #region Constants

  {{/if}}
        /// <summary>
        /// {{{SummaryText}}}
        /// </summary>
        public const {{Parent.ConstType}} {{Name}} = {{{FormattedValue}}};
  {{#if @last}}

        #endregion

  {{/if}}
{{/each}}
{{! ===== Privates ===== }}
{{#each PrivateProperties}}
  {{#if @first}}
        #region Privates

  {{/if}}
        private {{{PrivateType}}} {{PropertyPrivateName}}{{#ifval Default}} = {{Default}}{{/ifval}};
  {{#ifval RefDataType}}
    {{#unless RefDataList}}
      {{#if RefDataText}}
        private string? {{PrivateName}}Text;
      {{/if}}
    {{/unless}}
  {{/ifval}}
  {{#if @last}}

        #endregion

  {{/if}}
{{/each}}
{{! ===== Properties ===== }}
{{#each CoreProperties}}
  {{#if @first}}
        #region Properties
  {{/if}}
  {{#ifval RefDataType}}

        /// <summary>
        /// {{{SummaryRefDataSid}}}
        /// </summary>
    {{#ifeq Root.JsonSerializer 'Newtonsoft'}}
      {{#unless SerializationIgnore}}
        [JsonProperty("{{JsonName}}", DefaultValueHandling = {{#if SerializationEmitDefault}}DefaultValueHandling.Include{{else}}DefaultValueHandling.Ignore{{/if}})]
      {{/unless}}
    {{/ifeq}}
    {{#ifval DisplayName}}
        [Display(Name="{{DisplayName}}")]
    {{/ifval}}
        public {{{PrivateType}}} {{PropertyName}}
        {
            get => {{PropertyPrivateName}};
            set => SetValue(ref {{PropertyPrivateName}}, value, {{lower Immutable}}, {{#if RefDataList}}false{{else}}{{ifeq RefDataType 'string'}}StringTrim.UseDefault, StringTransform.UseDefault{{else}}false{{/ifeq}}{{/if}}, nameof({{Name}}));
        }
    {{#unless SerializationIgnore}}
      {{#unless RefDataList}}
        {{#if RefDataText}}

        /// <summary>
        /// {{{SummaryRefDataText}}}
        /// </summary>
        {{#ifeq Root.JsonSerializer 'Newtonsoft'}}
        [JsonProperty("{{JsonName}}Text", DefaultValueHandling = DefaultValueHandling.Ignore)]
        {{/ifeq}}
        public string? {{Name}}Text { get => {{PrivateName}}Text ?? GetRefDataText(() => {{Name}}); set => {{PrivateName}}Text = value; }
        {{/if}}
      {{/unless}}
    {{/unless}}

        /// <summary>
        /// {{{SummaryText}}}
        /// </summary>
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    {{#ifval DisplayName}}
        [Display(Name="{{DisplayName}}")]
    {{/ifval}}
    {{#ifval Annotation1}}
        {{Annotation1}}
    {{/ifval}}
    {{#ifval Annotation2}}
        {{Annotation2}}
    {{/ifval}}
    {{#ifval Annotation3}}
        {{Annotation3}}
    {{/ifval}}
    {{#if RefDataList}}
        public ReferenceDataSidList<{{{Type}}}, {{RefDataType}}>? {{Name}}
        {
            get => new ReferenceDataSidList<{{{Type}}}, {{RefDataType}}>(ref {{PropertyPrivateName}});
            set => SetValue(ref {{PropertyPrivateName}}, value?.ToSidList(), {{lower Immutable}}, false, nameof({{Name}}){{#ifval SecondaryPropertyChanged}}, {{SecondaryPropertyChanged}}{{/ifval}});
        }
    {{else}}
        public {{{PropertyType}}} {{Name}}
        {
            get => {{PropertyPrivateName}};
            set => SetValue(ref {{PropertyPrivateName}}, value, {{lower Immutable}}, false, nameof({{Name}}){{#ifval SecondaryPropertyChanged}}, {{SecondaryPropertyChanged}}{{/ifval}}); 
        }
    {{/if}}
  {{else}}

        /// <summary>
        /// {{{SummaryText}}}
        /// </summary>
    {{#ifeq Root.JsonSerializer 'Newtonsoft'}}
      {{#unless SerializationIgnore}}
        [JsonProperty("{{JsonName}}", DefaultValueHandling = {{#if SerializationEmitDefault}}DefaultValueHandling.Include{{else}}DefaultValueHandling.Ignore{{/if}})]
      {{/unless}}
    {{/ifeq}}
    {{#ifval DisplayName}}
        [Display(Name="{{DisplayName}}")]
    {{/ifval}}
    {{#ifval WebApiQueryStringConverter}}
        [Beef.WebApi.WebApiArgFormatter(typeof({{WebApiQueryStringConverter}}))]
    {{/ifval}}
    {{#ifval Annotation1}}
        {{Annotation1}}
    {{/ifval}}
    {{#ifval Annotation2}}
        {{Annotation2}}
    {{/ifval}}
    {{#ifval Annotation3}}
        {{Annotation3}}
    {{/ifval}}
        public {{{PropertyType}}} {{Name}}
        {
  {{#if RefDataMapping}}
            get => GetMapping<string>(nameof({{Name}}));
            set { var _{{PropertyPrivateName}} = GetMapping<{{{PropertyType}}}>(nameof({{Name}})) ?? default; SetValue(ref _{{PropertyPrivateName}}, value, {{lower Immutable}}, {{#if RefDataList}}false{{else}}{{ifeq Type 'string'}}StringTrim.UseDefault, StringTransform.UseDefault{{else}}false{{/ifeq}}{{/if}}, nameof({{Name}}{{#ifval SecondaryPropertyChanged}}, SecondaryPropertyChanged{{/ifval}})); SetMapping(nameof({{Name}}), _{{PropertyPrivateName}}!); }
  {{else}}
            get => {{#if AutoCreate}}GetAutoValue(ref {{/if}}{{PropertyPrivateName}}{{#if AutoCreate}}){{/if}};
            set => SetValue(ref {{PropertyPrivateName}}, value, {{lower Immutable}}, {{#ifeq Type 'string'}}StringTrim.{{StringTrim}}, StringTransform.{{StringTransform}}{{else}}{{#ifeq Type 'DateTime'}}DateTimeTransform.{{DateTimeTransform}}{{else}}{{lower BubblePropertyChanged}}{{/ifeq}}{{/ifeq}}, nameof({{Name}}){{#ifval SecondaryPropertyChanged}}, {{SecondaryPropertyChanged}}{{/ifval}});
  {{/if}}
        }
  {{/ifval}}
  {{#if @last}}

        #endregion

  {{/if}}
{{/each}}
{{! ===== IChangeTracking ===== }}
{{#ifne EntityProperties.Count 0}}
        #region IChangeTracking

        /// <summary>
        /// Resets the entity state to unchanged by accepting the changes (resets <see cref="EntityBase.ChangeTracking"/>).
        /// </summary>
        /// <remarks>Ends and commits the entity changes (see <see cref="EntityBase.EndEdit"/>).</remarks>
        public override void AcceptChanges()
        {
{{#each EntityProperties}}
            {{Name}}?.AcceptChanges();
{{/each}}
            base.AcceptChanges();
        }

        /// <summary>
        /// Determines that until <see cref="AcceptChanges"/> is invoked property changes are to be logged (see <see cref="EntityBase.ChangeTracking"/>).
        /// </summary>
        public override void TrackChanges()
        {
{{#each EntityProperties}}
            {{Name}}?.TrackChanges();
{{/each}}
            base.TrackChanges();
        }

        #endregion

{{/ifne}}
{{! ===== UniqueKey ===== }}
{{#unless RefDataType}}
  {{#ifne UniqueKeyProperties.Count 0}}
        #region IUniqueKey

        /// <summary>
        /// Indicates whether the {{{EntityNameSeeComments}}} has a <see cref="UniqueKey"/> value.
        /// </summary>
        public override bool HasUniqueKey => true;
        
        /// <summary>
        /// Gets the list of property names that represent the unique key.
        /// </summary>
        public override string[] UniqueKeyProperties => new string[] { {{#each UniqueKeyProperties}}{{#unless @first}}, {{/unless}}nameof({{PropertyName}}){{/each}} };

        /// <summary>
        /// Creates the <see cref="UniqueKey"/>.
        /// </summary>
        /// <returns>The <see cref="Beef.Entities.UniqueKey"/>.</returns>
  {{#each UniqueKeyProperties}}
        /// <param name="{{ArgumentName}}">The {{{PropertyNameSeeComments}}}.</param>
  {{/each}}
        public static UniqueKey CreateUniqueKey({{#each UniqueKeyProperties}}{{#unless @first}}, {{/unless}}{{{PropertyType}}} {{PropertyArgumentName}}{{/each}}) => new UniqueKey({{#each UniqueKeyProperties}}{{#unless @first}}, {{/unless}}{{PropertyArgumentName}}{{/each}});

        /// <summary>
        /// Gets the <see cref="UniqueKey"/> (consists of the following property(s): {{#each UniqueKeyProperties}}{{#unless @first}}, {{/unless}}{{{PropertyNameSeeComments}}}{{/each}}).
        /// </summary>
        public override UniqueKey UniqueKey => new UniqueKey({{#each UniqueKeyProperties}}{{#unless @first}}, {{/unless}}{{PropertyName}}{{/each}});

        #endregion

  {{/ifne}}
{{/unless}}
{{! ===== Operator ===== }}
{{#ifval RefDataType}}
  {{#unless Abstract}}
        #region Operator

        /// <summary>
        /// An implicit cast from an <b>Id</b> to a {{{EntityNameSeeComments}}}.
        /// </summary>
        /// <param name="id">The <b>Id</b>.</param>
        /// <returns>The corresponding {{{EntityNameSeeComments}}}.</returns>
        [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "Improves useability")]
        public static implicit operator {{{EntityName}}}({{RefDataType}} id) => ConvertFromId<{{{EntityName}}}>(id);

        /// <summary>
        /// An implicit cast from a <b>Code</b> to a {{{EntityNameSeeComments}}}.
        /// </summary>
        /// <param name="code">The <b>Code</b>.</param>
        /// <returns>The corresponding {{{EntityNameSeeComments}}}.</returns>
        [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "Improves useability")]
        public static implicit operator {{{EntityName}}}(string? code) => ConvertFromCode<{{{EntityName}}}>(code);

        #endregion
    
  {{/unless}}
{{/ifval}}
{{! ===== IEquatable (although the code generated looks a little funky this is required to function correctly.) ===== }}
{{#unless RefDataType}}
        #region IEquatable

        /// <summary>
        /// Determines whether the specified object is equal to the current object by comparing the values of all the properties.
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public override bool Equals(object? obj) => obj is {{{EntityName}}} val && Equals(val);

        /// <summary>
        /// Determines whether the specified {{{EntityNameSeeComments}}} is equal to the current {{{EntityNameSeeComments}}} by comparing the values of all the properties.
        /// </summary>
        /// <param name="value">The {{{EntityNameSeeComments}}} to compare with the current {{{EntityNameSeeComments}}}.</param>
        /// <returns><c>true</c> if the specified {{{EntityNameSeeComments}}} is equal to the current {{{EntityNameSeeComments}}}; otherwise, <c>false</c>.</returns>
        public bool Equals({{EntityName}}? value)
        {
            if (value == null)
                return false;
            else if (ReferenceEquals(value, this))
                return true;

            return base.Equals((object)value){{#ifeq CoreProperties.Count 0}};{{/ifeq}}
  {{#each CoreProperties}}
                && Equals({{PropertyName}}, value.{{PropertyName}}){{#if @last}};{{/if}}
  {{/each}}
        }

        /// <summary>
        /// Compares two {{{EntityNameSeeComments}}} types for equality.
        /// </summary>
        /// <param name="a">{{{EntityNameSeeComments}}} A.</param>
        /// <param name="b">{{{EntityNameSeeComments}}} B.</param>
        /// <returns><c>true</c> indicates equal; otherwise, <c>false</c> for not equal.</returns>
        public static bool operator == ({{{EntityName}}}? a, {{{EntityName}}}? b) => Equals(a, b);

        /// <summary>
        /// Compares two {{{EntityNameSeeComments}}} types for non-equality.
        /// </summary>
        /// <param name="a">{{{EntityNameSeeComments}}} A.</param>
        /// <param name="b">{{{EntityNameSeeComments}}} B.</param>
        /// <returns><c>true</c> indicates not equal; otherwise, <c>false</c> for equal.</returns>
        public static bool operator != ({{{EntityName}}}? a, {{{EntityName}}}? b) => !Equals(a, b);

        /// <summary>
        /// Returns the hash code for the {{{EntityNameSeeComments}}}.
        /// </summary>
        /// <returns>The hash code for the {{{EntityNameSeeComments}}}.</returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
  {{#each CoreProperties}}
            hash.Add({{PropertyName}});
  {{/each}}
            return base.GetHashCode() ^ hash.ToHashCode();
        }
    
        #endregion

{{/unless}}
{{! ===== ICopyFrom ===== }}
        #region ICopyFrom
    
        /// <summary>
        /// Performs a copy from another {{{EntityNameSeeComments}}} updating this instance.
        /// </summary>
        /// <param name="from">The {{{EntityNameSeeComments}}} to copy from.</param>
        public override void CopyFrom(object from)
        {
            var fval = ValidateCopyFromType<{{{EntityName}}}>(from);
            CopyFrom(fval);
        }
        
        /// <summary>
        /// Performs a copy from another {{{EntityNameSeeComments}}} updating this instance.
        /// </summary>
        /// <param name="from">The {{{EntityNameSeeComments}}} to copy from.</param>
        public void CopyFrom({{{EntityName}}} from)
        {
            if (from == null)
                throw new ArgumentNullException(nameof(from));

            CopyFrom(({{EntityInherits}})from);
  {{#each CoreProperties}}
    {{#if IsEntity}}
            {{PropertyName}} = CopyOrClone(from.{{PropertyName}}, {{PropertyName}});
    {{else}}
            {{PropertyName}} = from.{{PropertyName}};
    {{/if}}
  {{/each}}

            OnAfterCopyFrom(from);
        }

        #endregion

{{! ===== ICloneable ===== }}
{{#unless Abstract}}
        #region ICloneable
        
        /// <summary>
        /// Creates a deep copy of the {{{EntityNameSeeComments}}}.
        /// </summary>
        /// <returns>A deep copy of the {{{EntityNameSeeComments}}}.</returns>
        public override object Clone()
        {
            var clone = new {{{EntityName}}}();
            clone.CopyFrom(this);
            return clone;
        }
        
        #endregion
        
{{/unless}}
{{! ===== ICleanUp ===== }}
        #region ICleanUp

        /// <summary>
        /// Performs a clean-up of the {{{EntityNameSeeComments}}} resetting property values as appropriate to ensure a basic level of data consistency.
        /// </summary>
        public override void CleanUp()
        {
            base.CleanUp();
{{#each CoreProperties}}
  {{#unless ExcludeCleanUp}}
    {{#unless Immutable}}
            {{PropertyName}} = Cleaner.Clean({{PropertyName}}{{#ifeq Type 'DateTime'}}, DateTimeTransform.{{DateTimeTransform}}{{/ifeq}}{{#ifeq Type 'string'}}, StringTrim.{{StringTrim}}, StringTransform.{{StringTransform}}{{/ifeq}});
    {{/unless}}
  {{/unless}}
{{/each}}

            OnAfterCleanUp();
        }

        /// <summary>
        /// Indicates whether considered initial; i.e. all properties have their initial value.
        /// </summary>
        /// <returns><c>true</c> indicates is initial; otherwise, <c>false</c>.</returns>
        public override bool IsInitial
        {
            get
            {
{{#ifnull IsInitialOverride}}
  {{#ifne EntityInherits 'EntityBase'}}
                if (!base.IsInitial)
                    return false;

  {{/ifne}}
  {{#each CoreProperties}}
    {{#unless ExcludeCleanUp}}
                {{#if @first}}return{{else}}    &&{{/if}} Cleaner.IsInitial({{PropertyName}}){{#if @last}};{{/if}}
    {{/unless}}
  {{/each}}
  {{#ifeq CoreProperties.Count 0}}
                return true;
  {{/ifeq}}
{{else}}
                return {{IsInitialOverride}};
{{/ifnull}}
            }
        }

        #endregion

{{! ===== RefData ===== }}
{{#ifval RefDataType}}
  {{#ifval RefDataStringFormat}}
        #region RefData

        /// <summary>
        /// Overrides the default <see cref="ReferenceDataBase.StringFormat"/>.
        /// </summary>
        /// <remarks>The format value is '{{{RefDataStringFormat}}}'.</remarks>
        public override string StringFormat => "{{RefDataStringFormat}}";

        #endregion

  {{/ifval}}
{{/ifval}}
{{! ===== PartialMethods ===== }}
        #region PartialMethods
      
        partial void OnAfterCleanUp();

        partial void OnAfterCopyFrom({{{EntityName}}} from);

        #endregion
    }
{{! ===== Collection ===== }}
{{#if Collection}}

    #region Collection

    /// <summary>
    /// Represents the {{{EntityNameSeeComments}}} collection.
    /// </summary>
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Tightly coupled; OK.")]
    public partial class {{{EntityCollectionName}}} : {{{EntityCollectionInherits}}}
    {
        /// <summary>
        /// Initializes a new instance of the {{{seecomments EntityCollectionName}}} class.
        /// </summary>
        public {{{EntityCollectionName}}}(){{#ifne RefDataSortOrder 'SortOrder'}} : base(ReferenceDataSortOrder.{{RefDataSortOrder}}){{/ifne}} { }

        /// <summary>
        /// Initializes a new instance of the {{{seecomments EntityCollectionName}}} class with an entities range.
        /// </summary>
        /// <param name="entities">The {{{EntityNameSeeComments}}} entities.</param>
        public {{{EntityCollectionName}}}(IEnumerable<{{{EntityName}}}> entities){{#ifne RefDataSortOrder 'SortOrder'}} : this(){{/ifne}} => AddRange(entities);
  {{#if CollectionKeyed}}

        /// <summary>
        /// Gets the key ({{{EntityNameSeeComments}}} <see cref="IUniqueKey.UniqueKey"/>) for the item.
        /// </summary>
        protected override UniqueKey GetKeyForItem({{{EntityName}}} entity) => entity.UniqueKey;
  {{/if}}
  {{#ifnull RefDataType}}

        /// <summary>
        /// Creates a deep copy of the {{{seecomments EntityCollectionName}}}.
        /// </summary>
        /// <returns>A deep copy of the {{{seecomments EntityCollectionName}}}.</returns>
        public override object Clone()
        {
            var clone = new {{{EntityCollectionName}}}();
            foreach (var item in this)
            {
                clone.Add(({{EntityName}})item.Clone());
            }
                
            return clone;
        }
  {{/ifnull}}
  {{#if CollectionResult}}

        /// <summary>
        /// An implicit cast from the {{{seecomments EntityCollectionResultName}}} to a corresponding {{{seecomments EntityCollectionName}}}.
        /// </summary>
        /// <param name="result">The {{{seecomments EntityCollectionResultName}}}.</param>
        /// <returns>The corresponding {{{seecomments EntityCollectionName}}}.</returns>
        [SuppressMessage("Usage", "CA2225:Operator overloads have named alternates", Justification = "Improves useability")]
        public static implicit operator {{{EntityCollectionName}}}({{{EntityCollectionResultName}}} result) => result?.Result!;
  {{/if}}
    }

    #endregion  
{{/if}}
{{! ===== CollectionResult ===== }}
{{#if CollectionResult}}

    #region CollectionResult

    /// <summary>
    /// Represents the {{{EntityNameSeeComments}}} collection result.
    /// </summary>
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Tightly coupled; OK.")]
    public class {{{EntityCollectionResultName}}} : {{{CollectionResultInherits}}}
    {
        /// <summary>
        /// Initializes a new instance of the {{{seecomments EntityCollectionResultName}}} class.
        /// </summary>
        public {{{EntityCollectionResultName}}}() { }
        
        /// <summary>
        /// Initializes a new instance of the {{{seecomments EntityCollectionResultName}}} class with <paramref name="paging"/>.
        /// </summary>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        public {{{EntityCollectionResultName}}}(PagingArgs? paging) : base(paging) { }
        
        /// <summary>
        /// Initializes a new instance of the {{{seecomments EntityCollectionResultName}}} class with a <paramref name="collection"/> of items to add.
        /// </summary>
        /// <param name="collection">A collection containing items to add.</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        public {{{EntityCollectionResultName}}}(IEnumerable<{{{EntityName}}}> collection, PagingArgs? paging = null) : base(paging) => Result.AddRange(collection);
        
        /// <summary>
        /// Creates a deep copy of the {{{seecomments EntityCollectionResultName}}}.
        /// </summary>
        /// <returns>A deep copy of the {{{seecomments EntityCollectionResultName}}}.</returns>
        public override object Clone()
        {
            var clone = new {{{EntityCollectionResultName}}}();
            clone.CopyFrom(this);
            return clone;
        }
    }

    #endregion
{{/if}}
}

#pragma warning restore CA2227, CA1819
#pragma warning restore IDE0005
#nullable restore
{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
/*
 * This file is automatically generated; any changes will be lost.
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Beef.Entities;
using Beef.WebApi;
using Newtonsoft.Json.Linq;
using {{Root.Company}}.{{Root.AppName}}.Common.Entities;
{{#ifval Root.RefDataNamespace}}
using RefDataNamespace = {{Root.RefDataNamespace}};
{{/ifval}}

namespace {{Root.Company}}.{{Root.AppName}}.Common.Agents
{
    /// <summary>
    /// Defines the {{{EntityNameSeeComments}}} Web API agent.
    /// </summary>
    public partial interface I{{Name}}Agent
    {
{{#each WebApiAgentOperations}}
  {{#unless @first}}

  {{/unless}}
        /// <summary>
        /// {{{SummaryText}}}
        /// </summary>
  {{#ifeq Type 'Patch'}}
        /// <param name="patchOption">The <see cref="WebApiPatchOption"/>.</param>
  {{/ifeq}}
  {{#each Parameters}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
  {{/each}}
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        {{{AgentOperationTaskReturnType}}} {{Name}}Async({{#ifeq Type 'Patch'}}WebApiPatchOption patchOption, {{/ifeq}}{{#each Parameters}}{{WebApiAgentParameterType}} {{ArgumentName}}{{#if IsPagingArgs}} = null{{/if}}, {{/each}}WebApiRequestOptions? requestOptions = null);
{{/each}}
    }

    /// <summary>
    /// Provides the {{{EntityNameSeeComments}}} Web API agent.
    /// </summary>
    public partial class {{Name}}Agent : WebApiAgentBase, I{{Name}}Agent
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="{{Name}}Agent"/> class.
        /// </summary>
        /// <param name="args">The <see cref="IWebApiAgentArgs"/>.</param>
        public {{Name}}Agent(IWebApiAgentArgs args) : base(args) { }
{{#each WebApiAgentOperations}}

        /// <summary>
        /// {{{SummaryText}}}
        /// </summary>
  {{#ifeq Type 'Patch'}}
        /// <param name="patchOption">The <see cref="WebApiPatchOption"/>.</param>
  {{/ifeq}}
  {{#each Parameters}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
  {{/each}}
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public {{{AgentOperationTaskReturnType}}} {{Name}}Async({{#ifeq Type 'Patch'}}WebApiPatchOption patchOption, {{/ifeq}}{{#each Parameters}}{{WebApiAgentParameterType}} {{ArgumentName}}{{#if IsPagingArgs}} = null{{/if}}, {{/each}}WebApiRequestOptions? requestOptions = null) =>
  {{#ifeq WebApiMethod 'HttpGet'}}
    {{#ifeq Type 'GetColl'}}
            GetCollectionResultAsync<{{BaseReturnType}}CollectionResult, {{BaseReturnType}}Collection, {{BaseReturnType}}>("{{Parent.WebApiRoutePrefix}}{{#ifval WebApiRoute}}{{#ifne WebApiRoute ''}}/{{WebApiRoute}}{{/ifne}}{{/ifval}}", requestOptions: requestOptions,
    {{else}}
            GetAsync{{#if HasReturnValue}}<{{OperationReturnType}}>{{/if}}("{{Parent.WebApiRoutePrefix}}{{#ifval WebApiRoute}}{{#ifne WebApiRoute ''}}/{{WebApiRoute}}{{/ifne}}{{/ifval}}", requestOptions: requestOptions,
    {{/ifeq}}
  {{/ifeq}}
  {{#ifeq WebApiMethod 'HttpPost'}}
            PostAsync{{#if HasReturnValue}}<{{OperationReturnType}}>{{/if}}("{{Parent.WebApiRoutePrefix}}{{#ifval WebApiRoute}}{{#ifne WebApiRoute ''}}/{{WebApiRoute}}{{/ifne}}{{/ifval}}", {{#if HasValue}}Beef.Check.NotNull(value, nameof(value)), {{/if}}requestOptions: requestOptions,
  {{/ifeq}}
  {{#ifeq WebApiMethod 'HttpPut'}}
            PutAsync{{#if HasReturnValue}}<{{OperationReturnType}}>{{/if}}("{{Parent.WebApiRoutePrefix}}{{#ifval WebApiRoute}}{{#ifne WebApiRoute ''}}/{{WebApiRoute}}{{/ifne}}{{/ifval}}", {{#if HasValue}}Beef.Check.NotNull(value, nameof(value)), {{/if}}requestOptions: requestOptions,
  {{/ifeq}}
  {{#ifeq WebApiMethod 'HttpPatch'}}
            PatchAsync{{#if HasReturnValue}}<{{OperationReturnType}}>{{/if}}("{{Parent.WebApiRoutePrefix}}{{#ifval WebApiRoute}}{{#ifne WebApiRoute ''}}/{{WebApiRoute}}{{/ifne}}{{/ifval}}", patchOption, {{#if HasValue}}Beef.Check.NotNull(value, nameof(value)), {{/if}}requestOptions: requestOptions,
  {{/ifeq}}
  {{#ifeq WebApiMethod 'HttpDelete'}}
            DeleteAsync{{#if HasReturnValue}}<{{OperationReturnType}}>{{/if}}("{{Parent.WebApiRoutePrefix}}{{#ifval WebApiRoute}}{{#ifne WebApiRoute ''}}/{{WebApiRoute}}{{/ifne}}{{/ifval}}", {{/if}}requestOptions: requestOptions,
  {{/ifeq}}
  {{#ifeq ValueLessParameters.Count 0}}
                args: Array.Empty<WebApiArg>());
  {{else}}
                args: new WebApiArg[] { {{#each CoreParameters}}{{#unless @first}}, {{/unless}}new WebApiArg<{{WebApiAgentParameterType}}>("{{ArgumentName}}", {{ArgumentName}}{{#ifval WebApiAgentFrom}}, WebApiArgType.{{WebApiAgentFrom}}{{/ifval}}){{/each}}{{#if Paging}}{{ifne CoreParameters.Count 0}}, {{/ifne}}new WebApiPagingArgsArg("paging", paging){{/if}} });
  {{/ifeq}}
{{/each}}
    }
}

#pragma warning restore IDE0005
#nullable restore
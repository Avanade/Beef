<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef -->
<Template OutputGenDirName="Generated" OutputFileName="Transformers.cs">
  <If Condition="Config.Grpc == true">
    <![CDATA[/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable

using System;
using Beef.Mapper;
using Beef.Mapper.Converters;
using entities = Beef.Demo.Common.Entities;

namespace {{Config.Company}}.{{Config.AppName}}.{{Config.EntityScope}}.Grpc
{
    /// <summary>
    /// Provides entity to gRpc transformations (conversion and/or mapping).
    /// </summary>
    public static class Transformers
    {
        #region Converters
        
        /// <summary>
        /// Converts a <see cref="DateTime"/> to/from a <see cref="DateOnly"/>.
        /// </summary>
        public static CustomConverter<DateTime, DateOnly> DateTimeToDateOnly => new CustomConverter<DateTime, DateOnly>(
            s => new DateOnly { Year = s.Year, Month = s.Month, Day = s.Month },
            d => d == null ? new DateTime(1, 1, 1, 0, 0, 0, DateTimeKind.Unspecified) : new DateTime(d.Year, d.Month, d.Day, 0, 0, 0, DateTimeKind.Unspecified));

        /// <summary>
        /// Converts a <see cref="Nullable{DateTime}"/> to/from a <see cref="DateOnly"/>.
        /// </summary>
        public static CustomConverter<DateTime?, DateOnly> NullableDateTimeToDateOnly => new CustomConverter<DateTime?, DateOnly>(
            s => s == null ? null! : new DateOnly { Year = s.Value.Year, Month = s.Value.Month, Day = s.Value.Month },
            d => d == null ? (DateTime?)null : new DateTime(d.Year, d.Month, d.Day, 0, 0, 0, DateTimeKind.Unspecified));

        /// <summary>
        /// Converts a <see cref="DateTime"/> to/from a <see cref="Google.Protobuf.WellKnownTypes.Timestamp"/>.
        /// </summary>
        public static CustomConverter<DateTime, Google.Protobuf.WellKnownTypes.Timestamp> DateTimeToTimestamp => new CustomConverter<DateTime, Google.Protobuf.WellKnownTypes.Timestamp>(
            s => Google.Protobuf.WellKnownTypes.Timestamp.FromDateTime(s.ToUniversalTime()),
            d => d == null ? DateTime.MinValue : d.ToDateTime());

        /// <summary>
        /// Converts a <see cref="Nullable{DateTime}"/> to/from a <see cref="Google.Protobuf.WellKnownTypes.Timestamp"/>.
        /// </summary>
        public static CustomConverter<DateTime?, Google.Protobuf.WellKnownTypes.Timestamp> NullableDateTimeToTimestamp => new CustomConverter<DateTime?, Google.Protobuf.WellKnownTypes.Timestamp>(
            s => s == null ? null! : Google.Protobuf.WellKnownTypes.Timestamp.FromDateTime(s.Value.ToUniversalTime()),
            d => d == null ? (DateTime?)null : d.ToDateTime());

        /// <summary>
        /// Converts a <see cref="Guid"/> to a <see cref="string"/>.
        /// </summary>
        public static CustomConverter<Guid, string> GuidToStringConverter = new CustomConverter<Guid, string>(
            s => s.ToString(),
            d => d == null ? Guid.Empty : new Guid(d));

        /// <summary>
        /// Converts a <see cref="Nullable{Guid}"/> to a <see cref="string"/>.
        /// </summary>
        public static CustomConverter<Guid?, string> NullableGuidToStringConverter = new CustomConverter<Guid?, string>(
            s => s == null ? null! : s.ToString(),
            d => d == null ? (Guid?)null : new Guid(d));

        /// <summary>
        /// Converts a <see cref="decimal"/> to a <see cref="Decimal"/>.
        /// </summary>
        public static CustomConverter<decimal, Decimal> DecimalToDecimalConverter = new CustomConverter<decimal, Decimal>(
            s => new Decimal { Units = decimal.ToInt64(s), Nanos = decimal.ToInt32((s - decimal.ToInt64(s)) * 1_000_000_000) },
            d => d == null ? 0m : d.Units + d.Nanos / 1_000_000_000);

        /// <summary>
        /// Converts a <see cref="Nullable"/> <see cref="decimal"/> to a <see cref="Decimal"/>.
        /// </summary>
        public static CustomConverter<decimal?, Decimal> NullableDecimalToDecimalConverter = new CustomConverter<decimal?, Decimal>(
            s => s == null ? null! : new Decimal { Units = decimal.ToInt64(s.Value), Nanos = decimal.ToInt32((s.Value - decimal.ToInt64(s.Value)) * 1_000_000_000) },
            d => d == null ? (decimal?)null : d.Units + d.Nanos / 1_000_000_000);
            
        /// <summary>
        /// Converts a <see cref="Beef.Entities.PagingArgs"/> to a <see cref="Beef.Entities.PagingArgs"/>.
        /// </summary>
        public static CustomConverter<Beef.Entities.PagingArgs, PagingArgs> PagingArgsToPagingArgsConverter = new Mapper.Converters.CustomConverter<Beef.Entities.PagingArgs, PagingArgs>(
            s => s == null ? null! : new PagingArgs { Skip = s.Skip, Take = s.Take, GetCount = s.IsGetCount },
            d => d == null ? null! : Beef.Entities.PagingArgs.CreateSkipAndTake(d.Skip, d.Take, d.GetCount));
            
         /// <summary>
        /// Converts a <see cref="Beef.Entities.PagingResult"/> to a <see cref="Beef.Entities.PagingResult"/>.
        /// </summary>
        public static CustomConverter<Beef.Entities.PagingResult?, PagingResult> PagingResultToPagingResultConverter = new Mapper.Converters.CustomConverter<Beef.Entities.PagingResult?, PagingResult>(
            s => s == null ? null! : new PagingResult { Skip = s.Skip, Take = s.Take, TotalCount = s.TotalCount },
            d => d == null ? null! : new Beef.Entities.PagingResult(Beef.Entities.PagingArgs.CreateSkipAndTake(d.Skip, d.Take), d.TotalCount));

        #endregion
        
        #region Mappers

        /// <summary>
        /// Gets the <see cref="Beef.Entities.ChangeLog"/> gRpc mapper.
        /// </summary>
        public static EntityMapper<Beef.Entities.ChangeLog, ChangeLog> ChangeLog => EntityMapper.Create<Beef.Entities.ChangeLog, ChangeLog>()
            .HasProperty(e => e.CreatedBy, g => g.CreatedBy)
            .HasProperty(e => e.CreatedDate, g => g.CreatedDate, p => p.SetConverter(NullableDateTimeToTimestamp))
            .HasProperty(e => e.UpdatedBy, g => g.UpdatedBy)
            .HasProperty(e => e.UpdatedDate, g => g.UpdatedDate, p => p.SetConverter(NullableDateTimeToTimestamp));
]]>
    <Entity Condition="Entity.Grpc == true">
      <![CDATA[
        /// <summary>
        /// Gets the <see cref="entities.{{Entity.Name}}"/> gRpc mapper.
        /// </summary>
        public static EntityMapper<entities.{{Entity.Name}}, {{Entity.Name}}> {{Entity.Name}} => EntityMapper.Create<entities.{{Entity.Name}}, {{Entity.Name}}>()]]>
      <Property Condition="Property.GrpcFieldNo != null">
        <![CDATA[
            .HasProperty(e => e.{{Property.Name}}]]>
        <If Condition="Property.RefDataType != null">
          <![CDATA[Sid]]>
          <If Condition="Property.RefDataList == true"><![CDATA[s]]></If>
        </If>
        <![CDATA[, g => g.{{Property.ArgumentName:ToPascalCase}}]]>
        <Set Name="System.Type" Condition="Property.RefDataType == null" Value="Property.Type" Otherwise="Property.RefDataType" />
        <Switch Value="System.Type">
          <Case Value="'string'" />
          <Case Value="'bool'" />
          <Case Value="'int'" />
          <Case Value="'uint'" />
          <Case Value="'short'" />
          <Case Value="'ushort'" />
          <Case Value="'long'" />
          <Case Value="'ulong'" />
          <Case Value="'DateTime'">
            <If Condition="Property.GrpcConverter == null and Property.GrpcMapper == null">
              <If Condition="Property.DateTimeTransform == 'DateOnly'">
                <Then>
                  <![CDATA[, p => p.SetConverter(]]>
                  <If Condition="Property.Nullable == true">
                    <![CDATA[Nullable]]>
                  </If>
                  <![CDATA[DateTimeToDateOnly)]]>
                </Then>
                <Else>
                  <![CDATA[, p => p.SetConverter(]]>
                  <If Condition="Property.Nullable == true">
                    <![CDATA[Nullable]]>
                  </If>
                  <![CDATA[DateTimeToTimestamp)]]>
                </Else>
              </If>
            </If>
          </Case>
          <Case Value="'Guid'">
            <If Condition="Property.GrpcConverter == null and Property.GrpcMapper == null">
              <![CDATA[, p => p.SetConverter(]]>
              <If Condition="Property.Nullable == true">
                <![CDATA[Nullable]]>
              </If>
              <![CDATA[GuidToStringConverter)]]>
            </If>
          </Case>
          <Case Value="'decimal'">
            <If Condition="Property.GrpcConverter == null and Property.GrpcMapper == null">
              <![CDATA[, p => p.SetConverter(]]>
              <If Condition="Property.Nullable == true">
                <![CDATA[Nullable]]>
              </If>
              <![CDATA[DecimalToDecimalConverter)]]>
            </If>
          </Case>
          <Case Value="'TimeSpan'" />
          <Default>
            <If Condition="Property.GrpcConverter == null and Property.GrpcMapper == null">
              <![CDATA[, p => p.SetMapper({{Property.Name}})]]>
            </If>
          </Default>
        </Switch>
        <If Condition="Property.GrpcConverter != null">
          <![CDATA[, p => p.SetConverter({{Property.GrpcConverter}})]]>
        </If>
        <If Condition="Property.GrpcMapper != null">
          <![CDATA[, p => p.SetMapper({{Property.GrpcMapper}})]]>
        </If>
        <![CDATA[)]]>
      </Property>
      <![CDATA[;
]]>
      <If Condition="Entity.CollectionResult == true">
        <![CDATA[
        /// <summary>
        /// Gets the <see cref="entities.{{Entity.Name}}CollectionResult"/> gRpc mapper.
        /// </summary>
        public static EntityMapper<entities.{{Entity.Name}}CollectionResult, {{Entity.Name}}CollectionResult> {{Entity.Name}}CollectionResult => EntityMapper.Create<entities.{{Entity.Name}}CollectionResult, {{Entity.Name}}CollectionResult>()
            .HasProperty(e => e.Result, g => g.Result, p => p.SetMapper({{Entity.Name}}))
            .HasProperty(e => e.Paging, g => g.Paging, p => p.SetConverter(PagingResultToPagingResultConverter));
]]>
      </If>
      <Operation Condition="Operation.Grpc == true">

      </Operation>
    </Entity>

    <![CDATA[    }
    
    #endregion
}

#nullable restore]]>
  </If>
</Template>
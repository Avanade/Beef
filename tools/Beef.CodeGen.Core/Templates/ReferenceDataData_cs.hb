/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
{{#if RefData.UsesCosmos}}
using Microsoft.Azure.Cosmos;
{{/if}}
using Beef;
using Beef.Business;
{{#if RefData.UsesCosmos}}
using Beef.Data.Cosmos;
  {{#ifval Root.CosmosUsingNamespace}}
using {{Root.CosmosUsingNamespace}};
  {{/ifval}}
{{/if}}
{{#if RefData.UsesDatabase}}
using Beef.Data.Database;
  {{#ifval Root.DatabaseUsingNamespace}}
using {{Root.DatabaseUsingNamespace}};
  {{/ifval}}
{{/if}}
{{#if RefData.UsesEntityFramework}}
using Beef.Data.EntityFrameworkCore;
  {{#ifval Root.EntityFrameworkUsingNamespace}}
using {{Root.EntityFrameworkUsingNamespace}};
  {{/ifval}}
{{/if}}
{{#if RefData.UsesOData}}
using Beef.Data.OData;
  {{#ifval Root.ODataUsingNamespace}}
using {{Root.ODataUsingNamespace}};
  {{/ifval}}
{{/if}}
using Beef.Mapper;
using Beef.Mapper.Converters;
{{#ifval Root.RefDataNamespace}}
using RefDataNamespace = {{Root.RefDataNamespace}};
{{/ifval}}
{{#ifval Root.RefDataBusNamespace}}
using RefDataBusNamespace = {{Root.RefDataBusNamespace}};
{{/ifval}}

namespace {{Root.Company}}.{{Root.AppName}}.Business.Data
{
    /// <summary>
    /// Provides the <b>ReferenceData</b> data access.
    /// </summary>
    public partial class ReferenceDataData : IReferenceDataData
    {
{{#each RefData.DataConstructorParameters}}
        private readonly {{Type}} {{PrivateName}};
  {{#if @last}}

  {{/if}}
{{/each}}
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataData"/> class.
        /// </summary>
{{#each RefData.DataConstructorParameters}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
{{/each}}
        public ReferenceDataData({{#each RefData.DataConstructorParameters}}{{#unless @first}}, {{/unless}}{{Type}} {{ArgumentName}}{{/each}})
            { {{#each RefData.DataConstructorParameters}}{{PrivateName}} = Check.NotNull({{ArgumentName}}, nameof({{ArgumentName}})); {{/each}}{{Name}}DataCtor(); }

        partial void {{Name}}DataCtor(); // Enables additional functionality to be added to the constructor.

{{#each RefDataEntities}}
  {{#unless @first}}

  {{/unless}}
        /// <summary>
        /// Gets all the {{seecomments RefDataQualifiedEntityName}} items.
        /// </summary>
        /// <returns>The {{seecomments RefDataQualifiedEntityCollectionName}}.</returns>
        public async Task<{{RefDataQualifiedEntityCollectionName}}> {{Name}}GetAllAsync()
        {
            var __coll = new {{RefDataQualifiedEntityCollectionName}}();
  {{#ifeq AutoImplement 'Database'}}
            await DataInvoker.Current.InvokeAsync(this, async () => 
            {
                await _db.GetRefDataAsync<{{RefDataQualifiedEntityCollectionName}}, {{RefDataQualifiedEntityName}}>(__coll, "[{{DatabaseSchema}}].[sp{{Name}}GetAll]", "{{Name}}Id"{{#ifeq CoreProperties.Count 0}});{{else}}, additionalProperties: (dr, item, fields) =>{{/ifeq}}
    {{#ifne CoreProperties.Count 0}}
                {
      {{#each CoreProperties}}
                    item.{{DataMapperPropertyName}} = {{#ifval RefDataConverterCode}}{{{RefDataConverterCode}}}{{/ifval}}dr.GetValue<{{{DeclaredType}}}>("{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}"){{#ifval RefDataConverterCode}}){{/ifval}};
      {{/each}}
                });
    {{/ifne}}
            }, BusinessInvokerArgs.TransactionSuppress).ConfigureAwait(false);

  {{/ifeq}}
  {{#ifeq AutoImplement 'EntityFramework'}}
            await DataInvoker.Current.InvokeAsync(this, async () => { _ef.Query({{Name}}Mapper.CreateArgs()).SelectQuery(__coll); await Task.CompletedTask.ConfigureAwait(false); }, BusinessInvokerArgs.TransactionSuppress).ConfigureAwait(false);
  {{/ifeq}}
  {{#ifeq AutoImplement 'Cosmos'}}
            await DataInvoker.Current.InvokeAsync(this, async () => { _cosmos.ValueQuery({{Name}}Mapper.CreateArgs("{{CosmosContainerId}}")).SelectQuery(__coll); await Task.CompletedTask.ConfigureAwait(false); }).ConfigureAwait(false);
  {{/ifeq}}
  {{#ifeq AutoImplement 'None'}}
            await DataInvoker.Current.InvokeAsync(this, async () => await {{Name}}GetAll_OnImplementation(__coll).ConfigureAwait(false)).ConfigureAwait(false);
  {{/ifeq}}
            return __coll;
        }
{{/each}}
{{#each RefDataEntities}}
  {{#ifeq AutoImplement 'EntityFramework'}}
    {{#unless EntityFrameworkCustomMapper}}

        /// <summary>
        /// Provides the {{seecomments RefDataQualifiedEntityName}} and Entity Framework {{{seecomments EntityFrameworkEntity}}} property mapping.
        /// </summary>
        public static EfDbMapper<{{RefDataQualifiedEntityName}}, {{EntityFrameworkEntity}}> {{Name}}Mapper => EfDbMapper.CreateAuto<{{RefDataQualifiedEntityName}}, {{EntityFrameworkEntity}}>()
            .HasProperty(s => s.Id, d => d.{{Name}}Id)
          {{#each CoreProperties}}
            .HasProperty(s => s.{{DataMapperPropertyName}}, d => d.{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}, => p.{{ifne DataOperationTypes 'Any'}}SetOperationTypes(OperationTypes.{{DataOperationTypes}}{{/ifne}}){{/if}}{{#ifval DataConverterCode}}{{{DataConverterCode}}}{{/ifval}}{{#ifval EntityFrameworkMapper}}.SetMapper({{EntityFrameworkMapper}}.Default!){{/ifval}})
          {{/each}}
            .AddStandardProperties();
    {{/unless}}
  {{/ifeq}}
    {{#ifeq AutoImplement 'Cosmos'}}
    {{#unless CosmosCustomMapper}}

        /// <summary>
        /// Provides the {{seecomments RefDataQualifiedEntityName}} and Cosmos {{{seecomments CosmosEntity}}} property mapping.
        /// </summary>
        public static CosmosDbMapper<{{RefDataQualifiedEntityName}}, {{CosmosEntity}}> {{Name}}Mapper => CosmosDbMapper.CreateAuto<{{RefDataQualifiedEntityName}}, {{CosmosEntity}}>()
          {{#each CoreProperties}}
            .HasProperty(s => s.{{DataMapperPropertyName}}, d => d.{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}, p => p.SetOperationTypes(OperationTypes.{{DataOperationTypes}}){{/if}}{{#ifval DataConverterCode}}.SetConverter({{{DataConverterCode}}}){{/ifval}}{{#ifval EntityFrameworkMapper}}.SetMapper({{EntityFrameworkMapper}}.Default!){{/ifval}})
          {{/each}}
            .AddStandardProperties();
    {{/unless}}
  {{/ifeq}}  
{{/each}}
    }
}

#pragma warning restore IDE0005
#nullable restore
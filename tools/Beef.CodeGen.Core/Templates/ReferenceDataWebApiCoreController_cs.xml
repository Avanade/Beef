<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef -->
<Template OutputGenDirName="Generated" OutputFileName="ReferenceDataController.cs">
  <![CDATA[/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Beef;
using Beef.AspNetCore.WebApi;
using Beef.Entities;
using Beef.RefData;
using {{Config.Company}}.{{Config.AppName}}.Common.Entities;
]]>
  <If Condition="Config.RefDataNamespace != null">
    <![CDATA[using RefDataNamespace = {{Config.RefDataNamespace}};
]]>
  </If>
  <![CDATA[
namespace {{Config.Company}}.{{Config.AppName}}.{{Config.ApiName}}.Controllers
{
    /// <summary>
    /// Provides the <b>ReferenceData</b> Web API functionality.
    /// </summary>
]]>
  <If Condition="Config.WebApiAuthorize != null">
    <![CDATA[    [{{Config.WebApiAuthorize}}]
]]>
  </If>
  <![CDATA[    public partial class ReferenceDataController : ControllerBase
    {
        /// <summary>
        /// Determines whether get named all names is supported.
        /// </summary>
        public static bool IsGetNamedAllNamesSupported { get; set; } = false;

]]>
  <Entity Condition="Entity.RefDataType != null and Entity.EntityScope == 'Common'">
    <Set Name="Entity.EntityName" Condition="Config.RefDataNamespace == null" Value="${{Entity.Name}}" Otherwise="$RefDataNamespace.{{Entity.Name}}" />
    <Set Name="Entity.EntityCollectionName" Condition="Config.RefDataNamespace == null" Value="${{Entity.Name}}Collection" Otherwise="$RefDataNamespace.{{Entity.Name}}Collection" />
    <Set Name="System.WebApiAuthorize" Value="null" />
    <If Condition="Config.WebApiAuthorize == 'Authorize'">
      <Set Name="System.WebApiAuthorize" Value="'Authorize'" />
    </If>
    <If Condition="Config.WebApiAuthorize == 'AllowAnonymous'">
      <Set Name="System.WebApiAuthorize" Value="'AllowAnonymous'" />
    </If>
    <If Condition="Entity.WebApiAuthorize == 'Authorize'">
      <Set Name="System.WebApiAuthorize" Value="'Authorize'" />
    </If>
    <If Condition="Entity.WebApiAuthorize == 'AllowAnonymous'">
      <Set Name="System.WebApiAuthorize" Value="'AllowAnonymous'" />
    </If>
    <If Condition="System.Index > 0">
      <![CDATA[
]]>
    </If>
    <![CDATA[        /// <summary> 
        /// Gets all of the {{Entity.EntityName:ToSeeComments}} reference data entities that match the specified criteria.
        /// </summary>
        /// <param name="codes">The reference data code list.</param>
        /// <param name="text">The reference data text (including wildcards).</param>
        /// <returns>A {{Entity.EntityCollectionName:ToSeeComments}}.</returns>
]]>
    <If Condition="System.WebApiAuthorize != null">
      <![CDATA[        [{{System.WebApiAuthorize}}]
]]>
    </If>
    <![CDATA[        [HttpGet()]
]]>
    <If Condition="Entity.WebApiRoutePrefix != null">
      <![CDATA[        [Route("{{Entity.WebApiRoutePrefix}}")]
]]>
    </If>
    <![CDATA[        [ProducesResponseType(typeof({{Entity.EntityCollectionName}}), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult {{Entity.Name}}GetAll(List<string> codes = default, string text = default)
        {
            return new WebApiGet<{{Entity.EntityCollectionName}}>(this, () => Task.FromResult(ReferenceDataFilter.ApplyFilter<{{Entity.EntityCollectionName}}, {{Entity.EntityName}}>(ReferenceData.Current.{{Entity.Name}}, codes, text)),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NoContent);
        }
]]>
  </Entity>
  <![CDATA[
        /// <summary>
        /// Gets the named reference data entities.
        /// </summary>
        /// <param name="names">The list of reference data names; to retrieve all pass a single name of <see cref="Common.Agents.ReferenceDataAgent.GetNamedAllNames"/>.</param>
        /// <returns>A <see cref="ReferenceDataMultiCollection"/>.</returns>
]]>
  <Set Name="System.WebApiAuthorize" Value="null" />
  <If Condition="Config.WebApiAuthorize == 'Authorize'">
    <Set Name="System.WebApiAuthorize" Value="'Authorize'" />
  </If>
  <If Condition="Config.WebApiAuthorize == 'AllowAnonymous'">
    <Set Name="System.WebApiAuthorize" Value="'AllowAnonymous'" />
  </If>
  <If Condition="System.WebApiAuthorize != null">
    <![CDATA[        [{{System.WebApiAuthorize}}]
]]>
  </If>
  <![CDATA[        [HttpGet()]
        [Route("{{Config.RefDataWebApiRoute}}")]
        [ProducesResponseType(typeof(ReferenceDataMultiCollection), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult GetNamed(string[] names)
        {
            return new WebApiGet<ReferenceDataMultiCollection>(this, () =>
            {
                if (names == null || names.Length == 0)
                    return Task.FromResult<ReferenceDataMultiCollection>(null);
                            
                List<string> allNames = null;
                if (IsGetNamedAllNamesSupported && names.Length == 1 && names[0] == Common.Agents.ReferenceDataAgent.GetNamedAllNames)
                {
                    allNames = new List<string>
                    {
]]>
  <Entity Condition="Entity.RefDataType != null and Entity.EntityScope == 'Common'">
    <![CDATA[                        ReferenceData.Property_{{Entity.Name}},
]]>
  </Entity>
  <![CDATA[                    };
                }

                var coll = new ReferenceDataMultiCollection();
                foreach (string name in allNames == null ? names : allNames.ToArray())
                {
                    switch (name.ToUpperInvariant())
                    {
]]>
  <Entity Condition="Entity.RefDataType != null and Entity.EntityScope == 'Common'">
    <![CDATA[                        case var s when s == ReferenceData.Property_{{Entity.Name}}.ToUpperInvariant(): coll.Add(new ReferenceDataMultiItem { Name = ReferenceData.Property_{{Entity.Name}}, Items = ReferenceData.Current.{{Entity.Name}} }); break;
]]>
  </Entity>
  <![CDATA[                    }
                }

                return Task.FromResult(coll);
            }, operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NoContent);
        }

        /// <summary>
        /// Gets the reference data entities for the specified entities and codes from the query string; e.g: {{Config.RefDataWebApiRoute}}/codes?entity=codeX,codeY&amp;entity2=codeZ&amp;entity3
        /// </summary>
        /// <returns>A <see cref="ReferenceDataMultiCollection"/>.</returns>
]]>
  <If Condition="System.WebApiAuthorize != null">
    <![CDATA[        [{{System.WebApiAuthorize}}]
]]>
  </If>
  <![CDATA[        [HttpGet()]
        [Route("{{Config.RefDataWebApiRoute}}/codes")]
        [ProducesResponseType(typeof(ReferenceDataMultiCollection), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult GetByCodes()
        {
            return new WebApiGet<ReferenceDataMultiCollection>(this, () =>
            {
                var coll = new ReferenceDataMultiCollection();
                foreach (var q in HttpContext.Request.Query)
                {
                    switch (q.Key.ToUpperInvariant())
                    {
]]>
  <Entity Condition="Entity.RefDataType != null and Entity.EntityScope == 'Common'">
    <![CDATA[                        case var s when s == ReferenceData.Property_{{Entity.Name}}.ToUpperInvariant(): coll.Add(new ReferenceDataMultiItem { Name = ReferenceData.Property_{{Entity.Name}}, Items = ReferenceDataFilter.ApplyFilter<{{Entity.EntityCollectionName}}, {{Entity.EntityName}}>(ReferenceData.Current.{{Entity.Name}}, q.Value) }); break;
]]>
  </Entity>
  <![CDATA[                    }
                }
                
                return Task.FromResult(coll);
            }, operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NoContent);
        }
    }
}]]>
</Template>
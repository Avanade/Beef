<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef -->
<Template OutputGenDirName="Generated" >
  <Set Name="Config.MapperDefaultRefDataConverter" Condition="Config.MapperDefaultRefDataConverter == null" Value="'ReferenceDataCodeConverter'" />
  <Entity>
    <Set Name="System.EntityName" Value="Entity.Name" />
    <Set Name="System.EntityExclude" Condition="Entity.ExcludeAll == true" Value="true" Otherwise="false" />
    <If Condition="Entity.ExcludeData == null">
      <Then>
        <Set Name="System.EntityExclude" Condition="Entity.OperationCount == 0" Value="true" />
      </Then>
      <Else>
        <Set Name="System.EntityExclude" Value="Entity.ExcludeData" />
      </Else>
    </If>

    <Entity Condition="System.EntityExclude == false and Entity.Name == System.EntityName" OutputFileName="{{Entity.Name}}Data.cs">
      <Set Name="Entity.EntityName" Condition="Entity.GenericWithT != true" Value="Entity.Name" Otherwise="${{Entity.Name}}&lt;T&gt;" />
      <Set Name="Entity.EntityCollectionName" Condition="Entity.GenericWithT != true" Value="${{Entity.Name}}Collection" Otherwise="${{Entity.Name}}Collection&lt;T&gt;" />
      <Set Name="Entity.EntityCollectionResultName" Condition="Entity.GenericWithT != true" Value="${{Entity.Name}}CollectionResult" Otherwise="${{Entity.Name}}CollectionResult&lt;T&gt;" />
      <Set Name="Entity.CosmosEntity" Condition="Entity.CosmosEntity == null" Value="${{Entity.EntityName}}" />
      <Set Name="Entity.ODataEntity" Condition="Entity.ODataEntity == null" Value="${{Entity.EntityName}}" />
      <Set Name="System.UsesDatabase" Condition="Entity.AutoImplement == 'Database'" Value="true" Otherwise="false" />
      <Set Name="System.UsesOData" Condition="Entity.AutoImplement == 'OData'" Value="true" Otherwise="false" />
      <Set Name="System.UsesCosmos" Condition="Entity.AutoImplement == 'Cosmos'" Value="true" Otherwise="false" />
      <Set Name="System.UsesEntityFramework" Condition="Entity.AutoImplement == 'EntityFramework'" Value="true" Otherwise="false" />
      <Set Name="System.HasKey" Value="false"/>
      <Property Condition="Property.UniqueKey == true">
        <Set Name="System.HasKey" Value="true"/>
      </Property>
      <Operation Condition="Operation.OperationType != 'Custom' and Operation.AutoImplement != 'None'">
        <Exception Condition="Entity.AutoImplement == null" Message="Operation '{{Operation.Name}}' specifies AutoImplement where not specified for the Entity '{{Entity.Name}}'." />
        <Exception Condition="System.HasKey == false and Operation.OperationType != 'GetColl'" Message="Operation '{{Operation.Name}}' specifies UniqueKey where none are specified for the Entity '{{Entity.Name}}'." />
        <Set Name="System.UsesDatabase" Condition="Operation.AutoImplement == 'Database'" Value="true" />
        <Set Name="System.UsesOData" Condition="Operation.AutoImplement == 'OData'" Value="true" />
        <Set Name="System.UsesCosmos" Condition="Operation.AutoImplement == 'Cosmos'" Value="true" />
        <Set Name="System.UsesEntityFramework" Condition="Operation.AutoImplement == 'EntityFramework'" Value="true" />
      </Operation>
      <![CDATA[/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
]]>
      <If Condition="System.UsesDatabase == true">
        <![CDATA[using Beef.Data.Database;
]]>
        <If Condition="Config.DatabaseUsingNamespace != null">
          <![CDATA[using {{Config.DatabaseUsingNamespace}};
]]>
        </If>
      </If>
      <If Condition="System.UsesEntityFramework == true">
        <![CDATA[using Beef.Data.EntityFrameworkCore;
]]>
        <If Condition="Config.EntityFrameworkUsingNamespace != null">
          <![CDATA[using {{Config.EntityFrameworkUsingNamespace}};
]]>
        </If>
      </If>
      <If Condition="System.UsesOData == true">
        <![CDATA[using Beef.Data.OData;
using Soc = Simple.OData.Client;
]]>
        <If Condition="Config.ODataUsingNamespace != null">
          <![CDATA[using {{Config.ODataUsingNamespace}};
]]>
        </If>
      </If>
      <If Condition="System.UsesCosmos == true">
        <![CDATA[using Microsoft.Azure.Cosmos;
using Beef.Data.Cosmos;
]]>
        <If Condition="Config.CosmosUsingNamespace != null">
          <![CDATA[using {{Config.CosmosUsingNamespace}};
]]>
        </If>
      </If>
      <If Condition="Config.DataUsingNamespace != null">
        <![CDATA[using {{Config.DataUsingNamespace}};
]]>
      </If>
      <![CDATA[using Beef.Entities;
using Beef.Mapper;
using Beef.Mapper.Converters;
]]>
      <If Condition="Config.EntityUsing == 'Business' or Config.EntityUsing == 'All'">
        <![CDATA[using {{Config.Company}}.{{Config.AppName}}.Business.Entities;
]]>
      </If>
      <If Condition="Config.EntityUsing == null or Config.EntityUsing == 'Common' or Config.EntityUsing == 'All'">
        <![CDATA[using {{Config.Company}}.{{Config.AppName}}.Common.Entities;
]]>
      </If>
      <If Condition="Config.RefDataNamespace != null">
        <![CDATA[using RefDataNamespace = {{Config.RefDataNamespace}};
]]>
      </If>
      <If Condition="Config.RefDataBusNamespace != null">
        <![CDATA[using RefDataBusNamespace = {{Config.RefDataBusNamespace}};
]]>
      </If>
      <![CDATA[
namespace {{Config.Company}}.{{Config.AppName}}.Business.Data
{
    /// <summary>
    /// Provides the {{Entity.Text:ToComments}} data access.
    /// </summary>
    public partial class {{Entity.Name}}Data]]>
      <If Condition="Entity.GenericWithT == true"><![CDATA[<T>]]></If>
      <If Condition="Entity.OperationCount > 0">
        <![CDATA[ : I{{Entity.Name}}Data]]>
        <If Condition="Entity.GenericWithT == true"><![CDATA[<T>]]></If>
      </If>
      <![CDATA[
    {
]]>
      <!-- Private Funcs/Actions as Partial Methods do not support Async :-( -->
      <Set Name="System.EndRegion" Value="false"/>
      <Set Name="System.FirstTime" Condition="System.UsesCosmos == true" Value="true" Otherwise="false"/>
      <Operation Condition="Operation.ExcludeData == false and Operation.ExcludeAll == false and Operation.OperationType != 'Patch'">
        <If Condition="Operation.OperationType != 'Custom' and Operation.AutoImplement != 'None'">
          <If Condition="System.EndRegion == false">
            <Set Name="System.EndRegion" Value="true"/>
            <![CDATA[        #region Private
        #pragma warning disable CS0649 // Defaults to null by design; can be overridden in constructor.
]]>
          </If>
          <If Condition="System.FirstTime">
            <Set Name="System.FirstTime" Value="false"/>
            <![CDATA[
        private readonly Action<ICosmosDbArgs>? _onDataArgsCreate;
]]>
          </If>
          <![CDATA[
]]>
          <Set Name="System.AutoImplement" Value="Operation.AutoImplement" />
          <If Condition="System.AutoImplement == null">
            <Set Name="System.AutoImplement" Value="Entity.AutoImplement" />
          </If>
          <If Condition="Operation.OperationType == 'GetColl'">
            <If Condition="System.AutoImplement == 'Database'">
              <![CDATA[        private readonly Action<DatabaseParameters]]>
            </If>
            <If Condition="System.AutoImplement == 'OData'">
              <![CDATA[        private readonly Func<Soc.IBoundClient<{{Entity.ODataEntity}}>]]>
            </If>
            <If Condition="System.AutoImplement == 'Cosmos'">
              <Set Name="System.DataCosmosValueContainer" Condition="Operation.DataCosmosValueContainer != null" Value="Operation.DataCosmosValueContainer" Otherwise="Entity.DataCosmosValueContainer" />
              <If Condition="System.DataCosmosValueContainer == true">
                <Then><![CDATA[        private readonly Func<IQueryable<CosmosDbValue<{{Entity.CosmosEntity}}>>]]></Then>
                <Else><![CDATA[        private readonly Func<IQueryable<{{Entity.CosmosEntity}}>]]></Else>
              </If>
            </If>
            <If Condition="System.AutoImplement == 'EntityFramework'">
              <![CDATA[        private readonly Func<IQueryable<{{Entity.EntityFrameworkEntity}}>]]>
            </If>
            <Parameter Condition="Parameter.LayerPassing == 'All'">
              <![CDATA[, {{Parameter.Type}}]]>
              <If Condition="Parameter.Nullable == true">
                <![CDATA[?]]>
              </If>
            </Parameter>
            <If Condition="System.AutoImplement == 'Database'">
              <![CDATA[, IDatabaseArgs]]>
            </If>
            <If Condition="System.AutoImplement == 'OData'">
              <![CDATA[, IODataArgs, Soc.IBoundClient<{{Entity.ODataEntity}}>]]>
            </If>
            <If Condition="System.AutoImplement == 'Cosmos'">
              <Set Name="System.DataCosmosValueContainer" Condition="Operation.DataCosmosValueContainer != null" Value="Operation.DataCosmosValueContainer" Otherwise="Entity.DataCosmosValueContainer" />
              <If Condition="System.DataCosmosValueContainer == true">
                <Then><![CDATA[, ICosmosDbArgs, IQueryable<CosmosDbValue<{{Entity.CosmosEntity}}>>]]></Then>
                <Else><![CDATA[, ICosmosDbArgs, IQueryable<{{Entity.CosmosEntity}}>]]></Else>
              </If>
            </If>
            <If Condition="System.AutoImplement == 'EntityFramework'">
              <![CDATA[, IEfDbArgs, IQueryable<{{Entity.EntityFrameworkEntity}}>]]>
            </If>
            <![CDATA[>? {{Operation.PrivateName}}OnQuery;
]]>
          </If>
          <![CDATA[        private readonly Func<]]>
          <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
            <If Condition="Operation.ReturnType == 'void'">
              <Then><![CDATA[{{Entity.EntityName}}]]></Then>
              <Else><![CDATA[{{Operation.ReturnType}}]]></Else>
            </If>
          </If>
          <Set Name="System.HasProperty" Value="false"/>
          <Parameter Condition="Parameter.LayerPassing == 'All'">
            <If Condition="System.Index > 0 or Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
              <![CDATA[, ]]>
            </If>
            <![CDATA[{{Parameter.Type}}]]>
            <If Condition="Parameter.Nullable == true">
              <![CDATA[?]]>
            </If>
            <Set Name="System.HasProperty" Value="true"/>
          </Parameter>
          <If Condition="System.HasProperty == true or Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
            <![CDATA[, ]]>
          </If>
          <If Condition="System.AutoImplement == 'Database'">
            <![CDATA[IDatabaseArgs, ]]>
          </If>
          <If Condition="System.AutoImplement == 'OData'">
            <![CDATA[IODataArgs, ]]>
          </If>
          <If Condition="System.AutoImplement == 'Cosmos'">
            <![CDATA[ICosmosDbArgs, ]]>
          </If>
          <If Condition="System.AutoImplement == 'EntityFramework'">
            <![CDATA[IEfDbArgs, ]]>
          </If>
          <![CDATA[Task>? {{Operation.PrivateName}}OnBeforeAsync;
        private readonly Func<]]>
          <If Condition="Operation.OperationType == 'Get'">
            <If Condition="Operation.ReturnType == 'void'">
              <Then><![CDATA[{{Entity.EntityName}}?]]></Then>
              <Else><![CDATA[{{Operation.ReturnType}}?]]></Else>
            </If>
          </If>
          <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
            <If Condition="Operation.ReturnType == 'void'">
              <Then><![CDATA[{{Entity.EntityName}}]]></Then>
              <Else><![CDATA[{{Operation.ReturnType}}]]></Else>
            </If>
          </If>
          <If Condition="Operation.OperationType == 'GetColl'">
            <If Condition="Operation.ReturnType == 'void'">
              <Then><![CDATA[{{Entity.EntityCollectionResultName}}]]></Then>
              <Else><![CDATA[{{Operation.ReturnType}}CollectionResult]]></Else>
            </If>
          </If>
          <Parameter Condition="Parameter.LayerPassing == 'All'">
            <If Condition="System.Index == 0">
              <Then>
                <If Condition="Operation.OperationType != 'Delete'">
                  <![CDATA[, ]]>
                </If>
              </Then>
              <Else><![CDATA[, ]]></Else>
            </If>
            <![CDATA[{{Parameter.Type}}]]>
            <If Condition="Parameter.Nullable == true">
              <![CDATA[?]]>
            </If>
          </Parameter>
          <If Condition="System.EndRegion == false">
            <Set Name="System.EndRegion" Value="true"/>
            <![CDATA[        #region Private
        #pragma warning disable CS0649 // Defaults to null by design; can be overridden in constructor.
]]>
          </If>
          <![CDATA[, Task>? {{Operation.PrivateName}}OnAfterAsync;
]]>
        </If>
        <If Condition="Operation.OperationType == 'Custom' or Operation.AutoImplement == 'None'">
          <If Condition="System.EndRegion == false">
            <Set Name="System.EndRegion" Value="true"/>
            <![CDATA[        #region Private
        #pragma warning disable CS0649 // Defaults to null by design; can be overridden in constructor.
]]>
          </If>
          <![CDATA[
]]>
        </If>
        <![CDATA[        private readonly Action<Exception>? {{Operation.PrivateName}}OnException;
]]>
      </Operation>
      <If Condition="System.EndRegion == true">
        <![CDATA[
        #pragma warning restore CS0649
        #endregion

]]>
      </If>

      <Operation Condition="Operation.ExcludeData == false and Operation.ExcludeAll == false and Operation.OperationType != 'Patch'">
        <Set Name="System.AutoImplement" Value="Operation.AutoImplement" />
        <If Condition="System.AutoImplement == null">
          <Set Name="System.AutoImplement" Value="Entity.AutoImplement" />
        </If>
        <Set Name="System.DataEntityMapper" Value="Operation.DataEntityMapper" />
        <If Condition="System.DataEntityMapper == null">
          <If Condition="System.AutoImplement == 'Database'">
            <Set Name="System.DataEntityMapper" Value="'DbMapper'" />
          </If>
          <If Condition="System.AutoImplement == 'OData'">
            <Set Name="System.DataEntityMapper" Value="'ODataMapper'" />
          </If>
          <If Condition="System.AutoImplement == 'EntityFramework'">
            <Set Name="System.DataEntityMapper" Value="'EfMapper'" />
          </If>
          <If Condition="System.AutoImplement == 'Cosmos'">
            <Set Name="System.DataEntityMapper" Value="'CosmosMapper'" />
          </If>
        </If>

        <!-- Comments + Method Definition -->
        <If Condition="System.Index > 0">
          <![CDATA[
]]>
        </If>
        <![CDATA[        /// <summary>
]]>
        <If Condition="Operation.Text == null">
          <Then>
            <If Condition="Operation.OperationType == 'GetColl'">
              <![CDATA[        /// Gets the ]]>
              <If Condition="Operation.ReturnType == 'void'">
                <Then><![CDATA[{{Entity.EntityName:ToSeeComments}}]]></Then>
                <Else><![CDATA[{{Operation.ReturnType:ToSeeComments}}]]></Else>
              </If>
              <![CDATA[ collection object that matches the selection criteria.
]]>
            </If>
            <If Condition="Operation.OperationType == 'Get'">
              <![CDATA[        /// Gets the ]]>
              <If Condition="Operation.ReturnType == 'void'">
                <Then><![CDATA[{{Entity.EntityName:ToSeeComments}}]]></Then>
                <Else><![CDATA[{{Operation.ReturnType:ToSeeComments}}]]></Else>
              </If>
              <![CDATA[ object that matches the selection criteria.
]]>
            </If>
            <If Condition="Operation.OperationType == 'Create'">
              <![CDATA[        /// Creates the ]]>
              <If Condition="Operation.ValueType == null">
                <Then><![CDATA[{{Entity.EntityName:ToSeeComments}}]]></Then>
                <Else><![CDATA[{{Operation.ValueType:ToSeeComments}}]]></Else>
              </If>
              <![CDATA[ object.
]]>
            </If>
            <If Condition="Operation.OperationType == 'Update'">
              <![CDATA[        /// Updates the ]]>
              <If Condition="Operation.ValueType == null">
                <Then><![CDATA[{{Entity.EntityName:ToSeeComments}}]]></Then>
                <Else><![CDATA[{{Operation.ValueType:ToSeeComments}}]]></Else>
              </If>
              <![CDATA[ object.
]]>
            </If>
            <If Condition="Operation.OperationType == 'Delete'">
              <![CDATA[        /// Deletes the {{Entity.EntityName:ToSeeComments}} object that matches the selection criteria.
]]>
            </If>
            <If Condition="Operation.OperationType == 'Custom'">
              <![CDATA[        /// ???
]]>
            </If>
          </Then>
          <Else>
            <![CDATA[        /// {{Operation.Text:ToComments}}.
]]>
          </Else>
        </If>
        <![CDATA[        /// </summary>
]]>
        <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
          <![CDATA[        /// <param name="value">The ]]>
          <If Condition="Operation.ValueType == null">
            <Then><![CDATA[{{Entity.Name:ToSeeComments}}]]></Then>
            <Else><![CDATA[{{Operation.ValueType:ToSeeComments}}]]></Else>
          </If>
          <![CDATA[ object.</param>
]]>
        </If>
        <Parameter Condition="Parameter.LayerPassing == 'All'">
          <If Condition="Parameter.Text == null">
            <Then>
              <![CDATA[        /// <param name="{{Parameter.ArgumentName}}">???</param>
]]>
            </Then>
            <Else>
              <![CDATA[        /// <param name="{{Parameter.ArgumentName}}">The {{Parameter.Text:ToComments}}.</param>
]]>
            </Else>
          </If>
        </Parameter>
        <If Condition="Operation.OperationType == 'GetColl'">
          <If Condition="Operation.PagingArgs == true">
            <![CDATA[        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
]]>
          </If>
          <If Condition="Operation.ReturnType == 'void'">
            <Then>
              <![CDATA[        /// <returns>A {{Entity.EntityCollectionResultName:ToSeeComments}}.</returns>
        public Task<{{Entity.EntityCollectionResultName}}> {{Operation.Name}}Async(]]>
            </Then>
            <Else>
              <![CDATA[        /// <returns>A <see cref="{{Operation.ReturnType}}CollectionResult"/>.</returns>
        public Task<{{Operation.ReturnType}}CollectionResult> {{Operation.Name}}Async(]]>
            </Else>
          </If>
        </If>
        <If Condition="Operation.OperationType == 'Get'">
          <If Condition="Operation.ReturnType == 'void'">
            <Then>
              <![CDATA[        /// <returns>The selected {{Entity.EntityName:ToSeeComments}} object where found; otherwise, <c>null</c>.</returns>
        public Task<{{Entity.EntityName}}?> {{Operation.Name}}Async(]]>
            </Then>
            <Else>
              <![CDATA[        /// <returns>The selected {{Operation.ReturnType:ToSeeComments}} object where found; otherwise, <c>null</c>.</returns>
        public Task<{{Operation.ReturnType}}?> {{Operation.Name}}Async(]]>
            </Else>
          </If>
        </If>
        <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
          <If Condition="Operation.ReturnType == 'void'">
            <Then>
              <![CDATA[        /// <returns>A refreshed {{Entity.EntityName:ToSeeComments}} object.</returns>
        public Task<{{Entity.EntityName}}>]]>
            </Then>
            <Else>
              <![CDATA[        /// <returns>A refreshed {{Operation.ReturnType:ToSeeComments}} object.</returns>
        public Task<{{Operation.ReturnType}}>]]>
            </Else>
          </If>
          <![CDATA[ {{Operation.Name}}Async(]]>
          <If Condition="Operation.ValueType == null">
            <Then><![CDATA[{{Entity.EntityName}}]]></Then>
            <Else><![CDATA[{{Operation.ValueType}}]]></Else>
          </If>
          <![CDATA[ value]]>
        </If>
        <If Condition="Operation.OperationType == 'Delete'">
          <![CDATA[        public Task {{Operation.Name}}Async(]]>
        </If>
        <If Condition="Operation.OperationType == 'Custom'">
          <If Condition="Operation.ReturnType == 'void'">
            <Then>
              <![CDATA[        public Task {{Operation.Name}}Async(]]>
            </Then>
            <Else>
              <![CDATA[        /// <returns>{{Operation.ReturnText:ToComments}}</returns>
        public Task<{{Operation.ReturnType}}> {{Operation.Name}}Async(]]>
            </Else>
          </If>
        </If>
        <Parameter Condition="Parameter.LayerPassing == 'All'">
          <If Condition="System.Index == 0">
            <Then>
              <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
                <![CDATA[, ]]>
              </If>
            </Then>
            <Else>
              <![CDATA[, ]]>
            </Else>
          </If>
          <![CDATA[{{Parameter.Type}}]]>
          <If Condition="Parameter.Nullable == true">
            <![CDATA[?]]>
          </If>
          <![CDATA[ {{Parameter.ArgumentName}}]]>
          <If Condition="Parameter.Default != null">
            <![CDATA[= Parameter.Default]]>
          </If>
        </Parameter>
        <If Condition="Operation.OperationType == 'GetColl' and Operation.PagingArgs == true">
          <If Condition="Operation.ParameterCount > 0">
            <![CDATA[, ]]>
          </If>
          <![CDATA[PagingArgs? paging]]>
        </If>
        <![CDATA[)
        {
]]>
        <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
          <![CDATA[            if (value == null)
                throw new ArgumentNullException(nameof(value));

]]>
        </If>

        <!-- Code -->
        <![CDATA[            return DataInvoker.Default.InvokeAsync]]>
        <If Condition="Operation.OperationType == 'Custom' or Operation.AutoImplement == 'None' or Entity.AutoImplement == null">
          <Then>
            <![CDATA[(this, () => {{Operation.Name}}OnImplementationAsync(]]>
            <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
              <![CDATA[value]]>
            </If>
            <Parameter Condition="Parameter.LayerPassing == 'All'">
              <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
                <Then><![CDATA[, ]]></Then>
                <Else>
                  <If Condition="System.Index > 0"><![CDATA[, ]]></If>
                </Else>
              </If>
              <![CDATA[{{Parameter.ArgumentName}}]]>
            </Parameter>
            <If Condition="Operation.OperationType == 'GetColl' and Operation.PagingArgs == true">
              <If Condition="Operation.ParameterCount > 0">
                <![CDATA[, ]]>
              </If>
              <![CDATA[paging]]>
            </If>
            <![CDATA[),
                new BusinessInvokerArgs { ExceptionHandler = {{Operation.PrivateName}}OnException });
]]>
          </Then>
          <Else>
            <![CDATA[(this, async () =>
            {
]]>
            <If Condition="Operation.OperationType == 'GetColl'">
              <If Condition="Operation.ReturnType == 'void'">
                <Then><![CDATA[                {{Entity.EntityCollectionResultName}} __result = new {{Entity.EntityCollectionResultName}}(]]></Then>
                <Else><![CDATA[                {{Operation.ReturnType}}CollectionResult __result = new {{Operation.ReturnType}}CollectionResult(]]></Else>
              </If>
              <If Condition="Operation.PagingArgs == true">
                <![CDATA[paging]]>
              </If>
              <![CDATA[);
]]>
            </If>
            <If Condition="Operation.OperationType == 'Get'">
              <If Condition="Operation.ReturnType == 'void'">
                <Then><![CDATA[                {{Entity.EntityName}}? __result;]]></Then>
                <Else><![CDATA[                {{Operation.ReturnType}}? __result;]]></Else>
              </If>
              <![CDATA[
]]>
            </If>
            <If Condition="Operation.OperationType == 'Create'">
              <If Condition="Operation.ReturnType == 'void'">
                <Then><![CDATA[                {{Entity.EntityName}} __result;]]></Then>
                <Else><![CDATA[                {{Operation.ReturnType}} __result;]]></Else>
              </If>
              <![CDATA[
]]>
            </If>
            <If Condition="Operation.OperationType == 'Update'">
              <If Condition="Operation.ReturnType == 'void'">
                <Then><![CDATA[                {{Entity.EntityName}} __result;]]></Then>
                <Else><![CDATA[                {{Operation.ReturnType}} __result;]]></Else>
              </If>
              <![CDATA[
]]>
            </If>
            <If Condition="Operation.OperationType == 'Custom'">
              <If Condition="Operation.ReturnType != 'void'">
                <![CDATA[                {{Operation.ReturnType}} __result;
]]>
              </If>
            </If>
            <![CDATA[                var __dataArgs = {{System.DataEntityMapper}}.Default.CreateArgs(]]>
            <If Condition="System.AutoImplement == 'Database'">
              <![CDATA["[]]>
              <If Condition="Entity.DatabaseSchema == null">
                <Then><![CDATA[dbo]]></Then>
                <Else><![CDATA[{{Entity.DatabaseSchema}}]]></Else>
              </If>
              <![CDATA[].[]]>
              <If Condition="Operation.DatabaseStoredProc == null">
                <Then><![CDATA[sp{{Entity.Name}}{{Operation.Name}}]]></Then>
                <Else><![CDATA[{{Operation.DatabaseStoredProc}}]]></Else>
              </If>
              <![CDATA[]"]]>
              <If Condition="Operation.PagingArgs == true">
                <![CDATA[, __result.Paging!]]>
              </If>
              <![CDATA[);]]>
            </If>
            <If Condition="System.AutoImplement == 'OData'">
              <If Condition="Operation.PagingArgs == true">
                <![CDATA[__result.Paging!]]>
              </If>
              <If Condition="Operation.ODataCollectionName != null">
                <If Condition="Operation.PagingArgs == true"><![CDATA[, ]]></If>
                <![CDATA["{{Operation.ODataCollectionName}}"]]>
              </If>
              <![CDATA[);]]>
            </If>
            <If Condition="System.AutoImplement == 'Cosmos'">
              <![CDATA["{{Entity.CosmosContainerId}}"]]>
              <If Condition="Operation.PagingArgs == true">
                <![CDATA[, __result.Paging!]]>
              </If>
              <If Condition="Operation.DataCosmosPartitionKey == null">
                <Then>
                  <If Condition="Entity.CosmosPartitionKey == null">
                    <Then><![CDATA[, PartitionKey.None]]></Then>
                    <Else><![CDATA[, new PartitionKey({{Entity.CosmosPartitionKey}})]]></Else>
                  </If>
                </Then>
                <Else>
                  <![CDATA[, new PartitionKey({{Operation.DataCosmosPartitionKey}})]]>
                </Else>
              </If>
              <![CDATA[);
                _onDataArgsCreate?.Invoke(__dataArgs);]]>
            </If>
            <If Condition="System.AutoImplement == 'EntityFramework'">
              <If Condition="Operation.PagingArgs == true">
                <![CDATA[__result.Paging!]]>
              </If>
              <![CDATA[);]]>
            </If>
            <![CDATA[
                if ({{Operation.PrivateName}}OnBeforeAsync != null) await {{Operation.PrivateName}}OnBeforeAsync(]]>
            <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
              <![CDATA[value, ]]>
            </If>
            <Parameter Condition="Parameter.LayerPassing == 'All'">
              <![CDATA[{{Parameter.ArgumentName}}, ]]>
            </Parameter>
            <![CDATA[__dataArgs).ConfigureAwait(false);
                ]]>

            <If Condition="System.AutoImplement == 'Database'">
              <Set Name="System.DatabaseName" Condition="Entity.DatabaseName != null" Value="Entity.DatabaseName" Otherwise="Config.DatabaseName" />
              <Set Name="System.DatabaseName" Condition="System.DatabaseName == null" Value="'Database'" />
              <If Condition="Operation.OperationType == 'Get'">
                <![CDATA[__result = await {{System.DatabaseName}}.Default.GetAsync(__dataArgs]]>
                <Parameter Condition="Parameter.LayerPassing == 'All'">
                  <If Condition="Parameter.DataConverter == null">
                    <Then><![CDATA[, {{Parameter.ArgumentName}}]]></Then>
                    <Else>
                      <![CDATA[, {{Parameter.DataConverter}}]]>
                      <If Condition="Parameter.IsDataConverterGeneric == true">
                        <![CDATA[<{{Parameter.Type}}>]]>
                      </If>
                      <![CDATA[.Default.ConvertToDest({{Parameter.ArgumentName}})]]>
                    </Else>
                  </If>
                </Parameter>
                <![CDATA[).ConfigureAwait(false);
]]>
              </If>
              <If Condition="Operation.OperationType == 'GetColl'">
                <![CDATA[__result.Result = await {{System.DatabaseName}}.Default.Query(__dataArgs, p => {{Operation.PrivateName}}OnQuery?.Invoke(p]]>
                <Parameter Condition="Parameter.LayerPassing == 'All'">
                  <![CDATA[, {{Parameter.ArgumentName}}]]>
                </Parameter>
                <![CDATA[, __dataArgs)).SelectQueryAsync<]]>
                <If Condition="Operation.ReturnType == 'void'">
                  <Then><![CDATA[{{Entity.EntityCollectionName}}]]></Then>
                  <Else><![CDATA[{{Operation.ReturnType}}Collection]]></Else>
                </If>
                <![CDATA[>().ConfigureAwait(false);
]]>
              </If>
              <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
                <![CDATA[__result = await {{System.DatabaseName}}.Default.{{Operation.OperationType}}Async(__dataArgs, value).ConfigureAwait(false);
]]>
              </If>
              <If Condition="Operation.OperationType == 'Delete'">
                <![CDATA[await {{System.DatabaseName}}.Default.DeleteAsync(__dataArgs]]>
                <Parameter Condition="Parameter.LayerPassing == 'All'">
                  <If Condition="Parameter.DataConverter == null">
                    <Then><![CDATA[, {{Parameter.ArgumentName}}]]></Then>
                    <Else>
                      <![CDATA[, {{Parameter.DataConverter}}]]>
                      <If Condition="Parameter.IsDataConverterGeneric == true">
                        <![CDATA[<{{Parameter.Type}}>]]>
                      </If>
                      <![CDATA[.Default.ConvertToDest({{Parameter.ArgumentName}})]]>
                    </Else>
                  </If>
                </Parameter>
                <![CDATA[).ConfigureAwait(false);
]]>
              </If>
            </If>
            <If Condition="System.AutoImplement == 'OData'">
              <Set Name="System.ODataName" Condition="Entity.ODataName != null" Value="Entity.ODataName" Otherwise="Config.ODataName" />
              <Set Name="System.ODataName" Condition="System.ODataName == null" Value="'OData'" />
              <If Condition="Operation.OperationType == 'Get'">
                <![CDATA[__result = await {{System.ODataName}}.Default.GetAsync(__dataArgs, ]]>
                <Parameter Condition="Parameter.LayerPassing == 'All'">
                  <If Condition="System.Index > 0">
                    <![CDATA[, ]]>
                  </If>
                  <If Condition="Parameter.DataConverter == null">
                    <Then><![CDATA[{{Parameter.ArgumentName}}]]></Then>
                    <Else>
                      <![CDATA[{{Parameter.DataConverter}}]]>
                      <If Condition="Parameter.IsDataConverterGeneric == true">
                        <![CDATA[<{{Parameter.Type}}>]]>
                      </If>
                      <![CDATA[.Default.ConvertToDest({{Parameter.ArgumentName}})]]>
                    </Else>
                  </If>
                </Parameter>
                <![CDATA[).ConfigureAwait(false);
]]>
              </If>
              <If Condition="Operation.OperationType == 'GetColl'">
                <![CDATA[__result.Result = {{System.ODataName}}.Default.Query(__dataArgs, q => {{Operation.PrivateName}}OnQuery == null ? q : {{Operation.PrivateName}}OnQuery(q]]>
                <Parameter Condition="Parameter.LayerPassing == 'All'">
                  <![CDATA[, {{Parameter.ArgumentName}}]]>
                </Parameter>
                <![CDATA[, __dataArgs)).SelectQuery<{{Entity.EntityCollectionName}}>();
]]>
              </If>
              <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
                <![CDATA[__result = await {{System.ODataName}}.Default.{{Operation.OperationType}}Async(__dataArgs, value).ConfigureAwait(false);
]]>
              </If>
              <If Condition="Operation.OperationType == 'Delete'">
                <![CDATA[await {{System.ODataName}}.Default.DeleteAsync(__dataArgs, ]]>
                <Parameter Condition="Parameter.LayerPassing == 'All'">
                  <If Condition="System.Index > 0">
                    <![CDATA[, ]]>
                  </If>
                  <If Condition="Parameter.DataConverter == null">
                    <Then><![CDATA[{{Parameter.ArgumentName}}]]></Then>
                    <Else>
                      <![CDATA[{{Parameter.DataConverter}}]]>
                      <If Condition="Parameter.IsDataConverterGeneric == true">
                        <![CDATA[<{{Parameter.Type}}>]]>
                      </If>
                      <![CDATA[.Default.ConvertToDest({{Parameter.ArgumentName}})]]>
                    </Else>
                  </If>
                </Parameter>
                <![CDATA[).ConfigureAwait(false);
]]>
              </If>
            </If>
            <If Condition="System.AutoImplement == 'Cosmos'">
              <Set Name="System.CosmosName" Condition="Entity.CosmosName != null" Value="Entity.CosmosName" Otherwise="Config.CosmosName" />
              <Set Name="System.CosmosName" Condition="System.CosmosName == null" Value="'CosmosDb'" />
              <Set Name="System.DataCosmosValueContainer" Condition="Operation.DataCosmosValueContainer != null" Value="Operation.DataCosmosValueContainer" Otherwise="Entity.DataCosmosValueContainer" />
              <If Condition="Operation.OperationType == 'Get'">
                <![CDATA[__result = await {{System.CosmosName}}.Default.]]>
                <If Condition="System.DataCosmosValueContainer == true"><![CDATA[Value]]></If>
                <![CDATA[Container(__dataArgs).GetAsync(]]>
                <Parameter Condition="Parameter.LayerPassing == 'All'">
                  <If Condition="System.Index > 0">
                    <![CDATA[, ]]>
                  </If>
                  <If Condition="Parameter.DataConverter == null">
                    <Then><![CDATA[{{Parameter.ArgumentName}}]]></Then>
                    <Else>
                      <![CDATA[{{Parameter.DataConverter}}]]>
                      <If Condition="Parameter.IsDataConverterGeneric == true">
                        <![CDATA[<{{Parameter.Type}}>]]>
                      </If>
                      <![CDATA[.Default.ConvertToDest({{Parameter.ArgumentName}})]]>
                    </Else>
                  </If>
                </Parameter>
                <![CDATA[).ConfigureAwait(false);
]]>
              </If>
              <If Condition="Operation.OperationType == 'GetColl'">
                <![CDATA[__result.Result = {{System.CosmosName}}.Default.]]>
                <If Condition="System.DataCosmosValueContainer == true"><![CDATA[Value]]></If>
                <![CDATA[Container(__dataArgs).Query(q => {{Operation.PrivateName}}OnQuery == null ? q : {{Operation.PrivateName}}OnQuery(q]]>
                <Parameter Condition="Parameter.LayerPassing == 'All'">
                  <![CDATA[, {{Parameter.ArgumentName}}]]>
                </Parameter>
                <![CDATA[, __dataArgs)).SelectQuery<{{Entity.EntityCollectionName}}>();
]]>
              </If>
              <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
                <![CDATA[__result = await {{System.CosmosName}}.Default.]]>
                <If Condition="System.DataCosmosValueContainer == true"><![CDATA[Value]]></If>
                <![CDATA[Container(__dataArgs).{{Operation.OperationType}}Async(value).ConfigureAwait(false);
]]>
              </If>
              <If Condition="Operation.OperationType == 'Delete'">
                <![CDATA[await {{System.CosmosName}}.Default.]]>
                <If Condition="System.DataCosmosValueContainer == true"><![CDATA[Value]]></If>
                <![CDATA[Container(__dataArgs).DeleteAsync(]]>
                <Parameter Condition="Parameter.LayerPassing == 'All'">
                  <If Condition="System.Index > 0">
                    <![CDATA[, ]]>
                  </If>
                  <If Condition="Parameter.DataConverter == null">
                    <Then><![CDATA[{{Parameter.ArgumentName}}]]></Then>
                    <Else>
                      <![CDATA[{{Parameter.DataConverter}}]]>
                      <If Condition="Parameter.IsDataConverterGeneric == true">
                        <![CDATA[<{{Parameter.Type}}>]]>
                      </If>
                      <![CDATA[.Default.ConvertToDest({{Parameter.ArgumentName}})]]>
                    </Else>
                  </If>
                </Parameter>
                <![CDATA[).ConfigureAwait(false);
]]>
              </If>
            </If>
            <If Condition="System.AutoImplement == 'EntityFramework'">
              <Set Name="System.EntityFrameworkName" Condition="Entity.EntityFrameworkName != null" Value="Entity.EntityFrameworkName" Otherwise="Config.EntityFrameworkName" />
              <Set Name="System.EntityFrameworkName" Condition="System.EntityFrameworkName == null" Value="'EfDb'" />
              <If Condition="Operation.OperationType == 'Get'">
                <![CDATA[__result = await {{System.EntityFrameworkName}}.Default.GetAsync(__dataArgs, ]]>
                <Parameter Condition="Parameter.LayerPassing == 'All'">
                  <If Condition="System.Index > 0">
                    <![CDATA[, ]]>
                  </If>
                  <If Condition="Parameter.DataConverter == null">
                    <Then><![CDATA[{{Parameter.ArgumentName}}]]></Then>
                    <Else>
                      <![CDATA[{{Parameter.DataConverter}}]]>
                      <If Condition="Parameter.IsDataConverterGeneric == true">
                        <![CDATA[<{{Parameter.Type}}>]]>
                      </If>
                      <![CDATA[.Default.ConvertToDest({{Parameter.ArgumentName}})]]>
                    </Else>
                  </If>
                </Parameter>
                <![CDATA[).ConfigureAwait(false);
]]>
              </If>
              <If Condition="Operation.OperationType == 'GetColl'">
                <![CDATA[__result.Result = {{System.EntityFrameworkName}}.Default.Query(__dataArgs, q => {{Operation.PrivateName}}OnQuery == null ? q : {{Operation.PrivateName}}OnQuery(q]]>
                <Parameter Condition="Parameter.LayerPassing == 'All'">
                  <![CDATA[, {{Parameter.ArgumentName}}]]>
                </Parameter>
                <![CDATA[, __dataArgs)).SelectQuery<{{Entity.EntityCollectionName}}>();
]]>
              </If>
              <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
                <![CDATA[__result = await {{System.EntityFrameworkName}}.Default.{{Operation.OperationType}}Async(__dataArgs, value).ConfigureAwait(false);
]]>
              </If>
              <If Condition="Operation.OperationType == 'Delete'">
                <![CDATA[await {{System.EntityFrameworkName}}.Default.DeleteAsync(__dataArgs, ]]>
                <Parameter Condition="Parameter.LayerPassing == 'All'">
                  <If Condition="System.Index > 0">
                    <![CDATA[, ]]>
                  </If>
                  <If Condition="Parameter.DataConverter == null">
                    <Then><![CDATA[{{Parameter.ArgumentName}}]]></Then>
                    <Else>
                      <![CDATA[{{Parameter.DataConverter}}]]>
                      <If Condition="Parameter.IsDataConverterGeneric == true">
                        <![CDATA[<{{Parameter.Type}}>]]>
                      </If>
                      <![CDATA[.Default.ConvertToDest({{Parameter.ArgumentName}})]]>
                    </Else>
                  </If>
                </Parameter>
                <![CDATA[).ConfigureAwait(false);
]]>
              </If>
            </If>
            <![CDATA[                if ({{Operation.PrivateName}}OnAfterAsync != null) await {{Operation.PrivateName}}OnAfterAsync(]]>
            <If Condition="Operation.OperationType != 'Delete'">
              <![CDATA[__result]]>
            </If>
            <Parameter Condition="Parameter.LayerPassing == 'All'">
              <If Condition="System.Index > 0 or Operation.OperationType != 'Delete'">
                <![CDATA[, ]]>
              </If>
              <![CDATA[{{Parameter.ArgumentName}}]]>
            </Parameter>
            <![CDATA[).ConfigureAwait(false);
]]>
            <If Condition="Operation.OperationType != 'Delete'">
              <![CDATA[                return __result;
]]>
            </If>
            <![CDATA[            }, new BusinessInvokerArgs { ExceptionHandler = {{Operation.PrivateName}}OnException });
]]>
          </Else>
        </If>
        <![CDATA[        }
]]>
      </Operation>
      <If Condition="System.UsesDatabase == true and Entity.DataDatabaseCustomMapper == false">
        <![CDATA[
        /// <summary>
        /// Provides the {{Entity.EntityName:ToSeeComments}} entity and database property mapping.
        /// </summary>
        public partial class DbMapper : DatabaseMapper<{{Entity.EntityName}}, DbMapper>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="DbMapper"/> class.
            /// </summary>
            public DbMapper()
            {
]]>
        <If Condition="Entity.DataDatabaseMapperInheritsFrom != null">
          <![CDATA[                InheritPropertiesFrom({{Entity.DataDatabaseMapperInheritsFrom}}.Default);
]]>
        </If>
        <Property Condition="Property.DataDatabaseIgnore == false and Property.Name != 'ETag' and Property.Name != 'ChangeLog'">
          <Set Name="System.RefDataSidCodeMapping" Value="false" />
          <If Condition="Property.RefDataType == 'string'">
            <If Condition="Property.DataConverter == null and Config.MapperDefaultRefDataConverter == 'ReferenceDataCodeConverter'">
              <Then>
                <Set Name="System.RefDataSidCodeMapping" Value="true" />
              </Then>
              <Else>
                <If Condition="Property.DataConverter == 'ReferenceDataCodeConverter'">
                  <Set Name="System.RefDataSidCodeMapping" Value="true" />
                </If>
              </Else>
            </If>
          </If>
          <If Condition="System.RefDataSidCodeMapping == true">
            <Then>
              <![CDATA[                Property(s => s.{{Property.Name}}Sid]]>
            </Then>
            <Else>
              <![CDATA[                Property(s => s.{{Property.Name}}]]>
            </Else>
          </If>
          <If Condition="Property.DataName != null">
            <![CDATA[, "{{Property.DataName}}"]]>
          </If>
          <If Condition="Property.DataOperationTypes != null">
            <![CDATA[, operationTypes: OperationTypes.{{Property.DataOperationTypes}}]]>
          </If>
          <![CDATA[)]]>
          <If Condition="Property.UniqueKey == true">
            <If Condition="Property.DataAutoGenerated == true">
              <Then><![CDATA[.SetUniqueKey(true)]]></Then>
              <Else><![CDATA[.SetUniqueKey(false)]]></Else>
            </If>
          </If>
          <If Condition="System.RefDataSidCodeMapping == false">
            <If Condition="Property.DataConverter == null">
              <Then>
                <If Condition="Property.RefDataType != null">
                  <If Condition="Config.MapperDefaultRefDataConverter != null">
                    <Then><![CDATA[.SetConverter({{Config.MapperDefaultRefDataConverter}}<{{Property.Type}}>.Default!)]]></Then>
                    <Else><![CDATA[.SetConverter(ReferenceDataCodeConverter<{{Property.Type}}>.Default!)]]></Else>
                  </If>
                </If>
              </Then>
              <Else>
                <![CDATA[.SetConverter({{Property.DataConverter}}]]>
                <If Condition="Property.IsDataConverterGeneric == true">
                  <![CDATA[<{{Property.Type}}>]]>
                </If>
                <![CDATA[.Default!)]]>
              </Else>
            </If>
          </If>
          <If Condition="Property.DataDatabaseMapper != null">
            <![CDATA[.SetMapper({{Property.DataDatabaseMapper}}.Default!)]]>
          </If>
          <![CDATA[;
]]>
        </Property>
        <If Condition="Entity.MapperAddStandardProperties == null or Entity.MapperAddStandardProperties == true">
          <![CDATA[                AddStandardProperties();
]]>
        </If>
        <![CDATA[                DbMapperCtor();
            }
            
            /// <summary>
            /// Enables the <see cref="DbMapper"/> constructor to be extended.
            /// </summary>
            partial void DbMapperCtor();
        }
]]>
      </If>
      <If Condition="System.UsesOData == true and Entity.DataODataCustomMapper == false">
        <![CDATA[
        /// <summary>
        /// Provides the {{Entity.EntityName:ToSeeComments}} entity and OData property mapping.
        /// </summary>
        public partial class ODataMapper : ODataMapper<{{Entity.EntityName}}, {{Entity.ODataEntity}}, ODataMapper>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ODataMapper"/> class.
            /// </summary>
            public ODataMapper()
            {
]]>
        <If Condition="Entity.DataODataMapperInheritsFrom != null">
          <![CDATA[                InheritPropertiesFrom({{Entity.DataDatabaseMapperInheritsFrom}}.Default);
]]>
        </If>
        <Property Condition="Property.DataODatagnore == false and Property.Name != 'ETag' and Property.Name != 'ChangeLog'">
          <Set Name="System.RefDataSidCodeMapping" Value="false" />
          <If Condition="Property.RefDataType == 'string'">
            <If Condition="Property.DataConverter == null and Config.MapperDefaultRefDataConverter == 'ReferenceDataCodeConverter'">
              <Then>
                <Set Name="System.RefDataSidCodeMapping" Value="true" />
              </Then>
              <Else>
                <If Condition="Property.DataConverter == 'ReferenceDataCodeConverter'">
                  <Set Name="System.RefDataSidCodeMapping" Value="true" />
                </If>
              </Else>
            </If>
          </If>
          <If Condition="System.RefDataSidCodeMapping == true">
            <Then>
              <![CDATA[                Property(s => s.{{Property.Name}}Sid]]>
            </Then>
            <Else>
              <![CDATA[                Property(s => s.{{Property.Name}}]]>
            </Else>
          </If>
          <![CDATA[, d => d.]]>
          <If Condition="Property.DataName == null">
            <Then>
              <![CDATA[{{Property.Name}}]]>
            </Then>
            <Else>
              <![CDATA[{{Property.DataName}}]]>
            </Else>
          </If>
          <If Condition="Property.DataOperationTypes != null">
            <![CDATA[, operationTypes: OperationTypes.{{Property.DataOperationTypes}}]]>
          </If>
          <![CDATA[)]]>
          <If Condition="Property.UniqueKey == true">
            <If Condition="Property.DataAutoGenerated == true">
              <Then><![CDATA[.SetUniqueKey(true)]]></Then>
              <Else><![CDATA[.SetUniqueKey(false)]]></Else>
            </If>
          </If>
          <If Condition="System.RefDataSidCodeMapping == false">
            <If Condition="Property.DataConverter == null">
              <Then>
                <If Condition="Property.RefDataType != null">
                  <If Condition="Config.MapperDefaultRefDataConverter != null">
                    <Then><![CDATA[.SetConverter({{Config.MapperDefaultRefDataConverter}}<{{Property.Type}}>.Default!)]]></Then>
                    <Else><![CDATA[.SetConverter(ReferenceDataCodeConverter<{{Property.Type}}>.Default!)]]></Else>
                  </If>
                </If>
              </Then>
              <Else>
                <![CDATA[.SetConverter({{Property.DataConverter}}]]>
                <If Condition="Property.IsDataConverterGeneric == true">
                  <![CDATA[<{{Property.Type}}>]]>
                </If>
                <![CDATA[.Default!)]]>
              </Else>
            </If>
          </If>
          <If Condition="Property.DataODataMapper != null">
            <![CDATA[.SetMapper({{Property.DataODataMapper}}.Default!)]]>
          </If>
          <![CDATA[;
]]>
        </Property>
        <![CDATA[                ODataMapperCtor();
            }
            
            /// <summary>
            /// Enables the <see cref="ODataMapper"/> constructor to be extended.
            /// </summary>
            partial void ODataMapperCtor();
        }
]]>
      </If>
      <If Condition="System.UsesEntityFramework == true and Entity.DataEntityFrameworkCustomMapper == false">
        <![CDATA[
        /// <summary>
        /// Provides the {{Entity.EntityName:ToSeeComments}} entity and Entity Framework {{Entity.EntityFrameworkEntity:ToSeeComments}} property mapping.
        /// </summary>
        public partial class EfMapper : EfDbMapper<{{Entity.EntityName}}, {{Entity.EntityFrameworkEntity}}, EfMapper>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="EfMapper"/> class.
            /// </summary>
            public EfMapper()
            {
]]>
        <If Condition="Entity.DataEntityFrameworkMapperInheritsFrom != null">
          <![CDATA[                InheritPropertiesFrom({{Entity.DataDatabaseMapperInheritsFrom}}.Default);
]]>
        </If>
        <Property Condition="Property.DataEntityFrameworkIgnore == false and Property.Name != 'ETag' and Property.Name != 'ChangeLog'">
          <Set Name="System.RefDataSidCodeMapping" Value="false" />
          <If Condition="Property.RefDataType == 'string'">
            <If Condition="Property.DataConverter == null and Config.MapperDefaultRefDataConverter == 'ReferenceDataCodeConverter'">
              <Then>
                <Set Name="System.RefDataSidCodeMapping" Value="true" />
              </Then>
              <Else>
                <If Condition="Property.DataConverter == 'ReferenceDataCodeConverter'">
                  <Set Name="System.RefDataSidCodeMapping" Value="true" />
                </If>
              </Else>
            </If>
          </If>
          <If Condition="System.RefDataSidCodeMapping == true">
            <Then>
              <![CDATA[                Property(s => s.{{Property.Name}}Sid, d => d.]]>
            </Then>
            <Else>
              <![CDATA[                Property(s => s.{{Property.Name}}, d => d.]]>
            </Else>
          </If>
          <If Condition="Property.DataName == null">
            <Then>
              <![CDATA[{{Property.Name}}]]>
            </Then>
            <Else>
              <![CDATA[{{Property.DataName}}]]>
            </Else>
          </If>
          <If Condition="Property.DataOperationTypes != null">
            <![CDATA[, operationTypes: OperationTypes.{{Property.DataOperationTypes}}]]>
          </If>
          <![CDATA[)]]>
          <If Condition="Property.UniqueKey == true">
            <If Condition="Property.DataAutoGenerated == true">
              <Then><![CDATA[.SetUniqueKey(true)]]></Then>
              <Else><![CDATA[.SetUniqueKey(false)]]></Else>
            </If>
          </If>
          <If Condition="System.RefDataSidCodeMapping == false">
            <If Condition="Property.DataConverter == null">
              <Then>
                <If Condition="Property.RefDataType != null">
                  <If Condition="Config.MapperDefaultRefDataConverter != null">
                    <Then><![CDATA[.SetConverter({{Config.MapperDefaultRefDataConverter}}<{{Property.Type}}>.Default!)]]></Then>
                    <Else><![CDATA[.SetConverter(ReferenceDataCodeConverter<{{Property.Type}}>.Default!)]]></Else>
                  </If>
                </If>
              </Then>
              <Else>
                <![CDATA[.SetConverter({{Property.DataConverter}}]]>
                <If Condition="Property.IsDataConverterGeneric == true">
                  <![CDATA[<{{Property.Type}}>]]>
                </If>
                <![CDATA[.Default!)]]>
              </Else>
            </If>
          </If>
          <If Condition="Property.DataEntityFrameworkMapper != null">
            <![CDATA[.SetMapper({{Property.DataEntityFrameworkMapper}}.Default!)]]>
          </If>
          <![CDATA[;
]]>
        </Property>
        <If Condition="Entity.MapperAddStandardProperties == null or Entity.MapperAddStandardProperties == true">
          <![CDATA[                AddStandardProperties();
]]>
        </If>
        <![CDATA[                EfMapperCtor();
            }
            
            /// <summary>
            /// Enables the <see cref="EfMapper"/> constructor to be extended.
            /// </summary>
            partial void EfMapperCtor();
        }
]]>
      </If>
      <If Condition="System.UsesCosmos == true and Entity.DataCosmosCustomMapper == false">
        <![CDATA[
        /// <summary>
        /// Provides the {{Entity.EntityName:ToSeeComments}} entity and Cosmos {{Entity.CosmosEntity:ToSeeComments}} property mapping.
        /// </summary>
        public partial class CosmosMapper : CosmosDbMapper<{{Entity.EntityName}}, {{Entity.CosmosEntity}}, CosmosMapper>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="CosmosMapper"/> class.
            /// </summary>
            public CosmosMapper()
            {
]]>
        <If Condition="Entity.DataCosmosMapperInheritsFrom != null">
          <![CDATA[                InheritPropertiesFrom({{Entity.DataCosmosMapperInheritsFrom}}.Default);
]]>
        </If>
        <Property Condition="Property.DataCosmosIgnore == false and Property.Name != 'ETag' and Property.Name != 'ChangeLog'">
          <Set Name="System.RefDataSidCodeMapping" Value="false" />
          <If Condition="Property.RefDataType == 'string'">
            <If Condition="Property.DataConverter == null and Config.MapperDefaultRefDataConverter == 'ReferenceDataCodeConverter'">
              <Then>
                <Set Name="System.RefDataSidCodeMapping" Value="true" />
              </Then>
              <Else>
                <If Condition="Property.DataConverter == 'ReferenceDataCodeConverter'">
                  <Set Name="System.RefDataSidCodeMapping" Value="true" />
                </If>
              </Else>
            </If>
          </If>
          <If Condition="System.RefDataSidCodeMapping == true">
            <Then>
              <![CDATA[                Property(s => s.{{Property.Name}}Sid, d => d.]]>
            </Then>
            <Else>
              <![CDATA[                Property(s => s.{{Property.Name}}, d => d.]]>
            </Else>
          </If>
          <If Condition="Property.DataName == null">
            <Then>
              <![CDATA[{{Property.Name}}]]>
              <If Condition="System.RefDataSidCodeMapping == true and Entity.EntityName == Entity.CosmosEntity">
                <![CDATA[Sid]]>
              </If>
            </Then>
            <Else>
              <![CDATA[{{Property.DataName}}]]>
            </Else>
          </If>
          <If Condition="Property.DataOperationTypes != null">
            <![CDATA[, operationTypes: OperationTypes.{{Property.DataOperationTypes}}]]>
          </If>
          <![CDATA[)]]>
          <If Condition="Property.UniqueKey == true">
            <If Condition="Property.DataAutoGenerated == true or Property.DataAutoGenerated == null">
              <Then><![CDATA[.SetUniqueKey(true)]]></Then>
              <Else><![CDATA[.SetUniqueKey(false)]]></Else>
            </If>
          </If>
          <If Condition="System.RefDataSidCodeMapping == false">
            <If Condition="Property.DataConverter == null">
              <Then>
                <If Condition="Property.RefDataType != null">
                  <If Condition="Config.MapperDefaultRefDataConverter != null">
                    <Then><![CDATA[.SetConverter({{Config.MapperDefaultRefDataConverter}}<{{Property.Type}}>.Default!)]]></Then>
                    <Else><![CDATA[.SetConverter(ReferenceDataCodeConverter<{{Property.Type}}>.Default!)]]></Else>
                  </If>
                </If>
              </Then>
              <Else>
                <![CDATA[.SetConverter({{Property.DataConverter}}]]>
                <If Condition="Property.IsDataConverterGeneric == true">
                  <![CDATA[<{{Property.Type}}>]]>
                </If>
                <![CDATA[.Default!)]]>
              </Else>
            </If>
          </If>
          <If Condition="Property.DataCosmosMapper != null">
            <![CDATA[.SetMapper({{Property.DataCosmosMapper}}.Default!)]]>
          </If>
          <![CDATA[;
]]>
        </Property>
        <If Condition="Entity.MapperAddStandardProperties == null or Entity.MapperAddStandardProperties == true">
          <![CDATA[                AddStandardProperties();
]]>
        </If>
        <![CDATA[                CosmosMapperCtor();
            }
            
            /// <summary>
            /// Enables the <see cref="CosmosMapper"/> constructor to be extended.
            /// </summary>
            partial void CosmosMapperCtor();
        }
]]>
      </If>
      <![CDATA[    }
}

#nullable restore]]>
    </Entity>
  </Entity>
</Template>
{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Linq;
{{#if UsesHttpAgent}}
using System.Net.Http;
{{/if}}
using System.Text;
using System.Threading.Tasks;
{{#if UsesCosmos}}
using Microsoft.Azure.Cosmos;
{{/if}}
using Beef;
using Beef.Business;
{{#if UsesCosmos}}
using Beef.Data.Cosmos;
  {{#ifval Root.CosmosUsingNamespace}}
using {{Root.CosmosUsingNamespace}};
  {{/ifval}}
{{/if}}
{{#if UsesDatabase}}
using Beef.Data.Database;
  {{#ifval Root.DatabaseUsingNamespace}}
using {{Root.DatabaseUsingNamespace}};
  {{/ifval}}
{{/if}}
{{#if UsesEntityFramework}}
using Beef.Data.EntityFrameworkCore;
  {{#ifval Root.EntityFrameworkUsingNamespace}}
using {{Root.EntityFrameworkUsingNamespace}};
  {{/ifval}}
{{/if}}
{{#if UsesOData}}
using Beef.Data.OData;
  {{#ifval Root.ODataUsingNamespace}}
using {{Root.ODataUsingNamespace}};
  {{/ifval}}
{{/if}}
using Beef.Entities;
{{#if SupportsDataEvents}}
using Beef.Events;
{{/if}}
using Beef.Mapper;
using Beef.Mapper.Converters;
{{#if UsesHttpAgent}}
using Beef.WebApi;
{{/if}}
{{#ifeq EntityUsing 'Common' 'All'}}
using {{Root.NamespaceCommon}}.Entities;
{{/ifeq}}
{{#ifeq EntityUsing 'Business' 'All'}}
using {{Root.NamespaceBusiness}}.Entities;
{{/ifeq}}
{{#ifval Root.RefDataNamespace}}
using RefDataNamespace = {{Root.RefDataNamespace}};
{{/ifval}}
{{#ifval Root.RefDataBusNamespace}}
using RefDataNamespace = {{Root.RefDataBusNamespace}};
{{/ifval}}
{{#if UsesOData}}
using Soc = Simple.OData.Client;
{{/if}}

namespace {{Root.NamespaceBusiness}}.Data
{
    /// <summary>
    /// Provides the {{{EntityNameSeeComments}}} data access.
    /// </summary>
    public partial class {{Name}}Data{{#if GenericWithT}}<T>{{/if}}{{#ifne Operations.Count 0}} : I{{Name}}Data{{#if GenericWithT}}<T>{{/if}}{{/ifne}}
    {
{{#ifne Operations.Count 0}}
  {{#each DataCtorParameters}}
        private readonly {{Type}} {{PrivateName}};
    {{#if @last}}

    {{/if}}
  {{/each}}
  {{#if DataExtensionsRequired}}
    {{#if HasDataExtensions}}
        #region Extensions

    {{/if}}
    {{#if UsesCosmos}}
        private Action<CosmosDbArgs>? _onDataArgsCreate;
    {{/if}}
    {{#each DataOperations}}
      {{#ifeq Type 'GetColl'}}
        {{#ifeq AutoImplement 'Database'}}
        private Action<DatabaseParameters, {{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}{{DataArgs.Type}}>? {{PrivateName}}OnQuery;
        {{/ifeq}}
        {{#ifeq AutoImplement 'EntityFramework'}}
        private Func<IQueryable<{{Parent.EntityFrameworkModel}}>, {{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}{{DataArgs.Type}}, IQueryable<{{Parent.EntityFrameworkModel}}>>? {{PrivateName}}OnQuery;
        {{/ifeq}}   
        {{#ifeq AutoImplement 'Cosmos'}}
          {{#ifval Parent.CosmosValueContainer}}
        private Func<IQueryable<CosmosDbValue<{{Parent.CosmosModel}}>>, {{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}{{DataArgs.Type}}, IQueryable<CosmosDbValue{{Parent.CosmosModel}}>>>? {{PrivateName}}OnQuery;
          {{else}}
        private Func<IQueryable<{{Parent.CosmosModel}}>, {{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}{{DataArgs.Type}}, IQueryable<{{Parent.CosmosModel}}>>? {{PrivateName}}OnQuery;
          {{/ifval}}
        {{/ifeq}}  
        {{#ifeq AutoImplement 'OData'}}
        private Func<Soc.IBoundClient<{{Parent.ODataModel}}>, {{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}{{DataArgs.Type}}, Soc.IBoundClient<{{Parent.ODataModel}}>>? {{PrivateName}}OnQuery;
        {{/ifeq}} 
      {{/ifeq}}
      {{#if DataExtensions}}
        {{#ifne AutoImplement 'None'}}
        private Func<{{#each PagingLessDataParameters}}{{{ParameterType}}}, {{/each}}{{DataArgs.Type}}, Task>? {{PrivateName}}OnBeforeAsync;
        private Func<{{#if HasReturnValue}}{{OperationReturnType}}, {{/if}}{{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}Task>? {{PrivateName}}OnAfterAsync;
        {{/ifne}}
        private Action<Exception>? {{PrivateName}}OnException;
      {{/if}}
    {{/each}}

    {{#if HasDataExtensions}}
        #endregion

    {{/if}}
  {{/if}}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{Name}}Data"/> class.
        /// </summary>
  {{#each DataCtorParameters}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
  {{/each}}
        {{lower DataCtor}} {{Name}}Data({{#each DataCtorParameters}}{{#unless @first}}, {{/unless}}{{Type}} {{ArgumentName}}{{/each}})
{{#ifle DataCtorParameters.Count 3}}
            { {{#each DataCtorParameters}}{{PrivateName}} = Check.NotNull({{ArgumentName}}, nameof({{ArgumentName}})); {{/each}}{{Name}}DataCtor(); }
{{else}}
        {
  {{#each DataCtorParameters}}
            {{PrivateName}} = Check.NotNull({{ArgumentName}}, nameof({{ArgumentName}}));
  {{/each}}
            {{Name}}DataCtor();
        }
{{/ifle}}

        partial void {{Name}}DataCtor(); // Enables additional functionality to be added to the constructor.
  {{#each DataOperations}}

        /// <summary>
        /// {{{SummaryText}}}
        /// </summary>
    {{#each DataParameters}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
    {{/each}}
    {{#if HasReturnValue}}
        /// <returns>{{{ReturnText}}}</returns>
    {{/if}}
        public {{{OperationTaskReturnType}}} {{Name}}Async({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{{ParameterType}}} {{ArgumentName}}{{/each}}) => {{#if IsManualShorthand}}{{#if DataExtensions}}{{DataInvoker}}.InvokeAsync(this, () => {{Name}}OnImplementationAsync({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{#if IsValueArg}}Check.NotNull(value, nameof(value)){{else}}{{ArgumentName}}{{/if}}{{/each}}), new {{DataInvokerArgs}} { ExceptionHandler = {{PrivateName}}OnException{{#if DataTransaction}}, IncludeTransactionScope = true{{/if}} });{{else}}{{DataInvoker}}.InvokeAsync(this, () => {{Name}}OnImplementationAsync({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{#if IsValueArg}}Check.NotNull(value, nameof(value)){{else}}{{ArgumentName}}{{/if}}{{/each}}){{#if DataTransaction}}, new {{DataInvokerArgs}} { IncludeTransactionScope = true }{{/if}});{{/if}}{{/if}}{{#unless IsManualShorthand}}{{DataInvoker}}.InvokeAsync(this, async () =>{{/unless}}
    {{#unless IsManualShorthand}}
        {
      {{#ifeq Type 'GetColl'}}
            {{OperationReturnType}} __result = new {{OperationReturnType}}({{#if Paging}}paging{{/if}});
      {{else}}
        {{#if DataExtensions}}
          {{#if HasReturnValue}}
            {{OperationReturnType}} __result;
          {{/if}}
        {{/if}}
      {{/ifeq}}
      {{#ifeq AutoImplement 'Database'}}
            var __dataArgs = {{DataEntityMapper}}.Default.CreateArgs("[{{Parent.DatabaseSchema}}].[{{DatabaseStoredProc}}]"{{#if Paging}}, __result.Paging!{{/if}});
      {{/ifeq}}
      {{#ifeq AutoImplement 'EntityFramework'}}
            var __dataArgs = EfDbArgs.Create(_mapper{{#if Paging}}, __result.Paging!{{/if}});
      {{/ifeq}}
      {{#ifeq AutoImplement 'Cosmos'}}
            var __dataArgs = CosmosDbArgs.Create(_mapper, "{{Parent.CosmosContainerId}}"{{#if Paging}}, __result.Paging!{{/if}}, {{CosmosPartitionKeyCode}}, onCreate: _onDataArgsCreate);
      {{/ifeq}}
      {{#ifeq AutoImplement 'OData'}}
            var __dataArgs = ODataArgs.Create(_mapper{{#if Paging}}, __result.Paging!{{/if}}{{#ifval ODataCollectionName}}, "{{ODataCollectionName}}"{{/ifval}});
      {{/ifeq}}
      {{#ifeq AutoImplement 'HttpAgent'}}
            var __dataArgs = HttpSendArgs.Create({{#if HttpAgentRequiresMapper}}_mapper, {{/if}}HttpMethod.{{HttpAgentMethod}}, $"{{HttpAgentRoute}}"{{#if Paging}}, __result.Paging!{{/if}}{{#ifeq Type 'Get'}}, true{{/ifeq}});
      {{/ifeq}}
      {{#if DataExtensions}}
            await ({{PrivateName}}OnBeforeAsync?.Invoke({{#each PagingLessDataParameters}}{{{ArgumentName}}}, {{/each}}__dataArgs) ?? Task.CompletedTask).ConfigureAwait(false);
      {{/if}}
      {{#ifeq AutoImplement 'None'}}
            {{#if HasReturnValue}}var __result = {{/if}}await {{Name}}OnImplementationAsync({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{#if IsValueArg}}Check.NotNull(value, nameof(value)){{else}}{{ArgumentName}}{{/if}}{{/each}}).ConfigureAwait(false);
      {{/ifeq}}
      {{#ifeq AutoImplement 'Database'}}
        {{#ifeq Type 'GetColl'}}
            __result.Result = await {{DataArgs.Name}}.Query(__dataArgs, p => {{PrivateName}}OnQuery?.Invoke(p, {{#each CoreDataParameters}}{{{ArgumentName}}}, {{/each}}__dataArgs)).SelectQueryAsync<{{Parent.EntityCollectionName}}>().ConfigureAwait(false);
        {{else}}
            {{#unless DataExtensions}}{{#if HasDataEvents}}{{#if HasReturnValue}}var {{/if}}{{/if}}{{/unless}}{{#ifor DataExtensions HasDataEvents}}{{#if HasReturnValue}}__result = {{/if}}{{else}}{{#if HasReturnValue}}return {{/if}}{{/ifor}}await {{DataArgs.Name}}.{{Type}}Async(__dataArgs{{#each PagingLessDataParameters}}, {{#if IsValueArg}}Check.NotNull(value, nameof(value)){{else}}{{ParameterConverted}}{{/if}}{{/each}}).ConfigureAwait(false);
        {{/ifeq}}
      {{/ifeq}}
      {{#ifeq AutoImplement 'EntityFramework'}}
        {{#ifeq Type 'GetColl'}}
            __result.Result = {{DataArgs.Name}}.Query<{{BaseReturnType}}, {{Parent.EntityFrameworkModel}}>(__dataArgs, q => {{PrivateName}}OnQuery?.Invoke(q, {{#each CoreDataParameters}}{{{ArgumentName}}}, {{/each}}__dataArgs) ?? q).SelectQuery<{{BaseReturnType}}Collection>();
        {{else}}
            {{#unless DataExtensions}}{{#if HasDataEvents}}{{#if HasReturnValue}}var {{/if}}{{/if}}{{/unless}}{{#ifor DataExtensions HasDataEvents}}{{#if HasReturnValue}}__result = {{/if}}{{else}}{{#if HasReturnValue}}return {{/if}}{{/ifor}}await {{DataArgs.Name}}.{{Type}}Async<{{#ifeq BaseReturnType 'void'}}{{Parent.EntityName}}{{else}}{{BaseReturnType}}{{/ifeq}}, {{Parent.EntityFrameworkModel}}>(__dataArgs{{#each PagingLessDataParameters}}, {{#if IsValueArg}}Check.NotNull(value, nameof(value)){{else}}{{ParameterConverted}}{{/if}}{{/each}}).ConfigureAwait(false);
        {{/ifeq}}
      {{/ifeq}}
      {{#ifeq AutoImplement 'Cosmos'}}
        {{#ifeq Type 'GetColl'}}
            __result.Result = {{DataArgs.Name}}.{{#if CosmosValueContainer}}Value{{/if}}Container<{{BaseReturnType}}, {{Parent.CosmosModel}}>(__dataArgs).Query(q => {{PrivateName}}OnQuery?.Invoke(q, {{#each CoreDataParameters}}{{{ArgumentName}}}, {{/each}}__dataArgs) ?? q).SelectQuery<{{BaseReturnType}}Collection>();
        {{else}}
            {{#unless DataExtensions}}{{#if HasDataEvents}}{{#if HasReturnValue}}var {{/if}}{{/if}}{{/unless}}{{#ifor DataExtensions HasDataEvents}}{{#if HasReturnValue}}__result = {{/if}}{{else}}{{#if HasReturnValue}}return {{/if}}{{/ifor}}await {{DataArgs.Name}}.{{#if CosmosValueContainer}}Value{{/if}}Container<{{#ifeq BaseReturnType 'void'}}{{Parent.EntityName}}{{else}}{{BaseReturnType}}{{/ifeq}}, {{Parent.CosmosModel}}>(__dataArgs).{{Type}}Async({{#each PagingLessDataParameters}}{{#unless @first}}, {{/unless}}{{#if IsValueArg}}Check.NotNull(value, nameof(value)){{else}}{{ParameterConverted}}{{/if}}{{/each}}).ConfigureAwait(false);
        {{/ifeq}}
      {{/ifeq}}
      {{#ifeq AutoImplement 'OData'}}
        {{#ifeq Type 'GetColl'}}
            __result.Result = {{DataArgs.Name}}.Query<{{BaseReturnType}}, {{Parent.ODataModel}}>(__dataArgs, q => {{PrivateName}}OnQuery?.Invoke(q, {{#each CoreDataParameters}}{{{ArgumentName}}}, {{/each}}__dataArgs) ?? q).SelectQuery<{{BaseReturnType}}Collection>();
        {{else}}
            {{#unless DataExtensions}}{{#if HasDataEvents}}{{#if HasReturnValue}}var {{/if}}{{/if}}{{/unless}}{{#ifor DataExtensions HasDataEvents}}{{#if HasReturnValue}}__result = {{/if}}{{else}}{{#if HasReturnValue}}return {{/if}}{{/ifor}}await {{DataArgs.Name}}.{{Type}}Async<{{#ifeq BaseReturnType 'void'}}{{Parent.EntityName}}{{else}}{{BaseReturnType}}{{/ifeq}}, {{Parent.ODataModel}}>(__dataArgs{{#each PagingLessDataParameters}}, {{#if IsValueArg}}Check.NotNull(value, nameof(value)){{else}}{{ParameterConverted}}{{/if}}{{/each}}).ConfigureAwait(false);
        {{/ifeq}}
      {{/ifeq}}
      {{#ifeq AutoImplement 'HttpAgent'}}
            {{#unless DataExtensions}}{{#if HasDataEvents}}{{#if HasReturnValue}}var {{/if}}{{/if}}{{/unless}}{{#ifor DataExtensions HasDataEvents}}{{#if HasReturnValue}}__result = {{/if}}{{else}}{{#if HasReturnValue}}return {{/if}}{{/ifor}}{{HttpAgentSendStatement}}
      {{/ifeq}}
      {{#if DataExtensions}}
            await ({{PrivateName}}OnAfterAsync?.Invoke({{#if HasReturnValue}}__result{{/if}}{{#each CoreDataParameters}}{{#if @first}}{{#if Parent.HasReturnValue}}, {{/if}}{{else}}, {{/if}}{{ArgumentName}}{{/each}}) ?? Task.CompletedTask).ConfigureAwait(false);
      {{/if}}
      {{#ifeq EventPublish 'Data'}}
        {{#ifeq Events.Count 1}}
          {{#each Events}}
            {{#if DataEventSend}}await {{/if}}_evtPub.Publish{{#ifval Value}}Value{{/ifval}}({{#ifval Value}}{{Value}}, {{/ifval}}{{#ifval Source}}new Uri($"{{Source}}", UriKind.{{../../Root.EventSourceKind}}), {{/ifval}}$"{{Subject}}", "{{Action}}"{{#each ../ValueLessDataParameters}}, {{ArgumentName}}{{/each}}){{#if DataEventSend}}.SendAsync().ConfigureAwait(false){{/if}};
          {{/each}}
        {{else}}
          {{#ifeq Events.Count 0}}
            {{#if DataEventSend}}
            await _evtPub.SendAsync().ConfigureAwait(false);
            {{/if}}
          {{else}}
            {{#if DataEventSend}}await {{/if}}_evtPub.Publish(
            {{#each Events}}
                _evtPub.Create{{#ifval Value}}Value{{/ifval}}Event({{#ifval Value}}{{Value}}, {{/ifval}}{{#ifval Source}}new Uri($"{{Source}}", UriKind.{{../../Root.EventSourceKind}}), {{/ifval}}$"{{Subject}}", "{{Action}}"{{#each ../ValueLessDataParameters}}, {{ArgumentName}}{{/each}}){{#if @last}}){{#if DataEventSend}}.SendAsync().ConfigureAwait(false){{/if}};{{else}},{{/if}}
              {{#if @last}}

              {{/if}}
            {{/each}}
          {{/ifeq}}
        {{/ifeq}}
      {{/ifeq}}
      {{#if DataExtensions}}
        {{#if HasReturnValue}}
            return __result;
        {{/if}}
        }, new {{DataInvokerArgs}} { ExceptionHandler = {{PrivateName}}OnException{{#if DataTransaction}}, IncludeTransactionScope = true{{/if}} });
      {{else}}
        {{#if HasReturnValue}}
          {{#ifeq Type 'GetColl'}}
            return await Task.FromResult(__result).ConfigureAwait(false);
          {{else}}
            {{#if HasDataEvents}}
            return __result;
            {{/if}}
          {{/ifeq}}
        {{/if}}
        }{{#if DataTransaction}}, new {{DataInvokerArgs}} { IncludeTransactionScope = true }{{/if}});
      {{/if}}
    {{/unless}}
  {{/each}}
{{/ifne}}
{{#if UsesDatabase}}
  {{#unless DatabaseCustomMapper}}

        /// <summary>
        /// Provides the {{{EntityNameSeeComments}}} property and database column mapping.
        /// </summary>
        public partial class DbMapper : DatabaseMapper<{{EntityName}}, DbMapper>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="DbMapper"/> class.
            /// </summary>
            public DbMapper()
            {
    {{#ifval DatabaseMapperInheritsFrom}}
                InheritPropertiesFrom({{DatabaseMapperInheritsFrom}}.Default);
    {{/ifval}}
    {{#each DatabaseMapperProperties}}
                Property(s => s.{{DataMapperPropertyName}}{{#ifval DataName}}, "{{DataName}}"{{/ifval}}{{#ifne DataOperationTypes 'Any'}}, operationTypes: OperationTypes.{{DataOperationTypes}}{{/ifne}}){{#if UniqueKey}}.SetUniqueKey({{#if DataAutoGenerated}}true{{else}}false{{/if}}){{/if}}{{#ifval DataConverterCode}}{{{DataConverterCode}}}{{/ifval}}{{#ifval DatabaseDbType}}.SetDbType(System.Data.DbType.{{DatabaseDbType}}){{/ifval}}{{#ifval DatabaseMapper}}.SetMapper({{DatabaseMapper}}.Default!){{/ifval}};
    {{/each}}
    {{#ifor HasDatabaseETagProperty HasDatabaseChangeLogProperty}}
                AddStandardProperties({{#unless HasDatabaseETagProperty}}excludeETag: true{{/unless}}{{#unless HasDatabaseChangeLogProperty}}excludeChangeLog: true{{/unless}});
    {{/ifor}}
                DbMapperCtor();
            }
            
            partial void DbMapperCtor(); // Enables the DbMapper constructor to be extended.
        }
  {{/unless}}
{{/if}}
{{#if UsesEntityFramework}}
  {{#unless EntityFrameworkCustomMapper}}

        /// <summary>
        /// Provides the {{{EntityNameSeeComments}}} and Entity Framework {{{seecomments EntityFrameworkModel}}} <i>AutoMapper</i> mapping.
        /// </summary>
        public partial class EfMapperProfile : AutoMapper.Profile
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="EfMapperProfile"/> class.
            /// </summary>
            public EfMapperProfile()
            {
                var s2d = CreateMap<{{EntityName}}, {{EntityFrameworkModel}}>();
    {{#each EntityFrameworkMapperProperties}}
                s2d.ForMember(d => d.{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}, o => o.{{#ifne DataOperationTypes 'Any'}}OperationTypes(OperationTypes.{{DataOperationTypes}}).{{/ifne}}{{#ifval DataConverterName}}ConvertUsing({{DataConverterName}}.Default.ToDest, {{else}}MapFrom({{/ifval}}s => s.{{DataMapperPropertyName}}));
    {{/each}}
    {{#if HasEntityFrameworkETagProperty}}
                s2d.ForMember(d => d.RowVersion, o => o.ConvertUsing(StringToBase64Converter.Default.ToDest, s => s.ETag));
    {{/if}}
    {{#if HasEntityFrameworkChangeLogProperty}}
                s2d.ForMember(d => d.CreatedBy, o => o.OperationTypes(OperationTypes.AnyExceptUpdate).MapFrom(s => s.ChangeLog.CreatedBy));
                s2d.ForMember(d => d.CreatedDate, o => o.OperationTypes(OperationTypes.AnyExceptUpdate).MapFrom(s => s.ChangeLog.CreatedDate));
                s2d.ForMember(d => d.UpdatedBy, o => o.OperationTypes(OperationTypes.AnyExceptCreate).MapFrom(s => s.ChangeLog.UpdatedBy));
                s2d.ForMember(d => d.UpdatedDate, o => o.OperationTypes(OperationTypes.AnyExceptCreate).MapFrom(s => s.ChangeLog.UpdatedDate));
    {{/if}}

                var d2s = CreateMap<{{EntityFrameworkModel}}, {{EntityName}}>();
    {{#each EntityFrameworkAutoMapperProperties}}
                d2s.ForMember(s => s.{{DataMapperPropertyName}}, o => o.{{#ifeq EntityFrameworkMapper "Ignore"}}Ignore());{{else}}{{#ifne DataOperationTypes 'Any'}}OperationTypes(OperationTypes.{{DataOperationTypes}}).{{/ifne}}{{#ifval DataConverterName}}ConvertUsing({{DataConverterName}}.Default.ToSrce, {{else}}MapFrom({{/ifval}}d => d.{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}));{{/ifeq}}
    {{/each}}
    {{#if HasEntityFrameworkETagProperty}}
                d2s.ForMember(s => s.ETag, o => o.ConvertUsing(StringToBase64Converter.Default.ToSrce, d => d.RowVersion));
    {{/if}}
    {{#if HasEntityFrameworkChangeLogProperty}}
                d2s.ForPath(s => s.ChangeLog.CreatedBy, o => o.OperationTypes(OperationTypes.AnyExceptUpdate).MapFrom(d => d.CreatedBy));
                d2s.ForPath(s => s.ChangeLog.CreatedDate, o => o.OperationTypes(OperationTypes.AnyExceptUpdate).MapFrom(d => d.CreatedDate));
                d2s.ForPath(s => s.ChangeLog.UpdatedBy, o => o.OperationTypes(OperationTypes.AnyExceptCreate).MapFrom(d => d.UpdatedBy));
                d2s.ForPath(s => s.ChangeLog.UpdatedDate, o => o.OperationTypes(OperationTypes.AnyExceptCreate).MapFrom(d => d.UpdatedDate));
    {{/if}}

                EfMapperProfileCtor(s2d, d2s);
            }

            partial void EfMapperProfileCtor(AutoMapper.IMappingExpression<{{EntityName}}, {{EntityFrameworkModel}}> s2d, AutoMapper.IMappingExpression<{{EntityFrameworkModel}}, {{EntityName}}> d2s); // Enables the constructor to be extended.
        }
  {{/unless}}
{{/if}}
{{#if UsesCosmos}}
  {{#unless CosmosCustomMapper}}

        /// <summary>
        /// Provides the {{{EntityNameSeeComments}}} and Entity Framework {{{seecomments CosmosModel}}} <i>AutoMapper</i> mapping.
        /// </summary>
        public partial class CosmosMapperProfile : AutoMapper.Profile
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="CosmosMapperProfile"/> class.
            /// </summary>
            public CosmosMapperProfile()
            {
                var s2d = CreateMap<{{EntityName}}, {{CosmosModel}}>();
    {{#each CosmosAutoMapperProperties}}
                s2d.ForMember(d => d.{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}, o => o.{{#ifne DataOperationTypes 'Any'}}OperationTypes(OperationTypes.{{DataOperationTypes}}).{{/ifne}}{{#ifval DataConverterName}}ConvertUsing({{DataConverterName}}.Default.ToDest, {{else}}MapFrom({{/ifval}}s => s.{{DataMapperPropertyName}}));
    {{/each}}

                var d2s = CreateMap<{{CosmosModel}}, {{EntityName}}>();
    {{#each CosmosAutoMapperProperties}}
                d2s.ForMember(s => s.{{DataMapperPropertyName}}, o => o.{{#ifeq CosmosMapper "Ignore"}}Ignore());{{else}}{{#ifne DataOperationTypes 'Any'}}OperationTypes(OperationTypes.{{DataOperationTypes}}).{{/ifne}}{{#ifval DataConverterName}}ConvertUsing({{DataConverterName}}.Default.ToSrce, {{else}}MapFrom({{/ifval}}d => d.{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}));{{/ifeq}}
    {{/each}}

                CosmosMapperProfileCtor(s2d, d2s);
            }

            partial void CosmosMapperProfileCtor(AutoMapper.IMappingExpression<{{EntityName}}, {{CosmosModel}}> s2d, AutoMapper.IMappingExpression<{{CosmosModel}}, {{EntityName}}> d2s); // Enables the constructor to be extended.
        }
  {{/unless}}
{{/if}}
{{#if UsesOData}}
  {{#unless ODataCustomMapper}}

        /// <summary>
        /// Provides the {{{EntityNameSeeComments}}} and OData {{{seecomments ODataModel}}} <i>AutoMapper</i> mapping.
        /// </summary>
        public partial class ODataMapperProfile : AutoMapper.Profile
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ODataMapperProfile"/> class.
            /// </summary>
            public ODataMapperProfile()
            {
                var s2d = CreateMap<{{EntityName}}, {{ODataModel}}>();
    {{#each ODataMapperProperties}}
                s2d.ForMember(d => d.{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}, o => o.{{#ifne DataOperationTypes 'Any'}}OperationTypes(OperationTypes.{{DataOperationTypes}}).{{/ifne}}{{#ifval DataConverterName}}ConvertUsing({{DataConverterName}}.Default.ToDest, {{else}}MapFrom({{/ifval}}s => s.{{DataMapperPropertyName}}));
    {{/each}}

                var d2s = CreateMap<{{ODataModel}}, {{EntityName}}>();
    {{#each ODataMapperProperties}}
                d2s.ForMember(s => s.{{DataMapperPropertyName}}, o => o.{{#ifeq ODataMapper "Ignore"}}Ignore());{{else}}{{#ifne DataOperationTypes 'Any'}}OperationTypes(OperationTypes.{{DataOperationTypes}}).{{/ifne}}{{#ifval DataConverterName}}ConvertUsing({{DataConverterName}}.Default.ToSrce, {{else}}MapFrom({{/ifval}}d => d.{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}));{{/ifeq}}
    {{/each}}

                ODataMapperProfileCtor(s2d, d2s);
            }

            partial void ODataMapperProfileCtor(AutoMapper.IMappingExpression<{{EntityName}}, {{ODataModel}}> s2d, AutoMapper.IMappingExpression<{{ODataModel}}, {{EntityName}}> d2s); // Enables the constructor to be extended.
        }
  {{/unless}}
{{/if}}
    }
}

#pragma warning restore
#nullable restore
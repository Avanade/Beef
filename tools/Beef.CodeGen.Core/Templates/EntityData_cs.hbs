{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

{{#if Root.PreprocessorDirectives}}
#nullable enable
#pragma warning disable

{{/if}}
namespace {{Root.NamespaceBusiness}}.Data;

/// <summary>
/// Provides the {{{EntityNameSeeComments}}} data access.
/// </summary>
public partial class {{Name}}Data{{#if GenericWithT}}<T>{{/if}}{{#ifne Operations.Count 0}} : I{{Name}}Data{{#if GenericWithT}}<T>{{/if}}{{/ifne}}
{
{{#ifne Operations.Count 0}}
  {{#each DataCtorParameters}}
    private readonly {{Type}} {{PrivateName}};
  {{/each}}
  {{#if DataExtensionsRequired}}
    {{#if HasDataExtensions}}
      {{#ifne DataCtorParameters.Count 0}}

      {{/ifne}}
    #region Extensions

    {{/if}}
    {{#each DataOperations}}
      {{#ifeq Type 'GetColl'}}
        {{#ifeq AutoImplement 'Database'}}
    private Action<DatabaseParameterCollection{{#each CoreDataParameters}}, {{{ParameterType}}}{{/each}}>? {{PrivateName}}OnQuery;
        {{/ifeq}}
        {{#ifeq AutoImplement 'EntityFramework'}}
    private Func<IQueryable<{{EntityFrameworkModel}}>, {{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}IQueryable<{{EntityFrameworkModel}}>>? {{PrivateName}}OnQuery;
        {{/ifeq}}   
        {{#ifeq AutoImplement 'Cosmos'}}
          {{#ifval Parent.CosmosValueContainer}}
    private Func<IQueryable<CosmosDbValue<{{CosmosModel}}>>, {{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}IQueryable<CosmosDbValue<{{CosmosModel}}>>>? {{PrivateName}}OnQuery;
          {{else}}
    private Func<IQueryable<{{CosmosModel}}>, {{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}IQueryable<{{CosmosModel}}>>? {{PrivateName}}OnQuery;
          {{/ifval}}
        {{/ifeq}}  
        {{#ifeq AutoImplement 'OData'}}
    private Func<Soc.IBoundClient<{{Parent.ODataModel}}>, {{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}Soc.IBoundClient<{{Parent.ODataModel}}>>? {{PrivateName}}OnQuery;
        {{/ifeq}} 
      {{/ifeq}}
      {{#if DataExtensions}}
        {{#ifne AutoImplement 'None'}}
    private Func<{{#each PagingLessDataParameters}}{{{ParameterType}}}, {{/each}}{{#if Root.CancellationToken}}CancellationToken, {{/if}}Task{{#if WithResult}}<Result>{{/if}}>? {{PrivateName}}OnBeforeAsync;
    private Func<{{#if HasReturnValue}}{{OperationReturnType}}, {{/if}}{{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}{{#if Root.CancellationToken}}CancellationToken, {{/if}}Task{{#if WithResult}}<Result>{{/if}}>? {{PrivateName}}OnAfterAsync;
        {{/ifne}}
    private Action<Exception>? {{PrivateName}}OnException;
      {{/if}}
    {{#if @last}}

    {{/if}}
    {{/each}}
    {{#if HasDataExtensions}}
    #endregion

    {{/if}}
  {{else}}
    {{#ifne DataCtorParameters.Count 0}}

    {{/ifne}} 
  {{/if}}
  {{#unless DataCtorCustom}}
    {{#ifne DataCtorParameters.Count 0}}
    /// <summary>
    /// Initializes a new instance of the <see cref="{{Name}}Data"/> class.
    /// </summary>
  {{#each DataCtorParameters}}
    /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
  {{/each}}
    {{lower DataCtor}} {{Name}}Data({{#each DataCtorParameters}}{{#unless @first}}, {{/unless}}{{Type}} {{ArgumentName}}{{/each}})
  {{#ifle DataCtorParameters.Count 5}}
        { {{#each DataCtorParameters}}{{PrivateName}} = {{ArgumentName}}.ThrowIfNull(); {{/each}}{{Name}}DataCtor(); }
  {{else}}
    {
  {{#each DataCtorParameters}}
        {{PrivateName}} = {{ArgumentName}}.ThrowIfNull();
  {{/each}}
        {{Name}}DataCtor();
    }
  {{/ifle}}

    partial void {{Name}}DataCtor(); // Enables additional functionality to be added to the constructor.

    {{/ifne}}
  {{/unless}}
  {{#each DataOperations}}
    {{#unless @first}}

    {{/unless}}
    {{#if ExcludeIData}}
    /// <summary>
    /// {{{SummaryText}}}
    /// </summary>
      {{#each DataParameters}}
    /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
      {{/each}}
      {{#if Root.CancellationToken}}
    /// <param name="cancellationToken">The <see cref="CancellationToken"/>.</param>
      {{/if}}
      {{#if HasReturnValue}}
    /// <returns>{{{ReturnText}}}</returns>
      {{/if}}
    {{else}}
    /// <inheritdoc/>
    {{/if}}
    {{#if DataNoneSingleLine}}
    public {{{OperationTaskReturnType}}} {{Name}}Async({{#each DataParameters}}{{{ParameterType}}} {{ArgumentName}}{{#unless @last}}, {{/unless}}{{/each}}{{#if Root.CancellationToken}}, CancellationToken cancellationToken = default{{/if}}) => {{#if DataInvoker}}DataInvoker.Current.InvokeAsync(this, {{#if Root.CancellationToken}}(_, cancellationToken){{else}}(_, __){{/if}} => {{/if}}{{Name}}OnImplementationAsync({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}}{{#if Root.CancellationToken}}, cancellationToken{{/if}}){{#if DataInvoker}}, new InvokerArgs { {{#if DataExtensions}}ExceptionHandler = {{PrivateName}}OnException{{/if}}{{#if DataTransaction}}{{#if DataExtension}}, {{/if}}IncludeTransactionScope = true{{/if}}{{#ifeq EventPublish 'Data'}}{{#ifor DataExtensions DataTransaction}}, {{/ifor}}EventPublisher = _events{{/ifeq}} }{{/if}}{{#if DataInvoker}}){{/if}};
    {{else}}
    public {{#ifeq AutoImplement 'HttpAgent'}}{{#unless DataInvoker}}async {{/unless}}{{/ifeq}}{{{OperationTaskReturnType}}} {{Name}}Async({{#each DataParameters}}{{{ParameterType}}} {{ArgumentName}}{{#unless @last}}, {{/unless}}{{/each}}{{#if Root.CancellationToken}}, CancellationToken cancellationToken = default{{/if}}){{#if DataInvoker}} => DataInvoker.Current.InvokeAsync(this, {{#unless DataSingleLine}}{{#unless WithResult}}async {{/unless}}{{/unless}}{{#if Root.CancellationToken}}(_, cancellationToken){{else}}(_, __){{/if}} => {{/if}}
      {{#unless DataSingleLine}}
    {
      {{/unless}}
      {{#ifeq AutoImplement 'OData'}}
        var __dataArgs = ODataArgs.Create(_mapper{{#if Paging}}, r.Paging!{{/if}}{{#ifval ODataCollectionName}}, "{{ODataCollectionName}}"{{/ifval}});
      {{/ifeq}}
      {{#if DataExtensions}}
        {{#if WithResult}}
        return Result.Go{{#if HasValue}}({{ValueParameter.ArgumentName}}).ThenAsync(v => {{else}}Async({{/if}}{{PrivateName}}OnBeforeAsync?.Invoke({{#each PagingLessDataParameters}}{{#if IsValueArg}}v{{else}}{{{ArgumentName}}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}}{{#if Root.CancellationToken}}, cancellationToken{{/if}}) ?? Result.SuccessTask)
        {{else}}
        await Invoker.InvokeAsync({{PrivateName}}OnBeforeAsync?.Invoke({{#each PagingLessDataParameters}}{{{ArgumentName}}}{{#unless @last}}, {{/unless}}{{/each}}{{#if Root.CancellationToken}}, cancellationToken{{/if}})).ConfigureAwait(false);
        {{/if}}
      {{/if}}
      {{#ifeq AutoImplement 'None'}}
        {{#if WithResult}}
        {{#if DataExtensions}}             .ThenAsAsync(() =>{{else}}return Result.Go{{/if}}{{#if HasValue}}({{ValueParameter.ArgumentName}}).Then{{#if HasResultTypeChange}}As{{/if}}Async(v => {{else}}Async({{/if}}{{Name}}OnImplementationAsync({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{#if IsValueArg}}v{{else}}{{ArgumentName}}{{/if}}{{/each}}{{#if Root.CancellationToken}}, cancellationToken{{/if}})){{#if DataSingleLine}};{{/if}}
        {{else}}
        {{#ifor DataExtensions HasDataEvents}}{{#if HasReturnValue}}var r = {{/if}}{{else}}{{#if DataSingleLine}}{{else}}{{#if HasReturnValue}}return {{/if}}{{/if}}{{/ifor}}{{#unless DataSingleLine}}await {{/unless}}{{Name}}OnImplementationAsync({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{#if IsValueArg}}value{{else}}{{ArgumentName}}{{/if}}{{/each}}{{#if Root.CancellationToken}}, cancellationToken{{/if}});
        {{/if}}
      {{/ifeq}}
      {{#ifeq AutoImplement 'Database'}}
        {{#ifeq Type 'GetColl'}}
          {{#if DataSingleLine}}
        => {{DataArgs.Name}}.StoredProcedure("{{FullyQualifiedStoredProcedureName}}").Query({{DataEntityMapper}}.Default, p => {{PrivateName}}OnQuery?.Invoke(p{{#each CoreDataParameters}}, {{{ArgumentName}}}{{/each}})){{#if Paging}}.WithPaging({{PagingParameter.ArgumentName}}){{/if}}.SelectResult{{#if WithResult}}WithResult{{/if}}Async<{{BaseReturnType}}CollectionResult, {{BaseReturnType}}Collection>({{#if Root.CancellationToken}}cancellationToken{{/if}});
          {{else}}
        {{#if DataExtensions}}{{#if WithResult}}             .ThenAsAsync(() =>{{else}}var r = await{{/if}}{{else}}return{{#if WithResult}} Result.Go({{#if HasValue}}{{ValueParameter.ArgumentName}}{{/if}}){{/if}}{{/if}} {{DataArgs.Name}}.StoredProcedure("{{FullyQualifiedStoredProcedureName}}").Query({{DataEntityMapper}}.Default, p => {{PrivateName}}OnQuery?.Invoke(p{{#each CoreDataParameters}}, {{{ArgumentName}}}{{/each}})){{#if Paging}}.WithPaging({{PagingParameter.ArgumentName}}){{/if}}.SelectResult{{#if WithResult}}WithResult{{/if}}Async<{{BaseReturnType}}CollectionResult, {{BaseReturnType}}Collection>({{#if Root.CancellationToken}}cancellationToken{{/if}}){{#if DataExtensions}}{{#unless WithResult}}.ConfigureAwait(false){{/unless}}{{/if}}{{#if WithResult}}){{else}};{{/if}}
          {{/if}}
        {{else}}
          {{#if DataSingleLine}}
        => {{DataArgs.Name}}.StoredProcedure("{{FullyQualifiedStoredProcedureName}}").{{Type}}{{#if WithResult}}WithResult{{/if}}Async({{DataEntityMapper}}.Default{{#if HasValue}}, {{ValueParameter.ArgumentName}}{{/if}}{{#each ValueLessDataParameters}}{{#if @first}}, {{#ifne Parent.ValueLessDataParameters.Count 1}}CompositeKey.Create({{/ifne}}{{else}}, {{/if}}{{ParameterConverted}}{{#if @last}}{{#ifne Parent.ValueLessDataParameters.Count 1}}){{/ifne}}{{/if}}{{/each}}{{#if Root.CancellationToken}}, cancellationToken{{/if}});
          {{else}}
        {{#if WithResult}}{{#if DataExtensions}}             {{else}}return Result.Go({{#if HasValue}}{{ValueParameter.ArgumentName}}{{/if}}){{/if}}.Then{{#if HasResultTypeChange}}As{{/if}}Async({{#if HasValue}}v => {{else}}() => {{/if}}{{else}}{{#ifor DataExtensions HasDataEvents}}{{#if HasReturnValue}}var r = {{/if}}{{else}}{{#ifor DataSingleLine HasReturnValue}}return {{/ifor}}{{/ifor}}await {{/if}}{{DataArgs.Name}}.StoredProcedure("{{FullyQualifiedStoredProcedureName}}").{{Type}}{{#if WithResult}}WithResult{{/if}}Async({{DataEntityMapper}}.Default{{#if HasValue}}, value{{/if}}{{#each ValueLessDataParameters}}{{#if @first}}, {{#ifne Parent.ValueLessDataParameters.Count 1}}CompositeKey.Create({{/ifne}}{{else}}, {{/if}}{{ParameterConverted}}{{#if @last}}{{#ifne Parent.ValueLessDataParameters.Count 1}}){{/ifne}}{{/if}}{{/each}}{{#if Root.CancellationToken}}, cancellationToken{{/if}}){{#if WithResult}}){{else}}.ConfigureAwait(false);{{/if}}
          {{/if}}
        {{/ifeq}}
      {{/ifeq}}
      {{#ifeq AutoImplement 'EntityFramework'}}
        {{#ifeq Type 'GetColl'}}
          {{#if DataSingleLine}}
        => {{DataArgs.Name}}.Query<{{BaseReturnType}}, {{EntityFrameworkModel}}>(q => {{PrivateName}}OnQuery?.Invoke(q{{#each CoreDataParameters}}, {{{ArgumentName}}}{{/each}}) ?? q){{#if Paging}}.WithPaging({{PagingParameter.ArgumentName}}){{/if}}.SelectResult{{#if WithResult}}WithResult{{/if}}Async<{{BaseReturnType}}CollectionResult, {{BaseReturnType}}Collection>({{#if Root.CancellationToken}}cancellationToken{{/if}});
          {{else}}
        {{#if DataExtensions}}{{#if WithResult}}             .ThenAsAsync(() =>{{else}}var r = await{{/if}}{{else}}return{{#if WithResult}} Result.Go({{#if HasValue}}{{ValueParameter.ArgumentName}}{{/if}}){{/if}}{{/if}} {{DataArgs.Name}}.Query<{{BaseReturnType}}, {{EntityFrameworkModel}}>(q => {{PrivateName}}OnQuery?.Invoke(q{{#each CoreDataParameters}}, {{{ArgumentName}}}{{/each}}) ?? q){{#if Paging}}.WithPaging({{PagingParameter.ArgumentName}}){{/if}}.SelectResult{{#if WithResult}}WithResult{{/if}}Async<{{BaseReturnType}}CollectionResult, {{BaseReturnType}}Collection>({{#if Root.CancellationToken}}cancellationToken{{/if}}){{#if DataExtensions}}{{#unless WithResult}}.ConfigureAwait(false){{/unless}}{{/if}}{{#if WithResult}}){{else}};{{/if}}
          {{/if}}
        {{else}}
          {{#if DataSingleLine}}
        => {{DataArgs.Name}}.{{Type}}{{#if WithResult}}WithResult{{/if}}Async<{{#ifeq BaseReturnType 'void'}}{{Parent.EntityName}}{{else}}{{BaseReturnType}}{{/ifeq}}, {{EntityFrameworkModel}}>({{#if HasValue}}{{ValueParameter.ArgumentName}}{{#ifne ValueLessDataParameters.Count 0}}, {{/ifne}}{{/if}}{{#each ValueLessDataParameters}}{{#if @first}}{{#ifne Parent.ValueLessDataParameters.Count 1}}CompositeKey.Create({{/ifne}}{{/if}}{{ParameterConverted}}{{#if @last}}{{#ifne Parent.ValueLessDataParameters.Count 1}}){{/ifne}}{{else}}), {{/if}}{{/each}}{{#if Root.CancellationToken}}, cancellationToken{{/if}});
          {{else}}
        {{#if WithResult}}{{#if DataExtensions}}             {{else}}return Result.Go({{#if HasValue}}{{ValueParameter.ArgumentName}}{{/if}}){{/if}}.Then{{#if HasResultTypeChange}}As{{/if}}Async({{#if HasValue}}v => {{else}}() => {{/if}}{{else}}{{#ifor DataExtensions HasDataEvents}}{{#if HasReturnValue}}var r = {{/if}}{{else}}{{#ifor DataSingleLine HasReturnValue}}return {{/ifor}}{{/ifor}}await {{/if}}{{DataArgs.Name}}.{{Type}}{{#if WithResult}}WithResult{{/if}}Async<{{#ifeq BaseReturnType 'void'}}{{Parent.EntityName}}{{else}}{{BaseReturnType}}{{/ifeq}}, {{EntityFrameworkModel}}>({{#if HasValue}}{{#if WithResult}}v{{else}}value{{/if}}{{#ifne ValueLessDataParameters.Count 0}}, {{/ifne}}{{/if}}{{#each ValueLessDataParameters}}{{#if @first}}{{#ifne Parent.ValueLessDataParameters.Count 1}}CompositeKey.Create({{/ifne}}{{/if}}{{ParameterConverted}}{{#if @last}}{{#ifne Parent.ValueLessDataParameters.Count 1}}){{/ifne}}{{else}}), {{/if}}{{/each}}{{#if Root.CancellationToken}}, cancellationToken{{/if}}){{#if WithResult}}){{else}}.ConfigureAwait(false);{{/if}}
          {{/if}}
        {{/ifeq}}
      {{/ifeq}}
      {{#ifeq AutoImplement 'Cosmos'}}
        {{#ifeq Type 'GetColl'}}
          {{#if DataSingleLine}}
        => {{DataArgs.Name}}.{{CosmosContainerId}}.Query({{#ifval CosmosPartitionKeyCode}}{{CosmosPartitionKeyCode}}, {{/ifval}}q => {{PrivateName}}OnQuery?.Invoke(q{{#each CoreDataParameters}}, {{{ArgumentName}}}{{/each}}) ?? q){{#if Paging}}.WithPaging({{PagingParameter.ArgumentName}}){{/if}}.SelectResult{{#if WithResult}}WithResult{{/if}}Async<{{BaseReturnType}}CollectionResult, {{BaseReturnType}}Collection>({{#if Root.CancellationToken}}cancellationToken{{/if}});
          {{else}}
        {{#if DataExtensions}}{{#if WithResult}}             .ThenAsAsync(() =>{{else}}var r = await{{/if}}{{else}}return{{#if WithResult}} Result.Go({{#if HasValue}}{{ValueParameter.ArgumentName}}{{/if}}){{/if}}{{/if}} {{DataArgs.Name}}.{{CosmosContainerId}}.Query({{#ifval CosmosPartitionKeyCode}}{{CosmosPartitionKeyCode}}, {{/ifval}}q => {{PrivateName}}OnQuery?.Invoke(q{{#each CoreDataParameters}}, {{{ArgumentName}}}{{/each}}) ?? q){{#if Paging}}.WithPaging({{PagingParameter.ArgumentName}}){{/if}}.SelectResult{{#if WithResult}}WithResult{{/if}}Async<{{BaseReturnType}}CollectionResult, {{BaseReturnType}}Collection>({{#if Root.CancellationToken}}cancellationToken{{/if}}){{#if DataExtensions}}{{#unless WithResult}}.ConfigureAwait(false){{/unless}}{{/if}}{{#if WithResult}}){{else}};{{/if}}
          {{/if}}
        {{else}}
          {{#if DataSingleLine}}
        => {{DataArgs.Name}}.{{CosmosContainerId}}.{{Type}}{{#if WithResult}}WithResult{{/if}}Async({{#if HasValue}}{{ValueParameter.ArgumentName}}{{#ifne ValueLessDataParameters.Count 0}}, {{/ifne}}{{/if}}{{#each ValueLessDataParameters}}{{#unless @first}}, {{/unless}}{{ParameterConverted}}{{/each}}{{#if Root.CancellationToken}}, cancellationToken{{/if}});
          {{else}}
        {{#if WithResult}}{{#if DataExtensions}}             {{else}}return Result.Go({{#if HasValue}}{{ValueParameter.ArgumentName}}{{/if}}){{/if}}.Then{{#if HasResultTypeChange}}As{{/if}}Async({{#if HasValue}}v => {{else}}() => {{/if}}{{else}}{{#ifor DataExtensions HasDataEvents}}{{#if HasReturnValue}}var r = {{/if}}{{else}}{{#ifor DataSingleLine HasReturnValue}}return {{/ifor}}{{/ifor}}await {{/if}}{{DataArgs.Name}}.{{CosmosContainerId}}.{{Type}}{{#if WithResult}}WithResult{{/if}}Async({{#if HasValue}}value{{#ifne ValueLessDataParameters.Count 0}}, {{/ifne}}{{/if}}{{#each ValueLessDataParameters}}{{#unless @first}}, {{/unless}}{{ParameterConverted}}{{/each}}{{#if Root.CancellationToken}}, cancellationToken{{/if}}){{#if WithResult}}){{else}}.ConfigureAwait(false);{{/if}}
          {{/if}}
        {{/ifeq}}
      {{/ifeq}}
      {{#ifeq AutoImplement 'OData'}}
        {{#ifeq Type 'GetColl'}}
        r.Collection = {{DataArgs.Name}}.Query<{{BaseReturnType}}, {{Parent.ODataModel}}>(__dataArgs, q => {{PrivateName}}OnQuery?.Invoke(q, {{#each CoreDataParameters}}{{{ArgumentName}}}, {{/each}}__dataArgs) ?? q).Select{{#if WithResult}}WithResult{{/if}}Query<{{BaseReturnType}}Collection>();
        {{else}}
        {{#unless DataExtensions}}{{#if HasDataEvents}}{{#if HasReturnValue}}var {{/if}}{{/if}}{{/unless}}{{#ifor DataExtensions HasDataEvents}}{{#if HasReturnValue}}r = {{/if}}{{else}}{{#if HasReturnValue}}return {{/if}}{{/ifor}}await {{DataArgs.Name}}.{{Type}}{{#if WithResult}}WithResult{{/if}}Async<{{#ifeq BaseReturnType 'void'}}{{Parent.EntityName}}{{else}}{{BaseReturnType}}{{/ifeq}}, {{Parent.ODataModel}}>(__dataArgs{{#each PagingLessDataParameters}}, {{#if IsValueArg}}value{{else}}{{ParameterConverted}}{{/if}}{{/each}}).ConfigureAwait(false);
        {{/ifeq}}
      {{/ifeq}}
      {{#ifeq AutoImplement 'HttpAgent'}}
        {{#if DataSingleLine}}
        {{#if WithResult}}=> {{else}}{{#if HasReturnValue}}return {{/if}}{{/if}}{{HttpAgentSendStatement}};
        {{else}}
          {{#if Withresult}}
            {{#unless DataExtensions}}
        return Result.Go({{#if HasValue}}{{ValueParameter.ArgumentName}}{{/if}})
            {{/unless}}
          {{/if}}
                     {{#if WithResult}}.Then{{#if HasResultTypeChange}}As{{/if}}Async(async {{#if HasValue}}v{{else}}(){{/if}} => {{else}}{{#if HasReturnValue}}var r = {{/if}}{{/if}}{{HttpAgentSendStatement}}{{#if WithResult}}){{#unless DataExtensions}}{{#ifne EventPublish 'Data'}};{{/ifne}}{{/unless}}{{else}};{{/if}}
        {{/if}}  
    {{/ifeq}}
      {{#if DataExtensions}}
        {{#if WithResult}}
                     .ThenAsync({{#if HasReturnValue}}r{{else}}(){{/if}} => {{PrivateName}}OnAfterAsync?.Invoke({{#if HasReturnValue}}r{{/if}}{{#each CoreDataParameters}}{{#if @first}}{{#if Parent.HasReturnValue}}, {{/if}}{{else}}, {{/if}}{{ArgumentName}}{{/each}}) ?? Result.SuccessTask){{#ifne EventPublish 'Data'}};{{/ifne}}
        {{else}}
        await Invoker.InvokeAsync({{PrivateName}}OnAfterAsync?.Invoke({{#if HasReturnValue}}r{{/if}}{{#each CoreDataParameters}}{{#if @first}}{{#if Parent.HasReturnValue}}, {{/if}}{{else}}, {{/if}}{{ArgumentName}}{{/each}})).ConfigureAwait(false);
        {{/if}}
      {{/if}}
      {{#ifeq EventPublish 'Data'}}
        {{#ifeq Events.Count 1}}
          {{#each Events}}
            {{#if Parent.WithResult}}
                     .Then({{#if Parent.HasReturnValue}}r{{else}}(){{/if}} => _events.Publish{{#ifval Value}}Value{{/ifval}}Event({{#ifval Value}}{{Value}}, {{/ifval}}{{#ifval Source}}new Uri($"{{Source}}", UriKind.{{../../Root.EventSourceKind}}), {{/ifval}}$"{{Subject}}", "{{Action}}"));
            {{else}}
        _events.Publish{{#ifval Value}}Value{{/ifval}}Event({{#ifval Value}}{{Value}}, {{/ifval}}{{#ifval Source}}new Uri($"{{Source}}", UriKind.{{../../Root.EventSourceKind}}), {{/ifval}}$"{{Subject}}", "{{Action}}");
            {{/if}}
          {{/each}}
        {{else}}
          {{#ifeq Events.Count 0}}
          {{else}}
        {{#if WithResult}}             .Then({{#if HasReturnValue}}r{{else}}(){{/if}} => {{/if}}_events.Publish(
            {{#each Events}}
            {{#if Parent.WithResult}}             {{/if}}_events.Create{{#ifval Value}}Value{{/ifval}}Event({{#ifval Value}}{{Value}}, {{/ifval}}{{#ifval Source}}new Uri($"{{Source}}", UriKind.{{../../Root.EventSourceKind}}), {{/ifval}}$"{{Subject}}", "{{Action}}"){{#if @last}}){{#if Parent.WithResult}}){{/if}};{{else}},{{/if}}
              {{#if @last}}
                {{#unless Parent.WithResult}}

                {{/unless}}
              {{/if}}
            {{/each}}
          {{/ifeq}}
        {{/ifeq}}
      {{/ifeq}}
      {{#if DataExtensions}}
        {{#if HasReturnValue}}
         {{#unless WithResult}}
        return r;
         {{/unless}}
        {{/if}}
    }, new InvokerArgs { ExceptionHandler = {{PrivateName}}OnException{{#if DataTransaction}}, IncludeTransactionScope = true{{/if}}{{#ifeq EventPublish 'Data'}}, EventPublisher = _events{{/ifeq}} }{{#if Root.CancellationToken}}, cancellationToken{{/if}});
      {{else}}
        {{#if HasReturnValue}}
          {{#ifne Type 'GetColl'}}
            {{#if HasDataEvents}}
              {{#unless WithResult}}
        return r;
              {{/unless}}
            {{/if}}
          {{/ifne}}
        {{/if}}
        {{#unless DataSingleLine}}
    }{{#if DataInvoker}}{{#if DataTransaction}}, new InvokerArgs { IncludeTransactionScope = true{{#ifeq EventPublish 'Data'}}, EventPublisher = _events{{/ifeq}} }{{else}}{{#ifeq EventPublish 'Data'}}, new InvokerArgs { EventPublisher = _events }{{/ifeq}}{{/if}}{{#if Root.CancellationToken}}, cancellationToken{{/if}});{{/if}}
        {{/unless}}
      {{/if}}
    {{/if}}
  {{/each}}
{{/ifne}}
{{#if UsesDatabase}}
  {{#unless DatabaseCustomMapper}}

    /// <summary>
    /// Provides the {{{EntityNameSeeComments}}} property and database column mapping.
    /// </summary>
   {{#unless DatabaseMapperEx}}
    public partial class DbMapper : DatabaseMapper<{{EntityName}}, DbMapper>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DbMapper"/> class.
        /// </summary>
        public DbMapper()
        {
    {{#ifval DatabaseMapperInheritsFrom}}
            InheritPropertiesFrom({{DatabaseMapperInheritsFrom}}.Default);
    {{/ifval}}
    {{#each DatabaseMapperProperties}}
            Property(s => s.{{DataMapperPropertyName}}{{#ifval DataName}}, "{{DataName}}"{{/ifval}}{{#ifne DataOperationTypes 'Any'}}, operationTypes: OperationTypes.{{DataOperationTypes}}{{/ifne}}){{#if PrimaryKey}}.SetPrimaryKey({{#if DataAutoGenerated}}true{{else}}false{{/if}}){{/if}}{{#ifval DataConverterCode}}{{{DataConverterCode}}}{{/ifval}}{{#ifval DatabaseDbType}}.SetDbType(System.Data.DbType.{{DatabaseDbType}}){{/ifval}}{{#ifval DatabaseMapper}}.SetMapper({{DatabaseMapper}}.Default!){{/ifval}};
    {{/each}}
    {{#if HasDatabaseETagProperty}}
            Property(s => s.ETag, "RowVersion", operationTypes: OperationTypes.AnyExceptCreate).SetConverter({{Root.ETagDefaultMapperConverter}}.Default);
    {{/if}}
    {{#if  HasDatabaseChangeLogProperty}}
            Property(s => s.ChangeLog).SetMapper(ChangeLogExDatabaseMapper.Default);
    {{/if}}
            DbMapperCtor();
        }
            
        partial void DbMapperCtor(); // Enables the DbMapper constructor to be extended.
    }
   {{else}}
    public partial class DbMapper : DatabaseMapperEx<{{EntityName}}, DbMapper>
    {
    {{#ifval DatabaseMapperInheritsFrom}}
        /// <summary>
        /// Initializes a new instance of the <see cref="DbMapper"/> class.
        /// </summary>
        public DbMapper() => InheritMapper({{DatabaseMapperInheritsFrom}}.Default);

    {{/ifval}}
        /// <inheritdoc />
        protected override void OnMapToDb({{EntityName}} value, DatabaseParameterCollection parameters, OperationTypes operationType)
        {
    {{#each DatabaseMapperProperties}}
      {{#ifval DatabaseMapper}}
            {{#ifne DataOperationTypes 'Any'}}When{{DataOperationTypes}}(operationType, () => {{/ifne}}{{DatabaseMapper}}.Default.MapToDb(value.{{DataMapperPropertyName}}, parameters, operationType){{#ifne DataOperationTypes 'Any'}}){{/ifne}};
      {{else}}
            {{#ifne DataOperationTypes 'Any'}}When{{DataOperationTypes}}(operationType, () => {{/ifne}}parameters.AddParameter("{{#ifval DataName}}{{DataName}}{{else}}{{DataMapperPropertyName}}{{/ifval}}", {{#ifval DataConverterName}}{{DataConverterName}}.ConvertToDestination({{/ifval}}value.{{DataMapperPropertyName}}{{#ifval DataConverterName}}){{/ifval}}{{#ifval DatabaseDbType}}, System.Data.DbType.{{DatabaseDbType}}{{/ifval}}){{#if PrimaryKey}}{{#if DataAutoGenerated}}.SetDirectionToOutputOnCreate(operationType){{/if}}{{/if}}{{#ifne DataOperationTypes 'Any'}}){{/ifne}};
      {{/ifval}}
    {{/each}}
    {{#if HasDatabaseETagProperty}}
            WhenAnyExceptCreate(operationType, () => parameters.AddParameter(parameters.Database.DatabaseColumns.RowVersionName, {{Root.ETagDefaultMapperConverter}}.Default.ConvertToDestination(value.ETag)));
    {{/if}}
    {{#if HasDatabaseChangeLogProperty}}
            ChangeLogExDatabaseMapper.Default.MapToDb(value.ChangeLog, parameters, operationType);
    {{/if}}
            OnMapToDbEx(value, parameters, operationType);
        }

        /// <inheritdoc />
        protected override void OnMapFromDb(DatabaseRecord record, {{EntityName}} value, OperationTypes operationType)
        {
    {{#each DatabaseMapperProperties}}
      {{#ifval DatabaseMapper}}
            {{#ifne DataOperationTypes 'Any'}}When{{DataOperationTypes}}(operationType, () => {{/ifne}}value.{{DataMapperPropertyName}} = {{DatabaseMapper}}.Default.MapFromDb(record, operationType){{#ifne DataOperationTypes 'Any'}}){{/ifne}};
      {{else}}
            {{#ifne DataOperationTypes 'Any'}}When{{DataOperationTypes}}(operationType, () => {{/ifne}}value.{{DataMapperPropertyName}} = {{#ifval DataConverterName}}({{PropertyType}}){{DataConverterName}}.ConvertToSource(record.GetValue{{else}}record.GetValue<{{ModelType}}>{{/ifval}}("{{#ifval DataName}}{{DataName}}{{else}}{{DataMapperPropertyName}}{{/ifval}}"){{#ifval DataConverterName}}){{/ifval}}{{#ifne DataOperationTypes 'Any'}}){{/ifne}};
      {{/ifval}}
    {{/each}}
    {{#if HasDatabaseETagProperty}}
            WhenAnyExceptCreate(operationType, () => value.ETag = (string?){{Root.ETagDefaultMapperConverter}}.Default.ConvertToSource(record.GetValue(record.Database.DatabaseColumns.RowVersionName)));
    {{/if}}
    {{#if HasDatabaseChangeLogProperty}}
            value.ChangeLog = ChangeLogExDatabaseMapper.Default.MapFromDb(record, operationType);
    {{/if}}
            OnMapFromDbEx(record, value, operationType);
        }
    {{#ifne DatabasePrimaryKeyProperties.Count 0}}

        /// <inheritdoc />
        protected override void OnMapKeyToDb(CompositeKey key, DatabaseParameterCollection parameters)
        {
            key.AssertLength({{DatabasePrimaryKeyProperties.Count}});
      {{#each DatabasePrimaryKeyProperties}}
            parameters.AddParameter("{{#ifval DataName}}{{DataName}}{{else}}{{DataMapperPropertyName}}{{/ifval}}", {{#ifval DataConverterName}}{{DataConverterName}}.ConvertToDestination({{/ifval}}key.Args[{{@index}}]{{#ifval DataConverterName}}){{/ifval}}{{#ifval DatabaseDbType}}, System.Data.DbType.{{DatabaseDbType}}{{/ifval}}){{#if PrimaryKey}}{{/if}};
      {{/each}}
            OnMapKeyToDbEx(key, parameters);
        }
    {{/ifne}}

        partial void OnMapToDbEx({{EntityName}} value, DatabaseParameterCollection parameters, OperationTypes operationType); // Enables the DbMapper.OnMapToDb to be extended.
        partial void OnMapFromDbEx(DatabaseRecord record, {{EntityName}} value, OperationTypes operationType); // Enables the DbMapper.OnMapFromDb to be extended.
    {{#ifne DatabasePrimaryKeyProperties.Count 0}}
        partial void OnMapKeyToDbEx(CompositeKey key, DatabaseParameterCollection parameters); // Enables the DbMapper.OnMapKeyToDb to be extended.
    {{/ifne}}
    }
   {{/unless}}
  {{/unless}}
{{/if}}
{{#if UsesEntityFramework}}
 {{#ifval EntityFrameworkModel}}
  {{#unless EntityFrameworkCustomMapper}}

    /// <summary>
    /// Provides the {{{EntityNameSeeComments}}} to Entity Framework {{{see-comments EntityFrameworkModel}}} mapping.
    /// </summary>
    public partial class EntityToModelEfMapper : Mapper<{{EntityName}}, {{EntityFrameworkModel}}>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityToModelEfMapper"/> class.
        /// </summary>
        public EntityToModelEfMapper()
        {
    {{#ifval EntityFrameworkMapperBase}}
            Base<{{EntityFrameworkMapperBase}}.EntityToModelEfMapper>();
    {{/ifval}}
    {{#each EntityFrameworkMapperProperties}}
            {{EntityFrameworkDataMapperToModelCode}}
    {{/each}}
            EntityToModelEfMapperCtor();
        }

        partial void EntityToModelEfMapperCtor(); // Enables the constructor to be extended.
    {{#if HasEntityFrameworkChangeLogProperty}}

        /// <inheritdoc/>
        protected override void OnRegister(Mapper<{{EntityName}}, {{EntityFrameworkModel}}> mapper) => mapper.Owner.Register(new Mapper<ChangeLogEx, {{EntityFrameworkModel}}>()
            .Map((s, d) => d.CreatedBy = s.CreatedBy, OperationTypes.AnyExceptUpdate)
            .Map((s, d) => d.CreatedDate = s.CreatedDate, OperationTypes.AnyExceptUpdate)
            .Map((s, d) => d.UpdatedBy = s.UpdatedBy, OperationTypes.AnyExceptCreate)
            .Map((s, d) => d.UpdatedDate = s.UpdatedDate, OperationTypes.AnyExceptCreate));
    {{/if}}
    }

    /// <summary>
    /// Provides the Entity Framework {{{see-comments EntityFrameworkModel}}} to {{{EntityNameSeeComments}}} mapping.
    /// </summary>
    public partial class ModelToEntityEfMapper : Mapper<{{EntityFrameworkModel}}, {{EntityName}}>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelToEntityEfMapper"/> class.
        /// </summary>
        public ModelToEntityEfMapper()
        {
    {{#ifval EntityFrameworkMapperBase}}
            Base<{{EntityFrameworkMapperBase}}.ModelToEntityEfMapper>();
    {{/ifval}}
    {{#each EntityFrameworkMapperProperties}}
            {{EntityFrameworkDataMapperFromModelCode}}
    {{/each}}
            ModelToEntityEfMapperCtor();
        }

        partial void ModelToEntityEfMapperCtor(); // Enables the constructor to be extended.
    {{#if HasEntityFrameworkChangeLogProperty}}

        /// <inheritdoc/>
        protected override void OnRegister(Mapper<{{EntityFrameworkModel}}, {{EntityName}}> mapper) => mapper.Owner.Register(new Mapper<{{EntityFrameworkModel}}, ChangeLogEx>()
            .Map((s, d) => d.CreatedBy = s.CreatedBy, OperationTypes.AnyExceptUpdate)
            .Map((s, d) => d.CreatedDate = s.CreatedDate, OperationTypes.AnyExceptUpdate)
            .Map((s, d) => d.UpdatedBy = s.UpdatedBy, OperationTypes.AnyExceptCreate)
            .Map((s, d) => d.UpdatedDate = s.UpdatedDate, OperationTypes.AnyExceptCreate));
    {{/if}}
    }
  {{/unless}}
 {{/ifval}}
{{/if}}
{{#if UsesCosmos}}
 {{#ifval CosmosModel}}
  {{#unless CosmosCustomMapper}}

    /// <summary>
    /// Provides the {{{EntityNameSeeComments}}} to Cosmos {{{see-comments CosmosModel}}} mapping.
    /// </summary>
    public partial class EntityToModelCosmosMapper : Mapper<{{EntityName}}, {{CosmosModel}}>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityToModelCosmosMapper"/> class.
        /// </summary>
        public EntityToModelCosmosMapper()
        {
    {{#ifval CosmosMapperBase}}
            Base<{{CosmosMapperBase}}.EntityToModelCosmosMapper>();
    {{/ifval}}
    {{#each CosmosMapperProperties}}
            {{CosmosDataMapperToModelCode}}
    {{/each}}
            EntityToModelCosmosMapperCtor();
        }

        partial void EntityToModelCosmosMapperCtor(); // Enables the constructor to be extended.
    }

    /// <summary>
    /// Provides the Cosmos {{{see-comments CosmosModel}}} to {{{EntityNameSeeComments}}} mapping.
    /// </summary>
    public partial class ModelToEntityCosmosMapper : Mapper<{{CosmosModel}}, {{EntityName}}>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelToEntityCosmosMapper"/> class.
        /// </summary>
        public ModelToEntityCosmosMapper()
        {
    {{#ifval CosmosMapperBase}}
            Base<{{CosmosMapperBase}}.ModelToEntityCosmosMapper>();
    {{/ifval}}
    {{#each CosmosMapperProperties}}
            {{CosmosDataMapperFromModelCode}}
    {{/each}}
            ModelToEntityCosmosMapperCtor();
        }

        partial void ModelToEntityCosmosMapperCtor(); // Enables the constructor to be extended.
    }
  {{/unless}}
 {{/ifval}}
{{/if}}
{{#if UsesOData}}
  {{#unless ODataCustomMapper}}

    /// <summary>
    /// Provides the {{{EntityNameSeeComments}}} and OData {{{see-comments ODataModel}}} <i>AutoMapper</i> mapping.
    /// </summary>
    public partial class ODataMapperProfile : AutoMapper.Profile
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ODataMapperProfile"/> class.
        /// </summary>
        public ODataMapperProfile()
        {
            var s2d = CreateMap<{{EntityName}}, {{ODataModel}}>();
    {{#each ODataMapperProperties}}
            s2d.ForMember(d => d.{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}, o => o.{{#ifne DataOperationTypes 'Any'}}OperationTypes(OperationTypes.{{DataOperationTypes}}).{{/ifne}}{{#ifval MapperDataConverterName}}ConvertUsing({{MapperDataConverterName}}.ToDestination, {{else}}MapFrom({{/ifval}}s => s.{{DataMapperPropertyName}}));
    {{/each}}

            var d2s = CreateMap<{{ODataModel}}, {{EntityName}}>();
    {{#each ODataMapperProperties}}
            d2s.ForMember(s => s.{{DataMapperPropertyName}}, o => o.{{#ifeq ODataMapper "Ignore"}}Ignore());{{else}}{{#ifne DataOperationTypes 'Any'}}OperationTypes(OperationTypes.{{DataOperationTypes}}).{{/ifne}}{{#ifval MapperDataConverterName}}ConvertUsing({{MapperDataConverterName}}.ToSource, {{else}}MapFrom({{/ifval}}d => d.{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}));{{/ifeq}}
    {{/each}}

            ODataMapperProfileCtor(s2d, d2s);
        }

        partial void ODataMapperProfileCtor(AutoMapper.IMappingExpression<{{EntityName}}, {{ODataModel}}> s2d, AutoMapper.IMappingExpression<{{ODataModel}}, {{EntityName}}> d2s); // Enables the constructor to be extended.
    }
  {{/unless}}
{{/if}}
{{#if UsesHttpAgent}}
  {{#unless HttpAgentCustomMapper}}

    /// <summary>
    /// Provides the {{{EntityNameSeeComments}}} to Entity Framework {{{see-comments HttpAgentModel}}} mapping.
    /// </summary>
    public partial class EntityToModelHttpAgentMapper : Mapper<{{EntityName}}, {{HttpAgentModel}}>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityToModelHttpAgentMapper"/> class.
        /// </summary>
        public EntityToModelHttpAgentMapper()
        {
    {{#ifval HttpAgentMapperBase}}
            Base<{{HttpAgentMapperBase}}.EntityToModelHttpAgentMapper>();
    {{/ifval}}
    {{#each HttpAgentMapperProperties}}
            {{HttpAgentDataMapperToModelCode}}
    {{/each}}
            EntityToModelHttpAgentMapperCtor();
        }

        partial void EntityToModelHttpAgentMapperCtor(); // Enables the constructor to be extended.
    }

    /// <summary>
    /// Provides the Entity Framework {{{see-comments HttpAgentModel}}} to {{{EntityNameSeeComments}}} mapping.
    /// </summary>
    public partial class ModelToEntityHttpAgentMapper : Mapper<{{HttpAgentModel}}, {{EntityName}}>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelToEntityHttpAgentMapper"/> class.
        /// </summary>
        public ModelToEntityHttpAgentMapper()
        {
    {{#ifval HttpAgentMapperBase}}
            Base<{{HttpAgentMapperBase}}.ModelToEntityHttpAgentMapper>();
    {{/ifval}}
    {{#each HttpAgentMapperProperties}}
            {{HttpAgentDataMapperFromModelCode}}
    {{/each}}
            ModelToEntityHttpAgentMapperCtor();
        }

        partial void ModelToEntityHttpAgentMapperCtor(); // Enables the constructor to be extended.
    }
  {{/unless}}
{{/if}}
}{{#if Root.PreprocessorDirectives}}

#pragma warning restore
#nullable restore{{/if}}
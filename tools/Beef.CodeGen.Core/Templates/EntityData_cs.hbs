{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
{{#if UsesCosmos}}
using Microsoft.Azure.Cosmos;
{{/if}}
using Beef;
using Beef.Business;
{{#if UsesCosmos}}
using Beef.Data.Cosmos;
  {{#ifval Root.CosmosUsingNamespace}}
using {{Root.CosmosUsingNamespace}};
  {{/ifval}}
{{/if}}
{{#if UsesDatabase}}
using Beef.Data.Database;
  {{#ifval Root.DatabaseUsingNamespace}}
using {{Root.DatabaseUsingNamespace}};
  {{/ifval}}
{{/if}}
{{#if UsesEntityFramework}}
using Beef.Data.EntityFrameworkCore;
  {{#ifval Root.EntityFrameworkUsingNamespace}}
using {{Root.EntityFrameworkUsingNamespace}};
  {{/ifval}}
{{/if}}
{{#if UsesOData}}
using Beef.Data.OData;
  {{#ifval Root.ODataUsingNamespace}}
using {{Root.ODataUsingNamespace}};
  {{/ifval}}
{{/if}}
using Beef.Entities;
using Beef.Mapper;
using Beef.Mapper.Converters;
{{#ifeq Root.EntityUsing 'Common' 'All'}}
using {{Root.NamespaceCommon}}.Entities;
{{/ifeq}}
{{#ifeq Root.EntityUsing 'Business' 'All'}}
using {{Root.NamespaceBusiness}}.Entities;
{{/ifeq}}
{{#ifval Root.RefDataNamespace}}
using RefDataNamespace = {{Root.RefDataNamespace}};
{{/ifval}}
{{#ifval Root.RefDataBusNamespace}}
using RefDataNamespace = {{Root.RefDataBusNamespace}};
{{/ifval}}
{{#if UsesOData}}
using Soc = Simple.OData.Client;
{{/if}}

namespace {{Root.NamespaceBusiness}}.Data
{
    /// <summary>
    /// Provides the {{{EntityNameSeeComments}}} data access.
    /// </summary>
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1052:Static holder types should be Static or NotInheritable", Justification = "Will not always appear static depending on code-gen options")]
    public partial class {{Name}}Data{{#if GenericWithT}}<T>{{/if}}{{#ifne Operations.Count 0}} : I{{Name}}Data{{#if GenericWithT}}<T>{{/if}}{{/ifne}}
    {
{{#ifne Operations.Count 0}}
  {{#each DataConstructorParameters}}
        private readonly {{Type}} {{PrivateName}};
    {{#if @last}}

    {{/if}}
  {{/each}}
  {{#if DataExtensionsRequired}}
        #region Extensions
        #pragma warning disable CS0649, IDE0044 // Defaults to null by design; can be overridden in constructor.

    {{#if UsesCosmos}}
        private Action<ICosmosDbArgs>? _onDataArgsCreate;
    {{/if}}
    {{#each DataOperations}}
      {{#ifeq Type 'GetColl'}}
        {{#ifeq AutoImplement 'Database'}}
        private Action<DatabaseParameters, {{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}{{DataArgs.Type}}>? {{PrivateName}}OnQuery;
        {{/ifeq}}
        {{#ifeq AutoImplement 'EntityFramework'}}
        private Func<IQueryable<{{Parent.EntityFrameworkModel}}>, {{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}{{DataArgs.Type}}, IQueryable<{{Parent.EntityFrameworkModel}}>>? {{PrivateName}}OnQuery;
        {{/ifeq}}   
        {{#ifeq AutoImplement 'Cosmos'}}
          {{#ifval Parent.CosmosValueContainer}}
        private Func<IQueryable<CosmosDbValue<{{Parent.CosmosModel}}>>, {{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}{{DataArgs.Type}}, IQueryable<CosmosDbValue{{Parent.CosmosModel}}>>>? {{PrivateName}}OnQuery;
          {{else}}
        private Func<IQueryable<{{Parent.CosmosModel}}>, {{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}{{DataArgs.Type}}, IQueryable<{{Parent.CosmosModel}}>>? {{PrivateName}}OnQuery;
          {{/ifval}}
        {{/ifeq}}  
        {{#ifeq AutoImplement 'OData'}}
        private Func<Soc.IBoundClient<{{Parent.ODataModel}}>, {{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}{{DataArgs.Type}}, Soc.IBoundClient<{{Parent.ODataModel}}>>? {{PrivateName}}OnQuery;
        {{/ifeq}} 
      {{/ifeq}}
      {{#if Parent.DataExtensions}}
        {{#ifne AutoImplement 'None'}}
        private Func<{{#each PagingLessDataParameters}}{{{ParameterType}}}, {{/each}}{{DataArgs.Type}}, Task>? {{PrivateName}}OnBeforeAsync;
        private Func<{{#if HasReturnValue}}{{OperationReturnType}}, {{/if}}{{#each CoreDataParameters}}{{{ParameterType}}}, {{/each}}Task>? {{PrivateName}}OnAfterAsync;
        {{/ifne}}
        private Action<Exception>? {{PrivateName}}OnException;
      {{/if}}
    {{/each}}

        #pragma warning restore CS0649, IDE0044
        #endregion

  {{/if}}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{Name}}Data"/> class.
        /// </summary>
  {{#each DataConstructorParameters}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
  {{/each}}
        {{lower DataConstructor}} {{Name}}Data({{#each DataConstructorParameters}}{{#unless @first}}, {{/unless}}{{Type}} {{ArgumentName}}{{/each}})
            { {{#each DataConstructorParameters}}{{PrivateName}} = Check.NotNull({{ArgumentName}}, nameof({{ArgumentName}})); {{/each}}{{Name}}DataCtor(); }

        partial void {{Name}}DataCtor(); // Enables additional functionality to be added to the constructor.
  {{#each DataOperations}}

        /// <summary>
        /// {{{SummaryText}}}
        /// </summary>
    {{#each DataParameters}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
    {{/each}}
    {{#if HasReturnValue}}
        /// <returns>{{{ReturnText}}}</returns>
    {{/if}}
        public {{{OperationTaskReturnType}}} {{Name}}Async({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{{ParameterType}}} {{ArgumentName}}{{/each}})
    {{#ifeq AutoImplement 'None'}}
      {{#if Parent.DataExtensions}}
            => DataInvoker.Current.InvokeAsync(this, () => {{Name}}OnImplementationAsync({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{#if IsValueArg}}Check.NotNull(value, nameof(value)){{else}}{{ArgumentName}}{{/if}}{{/each}}), new BusinessInvokerArgs { ExceptionHandler = {{PrivateName}}OnException{{#if DataTransaction}}, IncludeTransactionScope = true{{/if}} });
      {{else}}
            => DataInvoker.Current.InvokeAsync(this, () => {{Name}}OnImplementationAsync({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{#if IsValueArg}}Check.NotNull(value, nameof(value)){{else}}{{ArgumentName}}{{/if}}{{/each}}){{#if DataTransaction}}, new BusinessInvokerArgs { IncludeTransactionScope = true }{{/if}});
      {{/if}}
    {{else}}
        {
            return DataInvoker.Current.InvokeAsync(this, async () =>
            {
      {{#ifeq Type 'GetColl'}}
                {{OperationReturnType}} __result = new {{OperationReturnType}}({{#if Paging}}paging{{/if}});
      {{else}}
        {{#if Parent.DataExtensions}}
          {{#if HasReturnValue}}
                {{OperationReturnType}} __result;
          {{/if}}
        {{/if}}
      {{/ifeq}}
      {{#ifeq AutoImplement 'Database'}}
                var __dataArgs = {{DataEntityMapper}}.Default.CreateArgs("[{{Parent.DatabaseSchema}}].[{{DatabaseStoredProc}}]"{{#if Paging}}, __result.Paging!{{/if}});
      {{/ifeq}}
      {{#ifeq AutoImplement 'EntityFramework'}}
                var __dataArgs = {{DataEntityMapper}}.Default.CreateArgs({{#if Paging}}__result.Paging!{{/if}});
      {{/ifeq}}
      {{#ifeq AutoImplement 'Cosmos'}}
                var __dataArgs = {{DataEntityMapper}}.Default.CreateArgs("{{Parent.CosmosContainerId}}"{{#if Paging}}, __result.Paging!{{/if}}, {{CosmosPartitionKeyCode}}, onCreate: _onDataArgsCreate);
      {{/ifeq}}
      {{#ifeq AutoImplement 'OData'}}
                var __dataArgs = {{DataEntityMapper}}.Default.CreateArgs({{#if Paging}}__result.Paging!{{/if}}{{#ifval ODataCollectionName}}{{#if Paging}}, {{/if}}"{{ODataCollectionName}}"{{/ifval}});
      {{/ifeq}}
      {{#if Parent.DataExtensions}}
                if ({{PrivateName}}OnBeforeAsync != null) await {{PrivateName}}OnBeforeAsync({{#each PagingLessDataParameters}}{{{ArgumentName}}}, {{/each}}__dataArgs).ConfigureAwait(false);
      {{/if}}
      {{#ifeq AutoImplement 'Database'}}
        {{#ifeq Type 'GetColl'}}
                __result.Result = await {{DataArgs.Name}}.Query(__dataArgs, p => {{PrivateName}}OnQuery?.Invoke(p, {{#each CoreDataParameters}}{{{ArgumentName}}}, {{/each}}__dataArgs)).SelectQueryAsync<{{Parent.EntityCollectionName}}>().ConfigureAwait(false);
        {{else}}
                {{#if Parent.DataExtensions}}{{#if HasReturnValue}}__result = {{/if}}{{else}}{{#if HasReturnValue}}return {{/if}}{{/if}}await {{DataArgs.Name}}.{{Type}}Async(__dataArgs{{#each PagingLessDataParameters}}, {{#if IsValueArg}}Check.NotNull(value, nameof(value)){{else}}{{ParameterConverted}}{{/if}}{{/each}}).ConfigureAwait(false);
        {{/ifeq}}
      {{/ifeq}}
      {{#ifeq AutoImplement 'EntityFramework'}}
        {{#ifeq Type 'GetColl'}}
                __result.Result = {{DataArgs.Name}}.Query(__dataArgs, q => {{PrivateName}}OnQuery?.Invoke(q, {{#each CoreDataParameters}}{{{ArgumentName}}}, {{/each}}__dataArgs) ?? q).SelectQuery<{{BaseReturnType}}Collection>();
        {{else}}
                {{#if Parent.DataExtensions}}{{#if HasReturnValue}}__result = {{/if}}{{else}}{{#if HasReturnValue}}return {{/if}}{{/if}}await {{DataArgs.Name}}.{{Type}}Async(__dataArgs{{#each PagingLessDataParameters}}, {{#if IsValueArg}}Check.NotNull(value, nameof(value)){{else}}{{ParameterConverted}}{{/if}}{{/each}}).ConfigureAwait(false);
        {{/ifeq}}
      {{/ifeq}}
      {{#ifeq AutoImplement 'Cosmos'}}
        {{#ifeq Type 'GetColl'}}
                __result.Result = {{DataArgs.Name}}.{{#if CosmosValueContainer}}Value{{/if}}Container(__dataArgs).Query(q => {{PrivateName}}OnQuery?.Invoke(q, {{#each CoreDataParameters}}{{{ArgumentName}}}, {{/each}}__dataArgs) ?? q).SelectQuery<{{BaseReturnType}}Collection>();
        {{else}}
                {{#if Parent.DataExtensions}}{{#if HasReturnValue}}__result = {{/if}}{{else}}{{#if HasReturnValue}}return {{/if}}{{/if}}await {{DataArgs.Name}}.{{#if CosmosValueContainer}}Value{{/if}}Container(__dataArgs).{{Type}}Async({{#each PagingLessDataParameters}}{{#unless @first}}, {{/unless}}{{#if IsValueArg}}Check.NotNull(value, nameof(value)){{else}}{{ParameterConverted}}{{/if}}{{/each}}).ConfigureAwait(false);
        {{/ifeq}}
      {{/ifeq}}
      {{#ifeq AutoImplement 'OData'}}
        {{#ifeq Type 'GetColl'}}
                __result.Result = {{DataArgs.Name}}.Query(__dataArgs, q => {{PrivateName}}OnQuery?.Invoke(q, {{#each CoreDataParameters}}{{{ArgumentName}}}, {{/each}}__dataArgs) ?? q).SelectQuery<{{BaseReturnType}}Collection>();
        {{else}}
                {{#if Parent.DataExtensions}}{{#if HasReturnValue}}__result = {{/if}}{{else}}{{#if HasReturnValue}}return {{/if}}{{/if}}await {{DataArgs.Name}}.{{Type}}Async(__dataArgs{{#each PagingLessDataParameters}}, {{#if IsValueArg}}Check.NotNull(value, nameof(value)){{else}}{{ParameterConverted}}{{/if}}{{/each}}).ConfigureAwait(false);
        {{/ifeq}}
      {{/ifeq}}
      {{#if Parent.DataExtensions}}
                if ({{PrivateName}}OnAfterAsync != null) await {{PrivateName}}OnAfterAsync({{#if HasReturnValue}}__result{{/if}}{{#each CoreDataParameters}}{{#if @first}}{{#if Parent.HasReturnValue}}, {{/if}}{{else}}, {{/if}}{{ArgumentName}}{{/each}}).ConfigureAwait(false);
        {{#if HasReturnValue}}
                return __result;
        {{/if}}
            }, new BusinessInvokerArgs { ExceptionHandler = {{PrivateName}}OnException{{#if DataTransaction}}, IncludeTransactionScope = true{{/if}} });
      {{else}}
        {{#if HasReturnValue}}
          {{#ifeq Type 'GetColl'}}
                return await Task.FromResult(__result).ConfigureAwait(false);
          {{/ifeq}}
        {{/if}}
            }{{#if DataTransaction}}, new BusinessInvokerArgs { IncludeTransactionScope = true }{{/if}});
      {{/if}}
        }
    {{/ifeq}}
  {{/each}}
{{/ifne}}
{{#if UsesDatabase}}
  {{#unless DatabaseCustomMapper}}

        /// <summary>
        /// Provides the {{{EntityNameSeeComments}}} property and database column mapping.
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "By design; as there is a direct relationship")]
        public partial class DbMapper : DatabaseMapper<{{EntityName}}, DbMapper>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="DbMapper"/> class.
            /// </summary>
            public DbMapper()
            {
    {{#ifval DatabaseMapperInheritsFrom}}
                InheritPropertiesFrom({{DatabaseMapperInheritsFrom}}.Default);
    {{/ifval}}
    {{#each DatabaseMapperProperties}}
                Property(s => s.{{DataMapperPropertyName}}{{#ifval DataName}}, "{{DataName}}"{{/ifval}}{{#ifne DataOperationTypes 'Any'}}, operationTypes: OperationTypes.{{DataOperationTypes}}{{/ifne}}){{#if UniqueKey}}.SetUniqueKey({{#if DataAutoGenerated}}true{{else}}false{{/if}}){{/if}}{{#ifval DataConverterCode}}{{{DataConverterCode}}}{{/ifval}}{{#ifval DatabaseMapper}}.SetMapper({{DatabaseMapper}}.Default!){{/ifval}};
    {{/each}}
    {{#if MapperAddStandardProperties}}
                AddStandardProperties();
    {{/if}}
                DbMapperCtor();
            }
            
            partial void DbMapperCtor(); // Enables the DbMapper constructor to be extended.
        }
  {{/unless}}
{{/if}}
{{#if UsesEntityFramework}}
  {{#unless EntityFrameworkCustomMapper}}

        /// <summary>
        /// Provides the {{{EntityNameSeeComments}}} and Entity Framework {{{seecomments EntityFrameworkModel}}} property mapping.
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "By design; as there is a direct relationship")]
        public partial class EfMapper : EfDbMapper<{{EntityName}}, {{EntityFrameworkModel}}, EfMapper>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="EfMapper"/> class.
            /// </summary>
            public EfMapper()
            {
    {{#ifval EntityFrameworkMapperInheritsFrom}}
                InheritPropertiesFrom({{EntityFrameworkMapperInheritsFrom}}.Default);
    {{/ifval}}
    {{#each EntityFrameworkMapperProperties}}
                Property(s => s.{{DataMapperPropertyName}}, d => d.{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}){{#ifne DataOperationTypes 'Any'}}.SetOperationTypes(OperationTypes.{{DataOperationTypes}}){{/ifne}}{{#if UniqueKey}}.SetUniqueKey({{#if DataAutoGenerated}}true{{else}}false{{/if}}){{/if}}{{#ifval DataConverterCode}}{{{DataConverterCode}}}{{/ifval}}{{#ifval EntityFrameworkMapper}}.SetMapper({{EntityFrameworkMapper}}.Default!){{/ifval}};
    {{/each}}
    {{#if MapperAddStandardProperties}}
                AddStandardProperties();
    {{/if}}
                EfMapperCtor();
            }
            
            partial void EfMapperCtor(); // Enables the EfMapper constructor to be extended.
        }
  {{/unless}}
{{/if}}
{{#if UsesCosmos}}
  {{#unless CosmosCustomMapper}}

        /// <summary>
        /// Provides the {{{EntityNameSeeComments}}} and Cosmos {{{seecomments EntityFrameworkModel}}} property mapping.
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "By design; as there is a direct relationship")]
        public partial class CosmosMapper : CosmosDbMapper<{{EntityName}}, {{CosmosModel}}, CosmosMapper>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="CosmosMapper"/> class.
            /// </summary>
            public CosmosMapper()
            {
    {{#ifval CosmosMapperInheritsFrom}}
                InheritPropertiesFrom({{CosmosMapperInheritsFrom}}.Default);
    {{/ifval}}
    {{#each CosmosMapperProperties}}
                Property(s => s.{{DataMapperPropertyName}}, d => d.{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}){{#ifne DataOperationTypes 'Any'}}.SetOperationTypes(OperationTypes.{{DataOperationTypes}}){{/ifne}}{{#if UniqueKey}}.SetUniqueKey({{#if DataAutoGenerated}}true{{else}}false{{/if}}){{/if}}{{#ifval DataConverterCode}}{{{DataConverterCode}}}{{/ifval}}{{#ifval CosmosMapper}}.SetMapper({{CosmosMapper}}.Default!){{/ifval}};
    {{/each}}
    {{#if MapperAddStandardProperties}}
                AddStandardProperties();
    {{/if}}
                CosmosMapperCtor();
            }
            
            partial void CosmosMapperCtor(); // Enables the CosmosMapper constructor to be extended.
        }
  {{/unless}}
{{/if}}
{{#if UsesOData}}
  {{#unless ODataCustomMapper}}

        /// <summary>
        /// Provides the {{{EntityNameSeeComments}}} and OData {{{seecomments EntityFrameworkModel}}} property mapping.
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "By design; as there is a direct relationship")]
        public partial class ODataMapper : ODataMapper<{{EntityName}}, {{ODataModel}}, ODataMapper>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ODataMapper"/> class.
            /// </summary>
            public ODataMapper()
            {
    {{#ifval ODataMapperInheritsFrom}}
                InheritPropertiesFrom({{ODataMapperInheritsFrom}}.Default);
    {{/ifval}}
    {{#each ODataMapperProperties}}
                Property(s => s.{{DataMapperPropertyName}}, d => d.{{#ifval DataName}}{{DataName}}{{else}}{{Name}}{{/ifval}}){{#ifne DataOperationTypes 'Any'}}.SetOperationTypes(OperationTypes.{{DataOperationTypes}}){{/ifne}}{{#if UniqueKey}}.SetUniqueKey({{#if DataAutoGenerated}}true{{else}}false{{/if}}){{/if}}{{#ifval DataConverterCode}}{{{DataConverterCode}}}{{/ifval}}{{#ifval ODataMapper}}.SetMapper({{ODataMapper}}.Default!){{/ifval}};
    {{/each}}
    {{#if MapperAddStandardProperties}}
                AddStandardProperties();
    {{/if}}
                ODataMapperCtor();
            }
            
            partial void ODataMapperCtor(); // Enables the ODataMapper constructor to be extended.
        }
  {{/unless}}
{{/if}}
    }
}

#pragma warning restore IDE0005
#nullable restore
<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef -->
<Template OutputGenDirName="Generated">
  <Entity Condition="Entity.ExcludeEntity == false and Entity.EntityScope == Config.EntityScope" OutputFileName="{{Entity.FileName}}.cs" OutputDirName="{{Entity.Namespace}}">
    <Set Name="Entity.Namespace" Condition="Config.IsDataModel == true" Value="null" />
    <Set Name="Entity.EntityName" Condition="Entity.GenericWithT != true" Value="Entity.Name" Otherwise="${{Entity.Name}}&lt;T&gt;" />
    <Set Name="Entity.EntityCollectionName" Condition="Entity.GenericWithT != true" Value="${{Entity.Name}}Collection" Otherwise="${{Entity.Name}}Collection&lt;T&gt;" />
    <Set Name="Entity.EntityCollectionResultName" Condition="Entity.GenericWithT != true" Value="${{Entity.Name}}CollectionResult" Otherwise="${{Entity.Name}}CollectionResult&lt;T&gt;" />
    <If Condition="Entity.OmitEntityBase == true">
      <Exception Condition="Entity.RefDataType != null" Message="Entity '{{Entity.Name}}' Entity.RefDataType is not currently supported when Entity.OmitEntityBase is specified."/>
      <Exception Condition="Entity.CollectionResult != null" Message="Entity '{{Entity.Name}}' Entity.CollectionResult is not currently supported when Entity.OmitEntityBase is specified."/>
      <Property Condition="Property.RefDataType != null">
        <Exception Message="Entity '{{Entity.Name}}' Property.RefDataType is not currently supported when Entity.OmitEntityBase is specified." />
      </Property>
    </If>
    <![CDATA[/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Beef.Entities;
]]>
    <If Condition="Config.IsDataModel == false and Entity.OmitEntityBase == false">
      <![CDATA[using Beef.RefData;
]]>
    </If>
    <![CDATA[using Newtonsoft.Json;
]]>
    <If Condition="Config.UsingNamespace1 != null">
      <![CDATA[using {{Config.UsingNamespace1}};
]]>
    </If>
    <If Condition="Config.UsingNamespace2 != null">
      <![CDATA[using {{Config.UsingNamespace2}};
]]>
    </If>
    <If Condition="Config.UsingNamespace3 != null">
      <![CDATA[using {{Config.UsingNamespace3}};
]]>
    </If>
    <If Condition="Config.IsDataModel == false">
      <Then>
        <If Condition="Config.EntityUsing == null or Config.EntityUsing == 'Common' or Config.EntityUsing == 'All'">
          <If Condition="Entity.EntityScope == 'Business'">
            <![CDATA[using {{Config.Company}}.{{Config.AppName}}.Common.Entities;
]]>
          </If>
        </If>
        <If Condition="Entity.OmitEntityBase == false">
          <If Condition="Config.RefDataNamespace != null">
            <![CDATA[using RefDataNamespace = {{Config.RefDataNamespace}};
]]>
          </If>
          <If Condition="Config.RefDataBusNamespace != null">
            <![CDATA[using RefDataBusNamespace = {{Config.RefDataBusNamespace}};
]]>
          </If>
        </If>
      </Then>
    </If>
    <If Condition="Config.IsDataModel == true">
      <Then>
        <![CDATA[
namespace {{Config.Company}}.{{Config.AppName}}.Business.Data.Model]]>
      </Then>
      <Else>
        <![CDATA[
namespace {{Config.Company}}.{{Config.AppName}}.{{Config.EntityScope}}.Entities]]>
      </Else>
    </If>
    <If Condition="Entity.Namespace != null">
      <![CDATA[.{{Entity.Namespace}}]]>
    </If>
    <![CDATA[
{
    /// <summary>
    /// Represents the {{Entity.Text:ToComments}} entity.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
]]>
    <![CDATA[    public ]]>
    <If Condition="Entity.Abstract == true">
      <![CDATA[abstract ]]>
    </If>
    <![CDATA[partial class {{Entity.EntityName}}]]>
    <Set Name="System.Inherits" Value="'EntityBase'"/>
    <If Condition="Entity.Inherits == null">
      <Then>
        <If Condition="Entity.OmitEntityBase == true">
          <Set Name="System.Inherits" Value="null"/>
        </If>
        <If Condition="Entity.RefDataType == 'int'">
          <Set Name="System.Inherits" Value="'ReferenceDataBaseInt'"/>
        </If>
        <If Condition="Entity.RefDataType == 'Guid'">
          <Set Name="System.Inherits" Value="'ReferenceDataBaseGuid'"/>
        </If>
        <If Condition="System.Inherits == null">
          <Then>
            <If Condition="Entity.Implements != null">
              <![CDATA[ : {{Entity.Implements}}]]>
            </If>
          </Then>
          <Else>
            <If Condition="Entity.Implements == null">
              <Then><![CDATA[ : {{System.Inherits}}]]></Then>
              <Else><![CDATA[ : {{System.Inherits}}, {{Entity.Implements}}]]></Else>
            </If>
          </Else>
        </If>
      </Then>
      <Else>
        <Set Name="System.Inherits" Value="Entity.Inherits"/>
        <![CDATA[ : {{Entity.Inherits}}]]>
        <If Condition="Entity.Implements != null"><![CDATA[, {{Entity.Implements}}]]></If>
      </Else>
    </If>
    <![CDATA[
    {
]]>
    <If Condition="Entity.ConstCount > 0">
      <![CDATA[        #region Constants
]]>
      <Const>
        <![CDATA[
        /// <summary>
        /// Represents a {{Const.Text:ToComments}} constant value.
        /// </summary>
        public const {{Entity.ConstType}} {{Const.Name}} = ]]>
        <If Condition="Entity.ConstType == 'int'">
          <Then><![CDATA[{{Const.Value}};]]></Then>
          <Else>
            <If Condition="Entity.ConstType == 'string'">
              <Then><![CDATA["{{Const.Value}}";]]></Then>
              <Else><![CDATA[new Guid("{{Const.Value}}");]]></Else>
            </If>
          </Else>
        </If>
        <![CDATA[
]]>
      </Const>
      <![CDATA[
        #endregion

]]>
    </If>
    <Set Name="System.EndRegion" Value="false"/>
    <If Condition="Entity.OmitEntityBase == false">
      <Property Condition="Property.Inherited == false">
        <Set Name="System.EndRegion" Value="true"/>
        <If Condition="System.Index == 0">
          <![CDATA[        #region PropertyNames
      ]]>
        </If>
        <![CDATA[
        /// <summary>
        /// Represents the {{Property.Name:ToSeeComments}} property name.
        /// </summary>
        public const string Property_{{Property.Name}} = nameof({{Property.Name}});
]]>
      </Property>
    </If>
    <If Condition="System.EndRegion == true">
      <![CDATA[
        #endregion

]]>
    </If>
    <Set Name="System.EndRegion" Value="false"/>
    <If Condition="Entity.OmitEntityBase == false">
      <Property Condition="Property.Inherited == false and Property.RefDataMapping == false">
        <If Condition="System.Index == 0">
          <If Condition="System.Index == 0">
            <![CDATA[        #region Privates

]]>
          </If>
          <Set Name="System.EndRegion" Value="true"/>
        </If>
        <![CDATA[        private ]]>
        <If Condition="Property.RefDataType == null">
          <Then>
            <![CDATA[{{Property.Type}}]]>
            <If Condition="Property.Type != 'string' and Property.Nullable == true">
              <![CDATA[?]]>
            </If>
          </Then>
          <Else>
            <If Condition="Property.RefDataList == true">
              <Then><![CDATA[List<{{Property.RefDataType}}>]]></Then>
              <Else><![CDATA[{{Property.RefDataType}}]]></Else>
            </If>
          </Else>
        </If>
        <![CDATA[ {{Property.PrivateName}}]]>
        <If Condition="Property.RefDataType != null">
          <![CDATA[Sid]]>
          <If Condition="Property.RefDataList == true"><![CDATA[s]]></If>
        </If>
        <If Condition="Property.Default != null">
          <![CDATA[ = {{Property.Default}}]]>
        </If>
        <![CDATA[;
]]>
      </Property>
    </If>
    <If Condition="System.EndRegion == true">
      <![CDATA[
        #endregion

]]>
    </If>
    <Set Name="System.EndRegion" Value="false"/>
    <Property Condition="Property.Inherited == false">
      <If Condition="System.Index == 0 and Entity.OmitEntityBase == false">
        <Set Name="System.EndRegion" Value="true"/>
        <![CDATA[        #region Properties
]]>
      </If>
      <If Condition="Property.RefDataType != null">
        <![CDATA[
        /// <summary>
        /// Gets or sets the {{Property.Name:ToSeeComments}} ]]>
        <If Condition="Property.RefDataList == true"><![CDATA[list ]]></If>
        <![CDATA[using the underlying Serialization Identifier (SID).
        /// </summary>
]]>
        <If Condition="Property.IgnoreSerialization == true">
          <Then></Then>
          <Else>
            <![CDATA[        [JsonProperty("]]>
            <If Condition="Property.JsonName == null">
              <Then><![CDATA[{{Property.ArgumentName}}]]></Then>
              <Else><![CDATA[{{Property.JsonName}}]]></Else>
            </If>
            <![CDATA[", DefaultValueHandling = ]]>
            <If Condition="Property.EmitDefaultValue == true">
              <Then><![CDATA[DefaultValueHandling.Include]]></Then>
              <Else><![CDATA[DefaultValueHandling.Ignore]]></Else>
            </If>
            <![CDATA[)]
]]>
          </Else>
        </If>
        <If Condition="Property.DisplayName != null">
          <![CDATA[        [Display(Name="{{Property.DisplayName}}")]
]]>
        </If>
        <![CDATA[        public ]]>
        <If Condition="Property.RefDataList == true">
          <Then><![CDATA[List<{{Property.RefDataType}}>]]></Then>
          <Else><![CDATA[{{Property.RefDataType}}]]></Else>
        </If>
        <If Condition="Property.RefDataType != 'string' and Property.Nullable == true">
          <![CDATA[?]]>
        </If>
        <![CDATA[ {{Property.Name}}Sid]]>
        <If Condition="Property.RefDataList == true"><![CDATA[s]]></If>
        <![CDATA[
        {
            get { return {{Property.PrivateName}}Sid]]>
        <If Condition="Property.RefDataList == true"><![CDATA[s]]></If>
        <![CDATA[; }
            set { SetValue]]>
        <If Condition="Property.RefDataList == true">
          <Then>
            <![CDATA[<List<{{Property.RefDataType}}>>(ref {{Property.PrivateName}}Sids, value, ]]>
            <If Condition="Property.Immutable == false">
              <Then><![CDATA[false]]></Then>
              <Else><![CDATA[true]]></Else>
            </If>
            <![CDATA[, false]]>
          </Then>
          <Else>
            <If Condition="Property.RefDataType != 'string'">
              <![CDATA[<{{Property.RefDataType}}]]>
              <If Condition="Property.Nullable == true"><![CDATA[?]]></If>
              <![CDATA[>]]>
            </If>
            <![CDATA[(ref {{Property.PrivateName}}Sid, value, ]]>
            <If Condition="Property.Immutable == false">
              <Then><![CDATA[false]]></Then>
              <Else><![CDATA[true]]></Else>
            </If>
            <If Condition="Property.RefDataType == 'string'">
              <Then><![CDATA[, StringTrim.End, StringTransform.EmptyToNull]]></Then>
              <Else><![CDATA[, false]]></Else>
            </If>
          </Else>
        </If>
        <![CDATA[, Property_{{Property.Name}}); }
        }
]]>
      </If>
      <If Condition="System.Index == 0">
        <Then>
          <If Condition="Entity.OmitEntityBase == false">
            <![CDATA[
]]>
          </If>
        </Then>
        <Else>
          <![CDATA[
]]>
        </Else>
      </If>
      <If Condition="Property.Type == 'bool'">
        <Then>
          <![CDATA[        /// <summary>
        /// Gets or sets a value indicating whether {{Property.Text:ToComments}}.
        /// </summary>
]]>
        </Then>
        <Else>
          <![CDATA[        /// <summary>
        /// Gets or sets the {{Property.Text:ToComments}}.
        /// </summary>
]]>
        </Else>
      </If>
      <If Condition="Property.RefDataType == null">
        <If Condition="Property.IgnoreSerialization == true">
          <Then></Then>
          <Else>
            <![CDATA[        [JsonProperty("]]>
            <If Condition="Property.JsonName == null">
              <Then><![CDATA[{{Property.ArgumentName}}]]></Then>
              <Else><![CDATA[{{Property.JsonName}}]]></Else>
            </If>
            <![CDATA[", DefaultValueHandling = ]]>
            <If Condition="Property.EmitDefaultValue == true">
              <Then><![CDATA[DefaultValueHandling.Include]]></Then>
              <Else><![CDATA[DefaultValueHandling.Ignore]]></Else>
            </If>
            <![CDATA[)]
]]>
          </Else>
        </If>
      </If>
      <If Condition="Property.RefDataType != null">
        <![CDATA[        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
]]>
      </If>
      <If Condition="Property.DisplayName != null">
        <![CDATA[        [Display(Name="{{Property.DisplayName}}")]
]]>
      </If>
      <If Condition="Property.DataFormatString != null and Entity.OmitEntityBase == false">
        <Then>
          <![CDATA[        [DisplayFormat(DataFormatString = "{{Property.DataFormatString}}")]
]]>
        </Then>
        <Else>
          <If Condition="Property.Type == 'DateTime'">
            <Then>
              <If Condition="Property.DateTimeTransform == 'DateOnly'">
                <Then>
                  <![CDATA[        [DisplayFormat(DataFormatString = Beef.Entities.StringFormat.DateOnlyFormat)]
]]>
                </Then>
                <Else>
                  <![CDATA[        [DisplayFormat(DataFormatString = Beef.Entities.StringFormat.DateTimeFormat)]
]]>
                </Else>
              </If>
            </Then>
          </If>
          <If Condition="Property.Type == 'DateTimeOffset'">
            <Then>
              <If Condition="Property.DateTimeTransform == 'DateOnly'">
                <Then>
                  <![CDATA[        [DisplayFormat(DataFormatString = Beef.Entities.StringFormat.DateOnlyFormat)]
]]>
                </Then>
                <Else>
                  <![CDATA[        [DisplayFormat(DataFormatString = Beef.Entities.StringFormat.DateTimeOffsetFormat)]
]]>
                </Else>
              </If>
            </Then>
          </If>
        </Else>
      </If>
      <If Condition="Property.Annotation1 != null">
        <![CDATA[        {{Property.Annotation1}}
]]>
      </If>
      <If Condition="Property.Annotation2 != null">
        <![CDATA[        {{Property.Annotation2}}
]]>
      </If>
      <If Condition="Property.Annotation3 != null">
        <![CDATA[        {{Property.Annotation3}}
]]>
      </If>

      <If Condition="Property.RefDataType != null and Property.RefDataList == true">
        <Then>
          <![CDATA[        public ReferenceDataSidList<{{Property.Type}}, {{Property.RefDataType}}> {{Property.Name}}
        {
            get { return new ReferenceDataSidList<{{Property.Type}}, {{Property.RefDataType}}>(ref {{Property.PrivateName}}Sids); }
            set { SetValue<List<{{Property.RefDataType}}>>(ref {{Property.PrivateName}}Sids, value?.ToSidList() ?? null]]>
          <If Condition="Property.Immutable == false">
            <Then><![CDATA[, false]]></Then>
            <Else><![CDATA[, true]]></Else>
          </If>
          <![CDATA[, false]]>
        </Then>
        <Else>
          <![CDATA[        public {{Property.Type}}]]>
          <If Condition="Property.RefDataType == null and Property.Type != 'string' and Property.Nullable == true">
            <![CDATA[?]]>
          </If>
          <If Condition="Entity.OmitEntityBase == false">
            <Then>
              <![CDATA[ {{Property.Name}}
        {
            get { return ]]>
              <If Condition="Property.RefDataMapping == true">
                <Then>
                  <![CDATA[GetMapping<string>(nameof({{Property.Name}}))]]>
                </Then>
                <Else>
                  <If Condition="Property.AutoCreate == true">
                    <![CDATA[GetAutoValue(ref ]]>
                  </If>
                  <![CDATA[{{Property.PrivateName}}]]>
                  <If Condition="Property.RefDataType != null">
                    <![CDATA[Sid]]>
                  </If>
                  <If Condition="Property.AutoCreate == true">
                    <![CDATA[)]]>
                  </If>
                </Else>
              </If>
              <![CDATA[; }
            set { ]]>
              <If Condition="Property.RefDataMapping == true">
                <![CDATA[var _{{Property.PrivateName}} = GetMapping<{{Property.Type}}>(nameof({{Property.Name}})) ?? default({{Property.Type}}); ]]>
              </If>
              <![CDATA[SetValue]]>
              <If Condition="Property.Type != 'DateTime' and Property.Type != 'string'">
                <If Condition="Property.RefDataType == null">
                  <Then><![CDATA[<{{Property.Type}}]]></Then>
                  <Else><![CDATA[<{{Property.RefDataType}}]]></Else>
                </If>
              </If>
              <If Condition="Property.Nullable == true and Property.Type != 'DateTime' and Property.Type != 'string'">
                <If Condition="Property.RefDataType != 'string'">
                  <![CDATA[?]]>
                </If>
              </If>
              <If Condition="Property.Type != 'DateTime' and Property.Type != 'string'">
                <![CDATA[>]]>
              </If>
              <If Condition="Property.RefDataMapping == true">
                <Then><![CDATA[(ref _{{Property.PrivateName}}]]></Then>
                <Else><![CDATA[(ref {{Property.PrivateName}}]]></Else>
              </If>
              <If Condition="Property.RefDataType != null">
                <![CDATA[Sid]]>
              </If>
              <![CDATA[, value]]>
              <If Condition="Property.Immutable == false">
                <Then><![CDATA[, false]]></Then>
                <Else><![CDATA[, true]]></Else>
              </If>
              <If Condition="Property.Type != 'DateTime' and Property.Type != 'string'">
                <If Condition="Property.BubblePropertyChanged == false">
                  <Then><![CDATA[, false]]></Then>
                  <Else><![CDATA[, true]]></Else>
                </If>
              </If>
              <If Condition="Property.Type == 'DateTime'">
                <![CDATA[, DateTimeTransform.{{Property.DateTimeTransform}}]]>
              </If>
              <If Condition="Property.Type == 'string'">
                <![CDATA[, StringTrim.{{Property.StringTrim}}, StringTransform.{{Property.StringTransform}}]]>
              </If>
            </Then>
            <Else>
              <![CDATA[ {{Property.Name}} { get; set; }
]]>
            </Else>
          </If>
        </Else>
      </If>
      <If Condition="Entity.OmitEntityBase == false">
        <![CDATA[, Property_{{Property.Name}}]]>
        <If Condition="Property.SecondaryPropertyChanged != null">
          <![CDATA[, {{Property.SecondaryPropertyChanged}}]]>
        </If>
        <![CDATA[); ]]>
        <If Condition="Property.RefDataMapping == true">
          <![CDATA[SetMapping(nameof({{Property.Name}}), _{{Property.PrivateName}}); ]]>
        </If>
        <![CDATA[}
        }
]]>
      </If>
    </Property>
    <If Condition="System.EndRegion == true">
      <![CDATA[
        #endregion

]]>
    </If>
    <Set Name="System.EndRegion" Value="false"/>
    <If Condition="Entity.OmitEntityBase == false">
      <Property Condition="Property.UniqueKey == true and Property.Inherited == false">
        <If Condition="System.Index == 0">
          <Then>
            <Set Name="System.EndRegion" Value="true"/>
            <![CDATA[        #region UniqueKey
      
        /// <summary>
        /// Indicates whether the {{Entity.EntityName:ToSeeComments}} has a <see cref="UniqueKey"/> value.
        /// </summary>
        public override bool HasUniqueKey
        {
            get { return true; }
        }
        
        /// <summary>
        /// Gets the list of property names that represent the unique key.
        /// </summary>
        public override string[] UniqueKeyProperties => new string[] { ]]>
            <Property Condition="Property.UniqueKey == true">
              <If Condition="System.Index > 0"><![CDATA[, ]]></If>
              <![CDATA[Property_{{Property.Name}}]]>
            </Property>
            <![CDATA[ };
        
        /// <summary>
        /// Creates the <see cref="UniqueKey"/>.
        /// </summary>
        /// <returns>The <see cref="Beef.Entities.UniqueKey"/>.</returns>
]]>
            <Property Condition="Property.UniqueKey == true">
              <![CDATA[        /// <param name="{{Property.ArgumentName}}">The {{Property.Name:ToSeeComments}}.</param>
]]>
            </Property>
            <![CDATA[        public static UniqueKey CreateUniqueKey(]]>
            <Property Condition="Property.UniqueKey == true">
              <If Condition="System.Index > 0"><![CDATA[, ]]></If>
              <![CDATA[{{Property.Type}} {{Property.ArgumentName}}]]>
            </Property>
            <![CDATA[)
        {
            return new UniqueKey(]]>
            <Property Condition="Property.UniqueKey == true">
              <If Condition="System.Index > 0"><![CDATA[, ]]></If>
              <If Condition="Property.RefDataType != null">
                <![CDATA[({{Property.RefDataType}})]]>
              </If>
              <![CDATA[{{Property.ArgumentName}}]]>
            </Property>
            <![CDATA[);
        }
          
        /// <summary>
        /// Gets the <see cref="UniqueKey"/>.
        /// </summary>
        /// <remarks>
        /// The <b>UniqueKey</b> key consists of the following property(s): ]]>
            <Property Condition="Property.UniqueKey == true">
              <If Condition="System.Index > 0"><![CDATA[, ]]></If>
              <![CDATA[{{Property.Name:ToSeeComments}}]]>
            </Property>
            <![CDATA[.
        /// </remarks>
        public override UniqueKey UniqueKey
        {
            get { return new UniqueKey({{Property.Name}}]]>
            <If Condition="Property.RefDataType != null">
              <![CDATA[Sid]]>
              <If Condition="Property.RefDataList == true"><![CDATA[s]]></If>
            </If>
          </Then>
          <Else>
            <![CDATA[, {{Property.Name}}]]>
            <If Condition="Property.RefDataType != null">
              <![CDATA[Sid]]>
              <If Condition="Property.RefDataList == true"><![CDATA[s]]></If>
            </If>
          </Else>
        </If>
      </Property>
    </If>
    <If Condition="System.EndRegion == true">
      <![CDATA[); }
        }

        #endregion

]]>
    </If>
    <If Condition="Entity.RefDataType != null and Entity.Abstract == false">
      <![CDATA[        #region Operator

        /// <summary>
        /// An implicit cast from an <b>Id</b> to a {{Entity.EntityName:ToSeeComments}}.
        /// </summary>
        /// <param name="id">The <b>Id</b>.</param>
        /// <returns>The corresponding {{Entity.EntityName:ToSeeComments}}.</returns>
        public static implicit operator {{Entity.EntityName}}({{Entity.RefDataType}} id)
        {
            return ConvertFromId<{{Entity.EntityName}}>(id);
        }

        /// <summary>
        /// An implicit cast from a <b>Code</b> to a {{Entity.EntityName:ToSeeComments}}.
        /// </summary>
        /// <param name="code">The <b>Code</b>.</param>
        /// <returns>The corresponding {{Entity.EntityName:ToSeeComments}}.</returns>
        public static implicit operator {{Entity.EntityName}}(string code)
        {
            return ConvertFromCode<{{Entity.EntityName}}>(code);
        }
        
        #endregion

]]>
    </If>
    <If Condition="Entity.OmitEntityBase == false">
      <![CDATA[        #region ICopyFrom
    
        /// <summary>
        /// Performs a copy from another {{Entity.EntityName:ToSeeComments}} updating this instance.
        /// </summary>
        /// <param name="from">The {{Entity.EntityName:ToSeeComments}} to copy from.</param>
        public override void CopyFrom(object from)
        {
            var fval = ValidateCopyFromType<{{Entity.EntityName}}>(from);
            CopyFrom(({{Entity.EntityName}})fval);
        }
        
        /// <summary>
        /// Performs a copy from another {{Entity.EntityName:ToSeeComments}} updating this instance.
        /// </summary>
        /// <param name="from">The {{Entity.EntityName:ToSeeComments}} to copy from.</param>
        public void CopyFrom({{Entity.EntityName}} from)
        {
]]>
      <If Condition="System.Inherits != null">
        <![CDATA[            CopyFrom(({{System.Inherits}})from);
]]>
      </If>

      <Property Condition="Property.Inherited == false">
        <If Condition="Property.RefDataType == null">
          <Then><![CDATA[            {{Property.Name}} = ]]></Then>
          <Else>
            <![CDATA[            {{Property.Name}}Sid]]>
            <If Condition="Property.RefDataList == true"><![CDATA[s]]></If>
            <![CDATA[ = ]]>
          </Else>
        </If>

        <If Condition="Property.IsEntity == false">
          <Then>
            <If Condition="Property.RefDataType == null">
              <Then>
                <![CDATA[from.{{Property.Name}};
]]>
              </Then>
              <Else>
                <![CDATA[from.{{Property.Name}}Sid]]>
                <If Condition="Property.RefDataList == true"><![CDATA[s]]></If>
                <![CDATA[;
]]>
              </Else>
            </If>
          </Then>
          <Else>
            <![CDATA[(from.{{Property.Name}} == null) ? null : ({{Property.Type}})from.{{Property.Name}}.Clone();
]]>
          </Else>
        </If>

      </Property>
      <![CDATA[
            OnAfterCopyFrom(from);
]]>
      <![CDATA[        }
    
        #endregion
        
]]>
    </If>
    <If Condition="Entity.OmitEntityBase == false">
      <If Condition="Entity.Abstract == false">
        <![CDATA[        #region ICloneable
        
        /// <summary>
        /// Creates a deep copy of the {{Entity.EntityName:ToSeeComments}}.
        /// </summary>
        /// <returns>A deep copy of the {{Entity.EntityName:ToSeeComments}}.</returns>
        public override object Clone()
        {
            var clone = new {{Entity.EntityName}}();
            clone.CopyFrom(this);
            return clone;
        }
        
        #endregion
        
]]>
      </If>
    </If>
    <If Condition="Entity.OmitEntityBase == false">
      <![CDATA[        #region ICleanUp

        /// <summary>
        /// Performs a clean-up of the {{Entity.EntityName:ToSeeComments}} resetting property values as appropriate to ensure a basic level of data consistency.
        /// </summary>
        public override void CleanUp()
        {
            base.CleanUp();
]]>
      <Property Condition="Property.Inherited == false and Property.Immutable == false and Property.ExcludeCleanUp == false">
        <![CDATA[            {{Property.Name}}]]>
        <If Condition="Property.RefDataType != null">
          <![CDATA[Sid]]>
          <If Condition="Property.RefDataList == true"><![CDATA[s]]></If>
        </If>
        <![CDATA[ = Cleaner.Clean({{Property.Name}}]]>
        <If Condition="Property.RefDataType != null">
          <![CDATA[Sid]]>
          <If Condition="Property.RefDataList == true"><![CDATA[s]]></If>
        </If>
        <If Condition="Property.Type == 'DateTime'">
          <![CDATA[, DateTimeTransform.{{Property.DateTimeTransform}}]]>
        </If>
        <If Condition="Property.Type == 'string'">
          <![CDATA[, StringTrim.{{Property.StringTrim}}, StringTransform.{{Property.StringTransform}}]]>
        </If>
        <![CDATA[);
]]>
      </Property>
      <![CDATA[
            OnAfterCleanUp();
]]>
      <![CDATA[        }
    
        /// <summary>
        /// Indicates whether considered initial; i.e. all properties have their initial value.
        /// </summary>
        /// <returns><c>true</c> indicates is initial; otherwise, <c>false</c>.</returns>
        public override bool IsInitial
        {
            get
            {
]]>
      <If Condition="Entity.IsInitialOverride == null">
        <Then>
          <If Condition="System.Inherits != 'EntityBase'">
            <![CDATA[                if (!base.IsInitial)
                    return false;

]]>
          </If>
          <Set Name="System.NeedsTermination" Value="false" />
          <Property Condition="Property.Inherited == false and Property.Immutable == false and Property.ExcludeCleanUp == false">
            <If Condition="System.Index == 0">
              <Then><![CDATA[                return]]></Then>
              <Else>
                <![CDATA[
                    &&]]>
              </Else>
            </If>
            <![CDATA[ Cleaner.IsInitial({{Property.Name}}]]>
            <If Condition="Property.RefDataType != null">
              <![CDATA[Sid]]>
              <If Condition="Property.RefDataList == true"><![CDATA[s]]></If>
            </If>
            <![CDATA[)]]>
            <Set Name="System.NeedsTermination" Value="true" />
          </Property>
          <If Condition="System.NeedsTermination == true">
            <Then>
              <![CDATA[;
]]>
            </Then>
            <Else>
              <![CDATA[                return true;
]]>
            </Else>
          </If>
        </Then>
        <Else>
          <![CDATA[                return {{Entity.IsInitialOverride}};
]]>
        </Else>
      </If>
      <![CDATA[            }
        }

        #endregion
]]>
    </If>
    <If Condition="Entity.RefDataType != null and Entity.RefDataStringFormat != null">
      <![CDATA[
        #region RefData

        /// <summary>
        /// Overrides the default <see cref="ReferenceDataStringFormat"/>.
        /// </summary>
        /// <remarks>The value is "{{Entity.RefDataStringFormat}}".</remarks>
        public override string StringFormat
        {
            get { return "{{Entity.RefDataStringFormat}}"; }
        }

        #endregion        
]]>
    </If>
    <If Condition="Entity.OmitEntityBase == false">
      <![CDATA[
        #region PartialMethods
      
        partial void OnAfterCleanUp();

        partial void OnAfterCopyFrom({{Entity.EntityName}} from);

        #endregion
]]>
    </If>
    <![CDATA[    } 
]]>
    <If Condition="Entity.Collection == true">
      <![CDATA[
    /// <summary>
    /// Represents a {{Entity.EntityName:ToSeeComments}} collection.
    /// </summary>
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Tightly coupled; OK.")]
]]>
      <If Condition="Entity.DataContract == true">
        <![CDATA[    [CollectionDataContract]
]]>
      </If>
      <![CDATA[    public partial class {{Entity.EntityCollectionName}} : ]]>
      <If Condition="Entity.OmitEntityBase == false">
        <Then>
          <If Condition="Entity.CollectionInherits == null">
            <Then>
              <If Condition="Entity.RefDataType != null">
                <Then><![CDATA[ReferenceDataCollectionBase<{{Entity.EntityName}}>]]></Then>
                <Else>
                  <If Condition="Entity.CollectionKeyed == true">
                    <Then>
                      <![CDATA[EntityBaseKeyedCollection<UniqueKey, {{Entity.EntityName}}]>]]>
                    </Then>
                    <Else>
                      <![CDATA[EntityBaseCollection<{{Entity.EntityName}}>]]>
                    </Else>
                  </If>
                </Else>
              </If>
            </Then>
            <Else>
              <If Condition="Entity.RefDataType == null">
                <Then><![CDATA[{{Entity.CollectionInherits}}]]></Then>
                <Else><![CDATA[{{Entity.CollectionInherits}}<{{Entity.EntityName}}>]]></Else>
              </If>
            </Else>
          </If>
        </Then>
        <Else>
          <If Conndition="Entity.CollectionInherits == null">
            <Then><![CDATA[List<{{Entity.EntityName}}>]]></Then>
            <Else><![CDATA[{{Entity.CollectionInherits}}]]></Else>
          </If>
          <![CDATA[ { }
]]>
        </Else>
      </If>
      <If Condition="Entity.OmitEntityBase == false">
        <![CDATA[
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new instance of the {{Entity.EntityCollectionName:ToSeeComments}} class.
        /// </summary>
        public {{Entity.Name}}Collection()]]>
        <If Condition="Entity.RefDataSortOrder != null">
          <![CDATA[ : base(ReferenceDataSortOrder.{{Entity.RefDataSortOrder}})]]>
        </If>
        <![CDATA[
        {
        }

        /// <summary>
        /// Initializes a new instance of the {{Entity.EntityCollectionName:ToSeeComments}} class with an entity range.
        /// </summary>
        /// <param name="entities">The {{Entity.EntityName:ToSeeComments}} entities.</param>
        public {{Entity.Name}}Collection(IEnumerable<{{Entity.EntityName}}> entities)]]>
        <If Condition="Entity.RefDataSortOrder != null">
          <![CDATA[ : base(ReferenceDataSortOrder.{{Entity.RefDataSortOrder}})]]>
        </If>
        <![CDATA[
        {
            AddRange(entities);
        }

        #endregion
]]>
        <If Condition="Entity.Collection == true and Entity.CollectionKeyed == true">
          <![CDATA[
        #region KeyedCollection
        
        /// <summary>
        /// Gets the key ({{Entity.EntityName:ToSeeComments}} <see cref="IUniqueKey.UniqueKey"/>) for the item.
        /// </summary>
        protected override UniqueKey GetKeyForItem({{Entity.EntityName}} entity)
        {
            return entity.UniqueKey;
        }
        
        #endregion
]]>
        </If>
        <If Condition="Entity.CollectionInherits == null and Entity.RefDataType == null">
          <![CDATA[
        #region ICloneable
        
        /// <summary>
        /// Creates a deep copy of the {{Entity.EntityCollectionName:ToSeeComments}}.
        /// </summary>
        /// <returns>A deep copy of the {{Entity.EntityCollectionName:ToSeeComments}}.</returns>
        public override object Clone()
        {
            var clone = new {{Entity.EntityCollectionName}}();
            foreach ({{Entity.EntityName}} item in this)
            {
                clone.Add(({{Entity.EntityName}})item.Clone());
            }
                
            return clone;
        }
        
        #endregion
]]>
        </If>

        <If Condition="Entity.CollectionResult == true">
          <![CDATA[
        #region Operator

        /// <summary>
        /// An implicit cast from a {{Entity.EntityCollectionResultName:ToSeeComments}} to a {{Entity.EntityCollectionName:ToSeeComments}}.
        /// </summary>
        /// <param name="result">The {{Entity.EntityCollectionResultName:ToSeeComments}}.</param>
        /// <returns>The corresponding {{Entity.EntityCollectionName:ToSeeComments}}.</returns>
        public static implicit operator {{Entity.EntityCollectionName}}({{Entity.EntityCollectionResultName}} result)
        {
            return result?.Result;
        }

        #endregion
]]>
        </If>
        <![CDATA[    }
]]>
      </If>
      <If Condition="Entity.CollectionResult == true">
        <![CDATA[
    /// <summary>
    /// Represents a {{Entity.EntityName:ToSeeComments}} collection result.
    /// </summary>
    [SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Tightly coupled; OK.")]
]]>
        <![CDATA[    public class {{Entity.EntityCollectionResultName}} : ]]>
        <If Condition="Entity.CollectionResultInherits == null">
          <Then><![CDATA[EntityCollectionResult]]></Then>
          <Else><![CDATA[{{Entity.CollectionResultInherits}}]]></Else>
        </If>
        <![CDATA[<{{Entity.EntityCollectionName}}, {{Entity.EntityName}}>
    {
        /// <summary>
        /// Initializes a new instance of the {{Entity.EntityCollectionResultName:ToSeeComments}} class.
        /// </summary>
        public {{Entity.Name}}CollectionResult() { }
        
        /// <summary>
        /// Initializes a new instance of the {{Entity.EntityCollectionResultName:ToSeeComments}} class with default <see cref="PagingArgs"/>.
        /// </summary>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        public {{Entity.Name}}CollectionResult(PagingArgs paging) : base(paging) { }

        /// <summary>
        /// Initializes a new instance of the {{Entity.EntityCollectionResultName:ToSeeComments}} class with a <paramref name="collection"/> of items to add.
        /// </summary>
        /// <param name="collection">A collection containing items to add.</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        public {{Entity.Name}}CollectionResult(IEnumerable<{{Entity.EntityName}}> collection, PagingArgs paging = null) : base(paging)
        {
            Result.AddRange(collection);
        }
        
        /// <summary>
        /// Creates a deep copy of the {{Entity.EntityCollectionResultName:ToSeeComments}}.
        /// </summary>
        /// <returns>A deep copy of the {{Entity.EntityCollectionResultName:ToSeeComments}}.</returns>
        public override object Clone()
        {
            var clone = new {{Entity.EntityCollectionResultName}}();
            clone.CopyFrom(this);
            return clone;
        }
    }
]]>
      </If>
    </If>
    <![CDATA[}
]]>
  </Entity>
</Template>
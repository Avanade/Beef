<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef -->
<Template OutputGenDirName="Generated">
  <Entity>
    <Set Name="System.EntityName" Value="Entity.Name" />
    <Set Name="System.EntityExclude" Value="false" />
    <If Condition="Entity.ExcludeDataSvc == null and Entity.ExcludeAll == null and Entity.OperationCount == 0">
      <Set Name="System.EntityExclude" Value="true" />
    </If>
    <If Condition="Entity.ExcludeDataSvc == true or Entity.ExcludeAll == true">
      <Set Name="System.EntityExclude" Value="true" />
    </If>

    <Entity Condition="System.EntityExclude == false and Entity.Name == System.EntityName" OutputFileName="{{Entity.Name}}DataSvc.cs">
      <Set Name="Entity.EntityName" Condition="Entity.GenericWithT != true" Value="Entity.Name" Otherwise="${{Entity.Name}}&lt;T&gt;" />
      <Set Name="Entity.EntityCollectionName" Condition="Entity.GenericWithT != true" Value="${{Entity.Name}}Collection" Otherwise="${{Entity.Name}}Collection&lt;T&gt;" />
      <Set Name="Entity.EntityCollectionResultName" Condition="Entity.GenericWithT != true" Value="${{Entity.Name}}CollectionResult" Otherwise="${{Entity.Name}}CollectionResult&lt;T&gt;" />
      <![CDATA[/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using {{Config.Company}}.{{Config.AppName}}.Business.Data;
]]>
      <If Condition="Config.EntityUsing == 'Business' or Config.EntityUsing == 'All'">
        <![CDATA[using {{Config.Company}}.{{Config.AppName}}.Business.Entities;
]]>
      </If>
      <If Condition="Config.EntityUsing == null or Config.EntityUsing == 'Common' or Config.EntityUsing == 'All'">
        <![CDATA[using {{Config.Company}}.{{Config.AppName}}.Common.Entities;
]]>
      </If>
      <If Condition="Config.RefDataNamespace != null">
        <![CDATA[using RefDataNamespace = {{Config.RefDataNamespace}};
]]>
      </If>
      <If Condition="Config.RefDataBusNamespace != null">
        <![CDATA[using RefDataBusNamespace = {{Config.RefDataBusNamespace}};
]]>
      </If>
      <![CDATA[
namespace {{Config.Company}}.{{Config.AppName}}.Business.DataSvc
{
    /// <summary>
    /// Provides the {{Entity.Text:ToComments}} data repository services.
    /// </summary>
    public static partial class {{Entity.Name}}DataSvc]]>
      <If Condition="Entity.GenericWithT == true"><![CDATA[<T>]]></If>
      <![CDATA[
    {
]]>
      <Set Name="System.EndRegion" Value="false"/>
      <Operation Condition="Operation.ExcludeDataSvc == false and Operation.ExcludeAll == false and Operation.OperationType != 'Patch' and Operation.DataSvcCustom == false">
        <If Condition="System.EndRegion == false">
          <Set Name="System.EndRegion" Value="true"/>
          <![CDATA[        #region Private
        #pragma warning disable CS0649 // Defaults to null by design; can be overridden in constructor.

]]>
        </If>
        <![CDATA[        private static readonly Func<]]>
        <If Condition="Operation.OperationType == 'Get'">
          <If Condition="Operation.ReturnType == 'void'">
            <Then><![CDATA[{{Entity.EntityName}}?]]></Then>
            <Else><![CDATA[{{Operation.ReturnType}}?]]></Else>
          </If>
        </If>
        <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
          <If Condition="Operation.ReturnType == 'void'">
            <Then><![CDATA[{{Entity.EntityName}}]]></Then>
            <Else><![CDATA[{{Operation.ReturnType}}]]></Else>
          </If>
        </If>
        <If Condition="Operation.OperationType == 'GetColl'">
          <If Condition="Operation.ReturnType == 'void'">
            <Then><![CDATA[{{Entity.EntityCollectionResultName}}]]></Then>
            <Else><![CDATA[{{Operation.ReturnType}}CollectionResult]]></Else>
          </If>
        </If>
        <If Condition="Operation.OperationType == 'Custom' and Operation.ReturnType != 'void'">
          <![CDATA[{{Operation.ReturnType}}]]>
        </If>
        <Parameter Condition="Parameter.LayerPassing == 'All'">
          <If Condition="System.Index == 0">
            <Then>
              <If Condition="Operation.OperationType == 'GetColl' or Operation.OperationType == 'Get' or Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
                <![CDATA[, ]]>
              </If>
              <If Condition="Operation.OperationType == 'Custom' and Operation.ReturnType != 'void'">
                <![CDATA[, ]]>
              </If>
            </Then>
            <Else>
              <![CDATA[, ]]>
            </Else>
          </If>
          <![CDATA[{{Parameter.Type}}]]>
          <If Condition="Parameter.Nullable == true">
            <![CDATA[?]]>
          </If>
        </Parameter>
        <If Condition="Operation.OperationType == 'GetColl' and Operation.PagingArgs == true">
          <Then>
            <![CDATA[, PagingArgs?, ]]>
          </Then>
          <Else>
            <If Condition="Operation.ParameterCount > 0 or Operation.OperationType == 'GetColl' or Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
              <Then><![CDATA[, ]]></Then>
              <Else>
                <If Condition="Operation.OperationType == 'Custom' and Operation.ReturnType != 'void'">
                  <![CDATA[, ]]>
                </If>
              </Else>
            </If>
          </Else>
        </If>
        <![CDATA[Task>? {{Operation.PrivateName}}OnAfterAsync;
]]>
      </Operation>
      <If Condition="System.EndRegion == true">
        <![CDATA[
        #pragma warning restore CS0649
        #endregion

]]>
      </If>
      <Operation Condition="Operation.ExcludeDataSvc == false and Operation.ExcludeAll == false and Operation.OperationType != 'Patch'">
        <If Condition="System.Index > 0">
          <![CDATA[
]]>
        </If>
        <![CDATA[        /// <summary>
]]>
        <If Condition="Operation.Text == null">
          <Then>
            <If Condition="Operation.OperationType == 'GetColl'">
              <![CDATA[        /// Gets the ]]>
              <If Condition="Operation.ReturnType == 'void'">
                <Then><![CDATA[{{Entity.EntityName:ToSeeComments}}]]></Then>
                <Else><![CDATA[{{Operation.ReturnType:ToSeeComments}}]]></Else>
              </If>
              <![CDATA[ collection object that matches the selection criteria.
]]>
            </If>
            <If Condition="Operation.OperationType == 'Get'">
              <![CDATA[        /// Gets the ]]>
              <If Condition="Operation.ReturnType == 'void'">
                <Then><![CDATA[{{Entity.EntityName:ToSeeComments}}]]></Then>
                <Else><![CDATA[{{Operation.ReturnType:ToSeeComments}}]]></Else>
              </If>
              <![CDATA[ object that matches the selection criteria.
]]>
            </If>
            <If Condition="Operation.OperationType == 'Create'">
              <![CDATA[        /// Creates the ]]>
              <If Condition="Operation.ValueType == null">
                <Then><![CDATA[{{Entity.EntityName:ToSeeComments}}]]></Then>
                <Else><![CDATA[{{Operation.ValueType:ToSeeComments}}]]></Else>
              </If>
              <![CDATA[ object.
]]>
            </If>
            <If Condition="Operation.OperationType == 'Update'">
              <![CDATA[        /// Updates the ]]>
              <If Condition="Operation.ValueType == null">
                <Then><![CDATA[{{Entity.EntityName:ToSeeComments}}]]></Then>
                <Else><![CDATA[{{Operation.ValueType:ToSeeComments}}]]></Else>
              </If>
              <![CDATA[ object.
]]>
            </If>
            <If Condition="Operation.OperationType == 'Delete'">
              <![CDATA[        /// Deletes the {{Entity.EntityName:ToSeeComments}} object.
]]>
            </If>
            <If Condition="Operation.OperationType == 'Custom'">
              <![CDATA[        /// ???
]]>
            </If>
          </Then>
          <Else>
            <![CDATA[        /// {{Operation.Text:ToComments}}.
]]>
          </Else>
        </If>
        <![CDATA[        /// </summary>
]]>
        <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
          <![CDATA[        /// <param name="value">The ]]>
          <If Condition="Operation.ValueType == null">
            <Then><![CDATA[{{Entity.EntityName:ToSeeComments}}]]></Then>
            <Else><![CDATA[{{Operation.ValueType:ToSeeComments}}]]></Else>
          </If>
          <![CDATA[ object.</param>
]]>
        </If>
        <Parameter Condition="Parameter.LayerPassing == 'All'">
          <If Condition="Parameter.Text == null">
            <Then>
              <![CDATA[        /// <param name="{{Parameter.ArgumentName}}">???</param>
]]>
            </Then>
            <Else>
              <![CDATA[        /// <param name="{{Parameter.ArgumentName}}">The {{Parameter.Text:ToComments}}.</param>
]]>
            </Else>
          </If>
        </Parameter>
        <If Condition="Operation.OperationType == 'GetColl'">
          <If Condition="Operation.PagingArgs == true">
            <![CDATA[        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
]]>
          </If>
          <If Condition="Operation.ReturnType == 'void'">
            <Then>
              <![CDATA[        /// <returns>A {{Entity.EntityCollectionResultName:ToSeeComments}}.</returns>
        public static Task<{{Entity.EntityCollectionResultName}}> {{Operation.Name}}Async(]]>
            </Then>
            <Else>
              <![CDATA[        /// <returns>A <see cref="{{Operation.ReturnType}}CollectionResult"/>.</returns>
        public static Task<{{Operation.ReturnType}}CollectionResult> {{Operation.Name}}Async(]]>
            </Else>
          </If>
        </If>
        <If Condition="Operation.OperationType == 'Get'">
          <If Condition="Operation.ReturnType == 'void'">
            <Then>
              <![CDATA[        /// <returns>The selected {{Entity.EntityName:ToSeeComments}} object where found; otherwise, <c>null</c>.</returns>
        public static Task<{{Entity.EntityName}}?> {{Operation.Name}}Async(]]>
            </Then>
            <Else>
              <![CDATA[        /// <returns>The selected {{Operation.ReturnType:ToSeeComments}} object where found; otherwise, <c>null</c>.</returns>
        public static Task<{{Operation.ReturnType}}?> {{Operation.Name}}Async(]]>
            </Else>
          </If>
        </If>
        <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
          <If Condition="Operation.ReturnType == 'void'">
            <Then>
              <![CDATA[        /// <returns>A refreshed {{Entity.EntityName:ToSeeComments}} object.</returns>
        public static Task<{{Entity.EntityName}}>]]>
            </Then>
            <Else>
              <![CDATA[        /// <returns>A refreshed {{Operation.ReturnType:ToSeeComments}} object.</returns>
        public static Task<{{Operation.ReturnType}}>]]>
            </Else>
          </If>
          <![CDATA[ {{Operation.Name}}Async(]]>
          <If Condition="Operation.ValueType == null">
            <Then><![CDATA[{{Entity.EntityName}}]]></Then>
            <Else><![CDATA[{{Operation.ValueType}}]]></Else>
          </If>
          <![CDATA[ value]]>
        </If>
        <If Condition="Operation.OperationType == 'Delete'">
          <![CDATA[        public static Task {{Operation.Name}}Async(]]>
        </If>
        <If Condition="Operation.OperationType == 'Custom'">
          <If Condition="Operation.ReturnType == 'void'">
            <Then>
              <![CDATA[        public static Task {{Operation.Name}}Async(]]>
            </Then>
            <Else>
              <![CDATA[        /// <returns>{{Operation.ReturnText:ToComments}}</returns>
        public static Task<{{Operation.ReturnType}}> {{Operation.Name}}Async(]]>
            </Else>
          </If>
        </If>
        <Parameter Condition="Parameter.LayerPassing == 'All'">
          <If Condition="System.Index == 0">
            <Then>
              <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
                <![CDATA[, ]]>
              </If>
            </Then>
            <Else>
              <![CDATA[, ]]>
            </Else>
          </If>
          <![CDATA[{{Parameter.Type}}]]>
          <If Condition="Parameter.Nullable == true">
            <![CDATA[?]]>
          </If>
          <![CDATA[ {{Parameter.ArgumentName}}]]>
        </Parameter>
        <If Condition="Operation.OperationType == 'GetColl' and Operation.PagingArgs == true">
          <If Condition="Operation.ParameterCount > 0">
            <![CDATA[, ]]>
          </If>
          <![CDATA[PagingArgs? paging]]>
        </If>
        <![CDATA[)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof({{Entity.Name}}DataSvc]]>
        <If Condition="Entity.GenericWithT == true"><![CDATA[<T>]]></If>
        <![CDATA[), async () => 
            {
                ]]>
        <If Condition="Operation.OperationType == 'Get'">
          <If Condition="Entity.DataSvcCaching == null or Entity.DataSvcCaching == true">
            <![CDATA[var __key = new UniqueKey(]]>
            <Parameter>
              <If Condition="System.Index > 0">
                <![CDATA[, ]]>
              </If>
              <![CDATA[{{Parameter.ArgumentName}}]]>
            </Parameter>
            <If Condition="Operation.ReturnType == null or Operation.ReturnType == 'void'">
              <Then>
                <![CDATA[);
                if (ExecutionContext.Current.TryGetCacheValue<{{Entity.EntityName}}>(__key, out {{Entity.EntityName}} __val))
                    return __val;

                ]]>
              </Then>
              <Else>
                <![CDATA[);
                if (ExecutionContext.Current.TryGetCacheValue<{{Operation.ReturnType}}>(__key, out {{Operation.ReturnType}} __val))
                    return __val;

                ]]>
              </Else>
            </If>
          </If>
        </If>
        <If Condition="Operation.OperationType == 'Get' or Operation.OperationType == 'GetColl' or Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
          <Then><![CDATA[var __result = ]]></Then>
          <Else>
            <If Condition="Operation.OperationType == 'Custom' and Operation.ReturnType != 'void'"><![CDATA[var __result = ]]></If>
          </Else>
        </If>
        <![CDATA[await ]]>
        <If Condition="Operation.DataSvcCustom == false">
          <Then>
            <![CDATA[Factory.Create<I{{Entity.Name}}Data]]>
            <If Condition="Entity.GenericWithT == true"><![CDATA[<T>]]></If>
            <![CDATA[>().{{Operation.Name}}Async(]]>
          </Then>
          <Else>
            <![CDATA[{{Operation.Name}}OnImplementationAsync(]]>
          </Else>
        </If>
        <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
          <![CDATA[Check.NotNull(value, nameof(value))]]>
        </If>
        <Parameter Condition="Parameter.LayerPassing == 'All'">
          <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
            <Then><![CDATA[, ]]></Then>
            <Else>
              <If Condition="System.Index > 0"><![CDATA[, ]]></If>
            </Else>
          </If>
          <![CDATA[{{Parameter.ArgumentName}}]]>
        </Parameter>
        <If Condition="Operation.OperationType == 'GetColl' and Operation.PagingArgs == true">
          <If Condition="Operation.ParameterCount > 0">
            <![CDATA[, ]]>
          </If>
          <![CDATA[paging]]>
        </If>
        <![CDATA[).ConfigureAwait(false);
]]>
        <Set Name="System.EventPublish" Value="true" />
        <If Condition="Config.EventPublish != null">
          <Set Name="System.EventPublish" Value="Config.EventPublish" />
        </If>
        <If Condition="Entity.EventPublish != null">
          <Set Name="System.EventPublish" Value="Entity.EventPublish" />
        </If>
        <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update' or Operation.OperationType == 'Delete'" Not="true">
          <Set Name="System.EventPublish" Value="false" />
        </If>
        <If Condition="Operation.EventPublish != null">
          <Set Name="System.EventPublish" Value="Operation.EventPublish" />
        </If>
        <If Condition="System.EventPublish == true">
          <Set Name="System.GetFromArgs" Value="true" />
          <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
            <Set Name="System.GetFromArgs" Value="false" />
          </If>
          <![CDATA[                await Beef.Events.Event.PublishAsync(]]>
          <If Condition="Operation.EventSubject == null">
            <Then>
              <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
                <![CDATA[__result, ]]>
              </If>
              <If Condition="Operation.OperationType == 'Custom' and Operation.ReturnType != 'void'">
                <![CDATA[__result, ]]>
              </If>
              <![CDATA["{{Config.AppName}}.{{Entity.Name}}]]>
              <Property Condition="Property.UniqueKey == true">
                <If Condition="System.Index == 0">
                  <Then><![CDATA[.]]></Then>
                  <Else><![CDATA[,]]></Else>
                </If>
                <![CDATA[{]]>
                <![CDATA[{{Property.ArgumentName}}]]>
                <![CDATA[}]]>
              </Property>
              <If Condition="Operation.WebApiOperationType == null">
                <Then>
                  <Set Name="System.Action" Value="Operation.OperationType" /></Then>
                <Else>
                  <Set Name="System.Action" Value="Operation.WebApiOperationType" />
                </Else>
              </If>
              <Set Name="System.Action" Condition="Config.EventActionFormat == 'PastTense' or Config.EventActionFormat == 'PastTenseUpperCase'" Value="System.Action:ToPastTense" />
              <Set Name="System.Action" Condition="Config.EventActionFormat == 'UpperCase' or Config.EventActionFormat == 'PastTenseUpperCase'" Value="System.Action:ToUpperCase" />
              <![CDATA[", "{{System.Action}}"]]>
              <If Condition="System.GetFromArgs == true">
                <Then>
                  <Parameter>
                    <![CDATA[, new KeyValuePair<string, object?>("{{Parameter.ArgumentName}}", {{Parameter.ArgumentName}})]]>
                  </Parameter>
                </Then>
                <Else>
                  <Property Condition="Property.UniqueKey == true">
                    <![CDATA[, new KeyValuePair<string, object?>("{{Property.ArgumentName}}", __result.{{Property.Name}})]]>
                  </Property>
                </Else>
              </If>
            </Then>
            <Else>
              <ForEachList Name="Operation.EventSubject" Separator=";">
                <If Condition="System.Index > 0"><![CDATA[,]]></If>
                <![CDATA[
                    ]]>
                <![CDATA[Beef.Events.EventData.Create(]]>
                <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
                  <![CDATA[__result, ]]>
                </If>
                <If Condition="Operation.OperationType == 'Custom' and Operation.ReturnType != 'void'">
                  <![CDATA[__result, ]]>
                </If>
                <Set Name="System.Subject" Value="System.Value" />
                <Set Name="System.Action" Condition="Operation.WebApiOperationType == null" Value="Operation.OperationType" Otherwise="Operation.WebApiOperationType" />
                <ForEachList Name="System.Subject" Separator=":">
                  <If Condition="System.Index == 0"><![CDATA["{{System.Value}}"]]></If>
                  <If Condition="System.Index == 1">
                    <Set Name="System.Action" Value="System.Value"/>
                  </If>
                </ForEachList>
                <Set Name="System.Action" Condition="Config.EventActionFormat == 'PastTense' or Config.EventActionFormat == 'PastTenseUpperCase'" Value="System.Action:ToPastTense" />
                <Set Name="System.Action" Condition="Config.EventActionFormat == 'UpperCase' or Config.EventActionFormat == 'PastTenseUpperCase'" Value="System.Action:ToUpperCase" />
                <![CDATA[, "{{System.Action}}"]]>
                <If Condition="System.GetFromArgs == true">
                  <Then>
                    <Parameter>
                      <![CDATA[, new KeyValuePair<string, object?>("{{Parameter.ArgumentName}}", {{Parameter.ArgumentName}})]]>
                    </Parameter>
                  </Then>
                  <Else>
                    <Property Condition="Property.UniqueKey == true">
                      <![CDATA[, new KeyValuePair<string, object?>("{{Property.ArgumentName}}", __result.{{Property.Name}})]]>
                    </Property>
                  </Else>
                </If>
                <![CDATA[)]]>
              </ForEachList>
            </Else>
          </If>
          <![CDATA[).ConfigureAwait(false);
]]>
        </If>
        <If Condition="Entity.DataSvcCaching == null or Entity.DataSvcCaching == true">
          <If Condition="Operation.OperationType == 'Get'">
            <If Condition="Operation.ReturnType == null or Operation.ReturnType == 'void'">
              <Then>
                <![CDATA[                ExecutionContext.Current.CacheSet(__key, __result!);
]]>
              </Then>
              <Else>
                <![CDATA[                ExecutionContext.Current.CacheSet(__key, __result!);
]]>
              </Else>
            </If>
          </If>
          <If Condition="Operation.OperationType == 'Custom'">
            <If Condition="Operation.ReturnType == Entity.Name">
              <![CDATA[                ExecutionContext.Current.CacheSet(__result.UniqueKey, __result);
]]>
            </If>
            <If Condition="Operation.ReturnType == '{{Entity.Name}}?'">
              <![CDATA[                ExecutionContext.Current.CacheSet(__result?.UniqueKey ?? UniqueKey.Empty, __result);
]]>
            </If>
          </If>
          <If Condition="Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
            <If Condition="Operation.ReturnType == null or Operation.ReturnType == 'void'">
              <Then>
                <![CDATA[                ExecutionContext.Current.CacheSet(__result.UniqueKey, __result);
]]>
              </Then>
              <Else>
                <If Condition="Operation.ReturnType == Operation.ValueType or Operation.ReturnType == Entity.EntityName">
                  <![CDATA[                ExecutionContext.Current.CacheSet(__result.UniqueKey, __result);
]]>
                </If>
              </Else>
            </If>
          </If>
          <If Condition="Operation.OperationType == 'Delete'">
            <If Condition="Operation.ValueType == null or Operation.ValueType == 'void'">
              <Then><![CDATA[                ExecutionContext.Current.CacheRemove<{{Entity.EntityName}}>(new UniqueKey(]]></Then>
              <Else><![CDATA[                ExecutionContext.Current.CacheRemove<{{Operation.ValueType}}>(new UniqueKey(]]></Else>
            </If>
            <Parameter>
              <If Condition="System.Index != 0">
                <![CDATA[, ]]>
              </If>
              <![CDATA[{{Parameter.ArgumentName}}]]>
            </Parameter>
            <![CDATA[));
]]>
          </If>
        </If>
        <If Condition="Operation.DataSvcCustom == false">
          <![CDATA[                if ({{Operation.PrivateName}}OnAfterAsync != null) await {{Operation.PrivateName}}OnAfterAsync(]]>
          <If Condition="Operation.OperationType == 'GetColl' or Operation.OperationType == 'Get' or Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
            <![CDATA[__result]]>
          </If>
          <If Condition="Operation.OperationType == 'Custom' and Operation.ReturnType != 'void'">
            <![CDATA[__result]]>
          </If>
          <Parameter Condition="Parameter.LayerPassing == 'All'">
            <If Condition="System.Index == 0">
              <Then>
                <If Condition="Operation.OperationType == 'GetColl' or Operation.OperationType == 'Get' or Operation.OperationType == 'Create' or Operation.OperationType == 'Update'">
                  <![CDATA[, ]]>
                </If>
                <If Condition="Operation.OperationType == 'Custom' and Operation.ReturnType != 'void'">
                  <![CDATA[, ]]>
                </If>
              </Then>
              <Else>
                <![CDATA[, ]]>
              </Else>
            </If>
            <![CDATA[{{Parameter.ArgumentName}}]]>
          </Parameter>
          <If Condition="Operation.OperationType == 'GetColl' and Operation.PagingArgs == true">
            <If Condition="Operation.ParameterCount > 0">
              <Then>
                <![CDATA[, ]]>
              </Then>
              <Else>
                <If Condition="Operation.OperationType != 'Delete' and Operation.OperationType != 'Custom'">
                  <![CDATA[, ]]>
                </If>
                <If Condition="Operation.OperationType == 'Custom' and Operation.ReturnType != 'void'">
                  <![CDATA[, ]]>
                </If>
              </Else>
            </If>
            <![CDATA[paging]]>
          </If>
          <![CDATA[).ConfigureAwait(false);
]]>
        </If>
        <If Condition="Operation.OperationType == 'Get' or Operation.OperationType == 'Create' or Operation.OperationType == 'Update' or Operation.OperationType == 'GetColl'">
          <![CDATA[                return __result;
]]>
        </If>
        <If Condition="Operation.OperationType == 'Custom' and Operation.ReturnType != 'void'">
          <![CDATA[                return __result;
]]>
        </If>
        <![CDATA[            }]]>
        <If Condition="Operation.DataSvcTransaction == true">
          <![CDATA[, new BusinessInvokerArgs { IncludeTransactionScope = true }]]>
        </If>
        <![CDATA[);
]]>
        <![CDATA[        }
]]>
      </Operation>
      <![CDATA[    }
}

#nullable restore]]>
    </Entity>
  </Entity>
</Template>
<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef -->
<Template OutputGenDirName="Generated" OutputFileName="ReferenceDataAgent.cs">
  <Set Name="System.ServiceClientName" Value="Config.WebApiServiceClient"/>
  <If Condition="System.ServiceClientName == null or System.ServiceClientName == ''">
    <Set Name="System.ServiceClientName" Value="'ServiceClient'"/>
  </If>
  <![CDATA[/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Beef.RefData;
using Beef.WebApi;
using {{Config.Company}}.{{Config.AppName}}.Common.Agents.ServiceAgents;
using {{Config.Company}}.{{Config.AppName}}.Common.Entities;
]]>
  <If Condition="Config.RefDataNamespace != null">
    <![CDATA[using RefDataNamespace = {{Config.RefDataNamespace}};
]]>
  </If>
  <![CDATA[
namespace {{Config.Company}}.{{Config.AppName}}.Common.Agents
{
    /// <summary>
    /// Provides the <b>ReferenceData</b> Web API service agent.
    /// </summary>
    public partial class ReferenceDataAgent : WebApiAgentBase, IReferenceDataServiceAgent
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataAgent"/> class.
        /// </summary>
        /// <param name="httpClient">The <see cref="HttpClient"/> (where overridding the default value).</param>
        /// <param name="beforeRequest">The <see cref="Action{HttpRequestMessage}"/> to invoke before the <see cref="HttpRequestMessage">Http Request</see> is made (see <see cref="WebApiServiceAgentBase.BeforeRequest"/>).</param>
        public ReferenceDataAgent(HttpClient? httpClient = null, Action<HttpRequestMessage>? beforeRequest = null)
        {
            ServiceAgent = Beef.Factory.Create<IReferenceDataServiceAgent>(httpClient, beforeRequest);
        }
        
        /// <summary>
        /// Gets the underlyng <see cref="IReferenceDataServiceAgent"/> instance.
        /// </summary>
        public IReferenceDataServiceAgent ServiceAgent { get; private set; }
]]>
  <Entity Condition="Entity.RefDataType != null and Entity.EntityScope == 'Common'">
    <Set Name="Entity.EntityName" Condition="Config.RefDataNamespace == null" Value="${{Entity.Name}}" Otherwise="$RefDataNamespace.{{Entity.Name}}" />
    <Set Name="Entity.EntityCollectionName" Condition="Config.RefDataNamespace == null" Value="${{Entity.Name}}Collection" Otherwise="$RefDataNamespace.{{Entity.Name}}Collection" />
    <![CDATA[
        /// <summary>
        /// Gets all of the <see cref="{{Entity.Name}}"/> objects that match the filter arguments.
        /// </summary>
        /// <param name="args">The optional <see cref="ReferenceDataFilter"/> arguments.</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult<{{Entity.EntityCollectionName}}>> {{Entity.Name}}GetAllAsync(ReferenceDataFilter? args = null, WebApiRequestOptions? requestOptions = null) => ServiceAgent.{{Entity.Name}}GetAllAsync(args, requestOptions);      
]]>
  </Entity>
  <![CDATA[
        /// <summary>
        /// Gets the reference data entries for the specified entities and codes from the query string; e.g: {{Config.RefDataWebApiRoute}}?entity=codeX,codeY&amp;entity2=codeZ&amp;entity3
        /// </summary>
        /// <param name="names">The optional list of reference data names.</param>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        /// <remarks>The reference data objects will need to be manually extracted from the corresponding response content.</remarks>
        public Task<WebApiAgentResult> GetNamedAsync(string[] names, WebApiRequestOptions? requestOptions = null) => ServiceAgent.GetNamedAsync(names, requestOptions);
        
        /// <summary>
        /// Gets the reference data entries for the specified entities and codes from the query string; e.g: {{Config.RefDataWebApiRoute}}?entity=codeX,codeY&amp;entity2=codeZ&amp;entity3
        /// </summary>
        /// <param name="requestOptions">The optional <see cref="WebApiRequestOptions"/>.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        /// <remarks>The reference data objects will need to be manually extracted from the corresponding response content.</remarks>
        public Task<WebApiAgentResult> GetNamedAsync(WebApiRequestOptions? requestOptions = null) => ServiceAgent.GetNamedAsync(Array.Empty<string>(), requestOptions);
    }
}

#pragma warning restore IDE0005
#nullable restore]]>
</Template>
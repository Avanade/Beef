{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using Beef.Validation;
{{#ifeq EntityUsing 'Common' 'All'}}
using {{Root.NamespaceCommon}}.Entities;
{{/ifeq}}
{{#ifeq EntityUsing 'Business' 'All'}}
using {{Root.NamespaceBusiness}}.Entities;
{{/ifeq}}
{{#if ManagerNeedsUsingDataSvc}}
using {{Root.NamespaceBusiness}}.DataSvc;
{{/if}}
{{#if UsesValidators}}
using {{#ifeq Root.ValidatorLayer 'Common'}}{{Root.NamespaceCommon}}{{else}}{{Root.NamespaceBusiness}}{{/ifeq}}.Validation;
{{/if}}
{{#ifval Root.RefDataNamespace}}
using RefDataNamespace = {{Root.RefDataNamespace}};
{{/ifval}}
{{#ifval Root.RefDataBusNamespace}}
using RefDataNamespace = {{Root.RefDataBusNamespace}};
{{/ifval}}

namespace {{Root.NamespaceBusiness}}
{
    /// <summary>
    /// Provides the {{{EntityNameSeeComments}}} business functionality.
    /// </summary>
    public partial class {{Name}}Manager{{#if GenericWithT}}<T>{{/if}} : I{{Name}}Manager{{#if GenericWithT}}<T>{{/if}}
    {
{{#each ManagerCtorParameters}}
        private readonly {{Type}} {{PrivateName}};
  {{#if @last}}

  {{/if}}
{{/each}}
{{#if HasManagerExtensions}}
        #region Extensions

  {{#each ManagerAutoOperations}}
    {{#if ManagerExtensions}}
      {{#unless SingleValidateParameters}}
        private Func<{{#each Parameters}}{{{ParameterType}}}, {{/each}}Task>? {{PrivateName}}OnPreValidateAsync;
        private Action<MultiValidator{{#each Parameters}}, {{{ParameterType}}}{{/each}}>? {{PrivateName}}OnValidate;
      {{/unless}}
        private Func<{{#each Parameters}}{{{ParameterType}}}, {{/each}}Task>? {{PrivateName}}OnBeforeAsync;
        private Func<{{#if HasReturnValue}}{{OperationReturnType}}, {{/if}}{{#each ValueLessParameters}}{{{ParameterType}}}, {{/each}}Task>? {{PrivateName}}OnAfterAsync;

    {{/if}}
  {{/each}}
        #endregion

{{/if}}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{Name}}Manager"/> class.
        /// </summary>
{{#each ManagerCtorParameters}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
{{/each}}
        {{lower ManagerCtor}} {{Name}}Manager({{#each ManagerCtorParameters}}{{#unless @first}}, {{/unless}}{{Type}} {{ArgumentName}}{{/each}})
{{#ifle ManagerCtorParameters.Count 2}}
            { {{#each ManagerCtorParameters}}{{PrivateName}} = Check.NotNull({{ArgumentName}}, nameof({{ArgumentName}})); {{/each}}{{Name}}ManagerCtor(); }
{{else}}
        {
  {{#each ManagerCtorParameters}}
            {{PrivateName}} = Check.NotNull({{ArgumentName}}, nameof({{ArgumentName}}));
  {{/each}}
            {{Name}}ManagerCtor();
        }
{{/ifle}}

        partial void {{Name}}ManagerCtor(); // Enables additional functionality to be added to the constructor.

{{#each ManagerOperations}}
  {{#unless @first}}

  {{/unless}} 
        /// <summary>
        /// {{{SummaryText}}}
        /// </summary>
  {{#each Parameters}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
  {{/each}}
  {{#if HasReturnValue}}
        /// <returns>{{{ReturnText}}}</returns>
  {{/if}}
        public async {{{OperationTaskReturnType}}} {{Name}}Async({{#each Parameters}}{{#unless @first}}, {{/unless}}{{{ParameterType}}} {{ArgumentName}}{{/each}}) => await ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
  {{#ifeq Type 'Create' 'Update'}}
            await value.Validate().Mandatory().RunAsync(throwOnError: true).ConfigureAwait(false);

  {{/ifeq}}
  {{#ifval AuthRole}}
            ExecutionContext.Current.IsInRole("{{AuthRole}}", true);
  {{/ifval}}
  {{#ifval AuthPermission}}
            ExecutionContext.Current.IsAuthorized("{{AuthPermission}}", true);
  {{/ifval}}
  {{#ifeq Type 'Create'}}
    {{#each Parent.Properties}}
      {{#ifval IdentifierGeneratorName}}
            value.{{Name}} = await {{private IdentifierGeneratorName}}.GenerateIdentifierAsync<{{../../ValueType}}>().ConfigureAwait(false);
      {{/ifval}}
    {{/each}}
  {{/ifeq}}
  {{#each Parameters}}
    {{#ifeq LayerPassing 'ToManagerSet'}}
            value.{{Name}} = {{ArgumentName}};
    {{/ifeq}}
    {{#ifeq LayerPassing 'ToManagerCollSet'}}
            value?.ForEach(__item => __item.{{Name}} = {{ArgumentName}});
    {{/ifeq}}
  {{/each}}
  {{#if ManagerCustom}}
            {{#if HasReturnValue}}return Cleaner.Clean({{/if}}await {{Name}}OnImplementationAsync({{#each Parameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}}).ConfigureAwait(false){{#if HasReturnValue}}){{/if}};
  {{else}}
    {{#ifne CleanerParameters.Count 0}}
            Cleaner.CleanUp({{#each CleanerParameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}});
    {{/ifne}}
    {{#if ManagerExtensions}}
      {{#unless SingleValdiateParameters}}
            await ({{PrivateName}}OnPreValidateAsync?.Invoke({{#each Parameters}}{{#unless @first}}, {{/unless}}{{{ArgumentName}}}{{/each}}) ?? Task.CompletedTask).ConfigureAwait(false);

      {{/unless}}
    {{/if}}
    {{#if SingleValidateParameters}}
      {{#each ValidateParameters}}
            await {{ArgumentName}}.Validate({{#ifne ArgumentName 'value'}}nameof({{ArgumentName}}){{/ifne}}){{#if IsMandatory}}.Mandatory(){{/if}}{{#ifval Validator}}.Entity().With<{{IValidator}}>(){{/ifval}}{{#ifval ValidatorCode}}.{{ValidatorCode}}{{/ifval}}.RunAsync(throwOnError: true).ConfigureAwait(false);
      {{/each}}
    {{else}}
            await MultiValidator.Create()
      {{#each ValidateParameters}}
                .Add({{ArgumentName}}.Validate(nameof({{ArgumentName}})){{#if IsMandatory}}.Mandatory(){{/if}}{{#ifval Validator}}.Entity().With<{{IValidator}}>(){{/ifval}}{{#ifval ValidatorCode}}.{{ValidatorCode}}{{/ifval}})
      {{/each}}
      {{#if ManagerExtensions}}
        {{#unless SingleValidateParameters}}
                .Additional((__mv) => {{PrivateName}}OnValidate?.Invoke(__mv{{#each Parameters}}, {{ArgumentName}}{{/each}}))
        {{/unless}}
      {{/if}}
                .RunAsync(throwOnError: true).ConfigureAwait(false);

    {{/if}}
    {{#if ManagerExtensions}}
            await ({{PrivateName}}OnBeforeAsync?.Invoke({{#each Parameters}}{{#unless @first}}, {{/unless}}{{{ArgumentName}}}{{/each}}) ?? Task.CompletedTask).ConfigureAwait(false);
            {{#if HasReturnValue}}var __result = {{/if}}await _dataService.{{Name}}Async({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{{ArgumentName}}}{{/each}}).ConfigureAwait(false);
            await ({{PrivateName}}OnAfterAsync?.Invoke({{#if HasReturnValue}}__result{{/if}}{{#each ValueLessParameters}}{{#if @first}}{{#if Parent.HasReturnValue}}, {{/if}}{{else}}, {{/if}}{{{ArgumentName}}}{{/each}}) ?? Task.CompletedTask).ConfigureAwait(false);
      {{#if HasReturnValue}}
            return Cleaner.Clean(__result);
      {{/if}}
    {{else}}
            {{#if HasReturnValue}}return Cleaner.Clean({{/if}}await _dataService.{{Name}}Async({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{{ArgumentName}}}{{/each}}).ConfigureAwait(false){{#if HasReturnValue}}){{/if}};
    {{/if}}
  {{/if}}
  {{#if ManagerTransaction}}
        }, new BusinessInvokerArgs { IncludeTransactionScope = true, OperationType = OperationType.{{ManagerOperationType}} }).ConfigureAwait(false);
  {{else}}
        }, BusinessInvokerArgs.{{ManagerOperationType}}).ConfigureAwait(false);
  {{/if}}
{{/each}}
    }
}

#pragma warning restore
#nullable restore
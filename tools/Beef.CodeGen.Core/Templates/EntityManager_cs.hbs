{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using Beef.Validation;
{{#ifeq Root.EntityUsing 'Common' 'All'}}
using {{Root.Company}}.{{Root.AppName}}.Common.Entities;
{{/ifeq}}
{{#ifeq Root.EntityUsing 'Business' 'All'}}
using {{Root.Company}}.{{Root.AppName}}.Business.Entities;
{{/ifeq}}
using {{Root.Company}}.{{Root.AppName}}.Business.DataSvc;
{{#if UsesValidators}}
using {{Root.Company}}.{{Root.AppName}}.{{Root.ValidatorLayer}}.Validation;
{{/if}}
{{#ifval Root.RefDataNamespace}}
using RefDataNamespace = {{Root.RefDataNamespace}};
{{/ifval}}
{{#ifval Root.RefDataBusNamespace}}
using RefDataNamespace = {{Root.RefDataBusNamespace}};
{{/ifval}}

namespace {{Root.Company}}.{{Root.AppName}}.Business
{
    /// <summary>
    /// Provides the {{{EntityNameSeeComments}}} business functionality.
    /// </summary>
    public partial class {{Name}}Manager{{#if GenericWithT}}<T>{{/if}} : I{{Name}}Manager{{#if GenericWithT}}<T>{{/if}}
    {
{{#if RequiresDataSvc}}
        private readonly I{{Name}}DataSvc _dataService;

{{/if}}
{{#if ManagerExtensions}}
        #region Extensions
        #pragma warning disable CS0649, IDE0044 // Defaults to null by design; can be overridden in constructor.

  {{#each ManagerAutoOperations}}
    {{#unless SingleValidateParameters}}
        private Func<{{#each Parameters}}{{{ParameterType}}}, {{/each}}Task>? {{PrivateName}}OnPreValidateAsync;
        private Action<MultiValidator{{#each Parameters}}, {{{ParameterType}}}{{/each}}>? {{PrivateName}}OnValidate;
    {{/unless}}
        private Func<{{#each Parameters}}{{{ParameterType}}}, {{/each}}Task>? {{PrivateName}}OnBeforeAsync;
        private Func<{{#if HasReturnValue}}{{OperationReturnType}}, {{/if}}{{#each ValueLessParameters}}{{{ParameterType}}}, {{/each}}Task>? {{PrivateName}}OnAfterAsync;

  {{/each}}
        #pragma warning restore CS0649, IDE0044
        #endregion

{{/if}}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{Name}}Manager"/> class.
        /// </summary>
{{#if RequiresDataSvc}}
        /// <param name="dataService">The <see cref="I{{Name}}DataSvc"/>.</param>
        {{lower ManagerConstructor}} {{Name}}Manager(I{{Name}}DataSvc dataService)
            { _dataService = Check.NotNull(dataService, nameof(dataService)); {{Name}}ManagerCtor(); }
{{else}}
        {{lower ManagerConstructor}} {{Name}}Manager() => {{Name}}ManagerCtor();
{{/if}}

        partial void {{Name}}ManagerCtor(); // Enables additional functionality to be added to the constructor.

{{#each ManagerOperations}}
  {{#unless @first}}

  {{/unless}} 
        /// <summary>
        /// {{{SummaryText}}}
        /// </summary>
  {{#each Parameters}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
  {{/each}}
  {{#if HasReturnValue}}
        /// <returns>{{{ReturnText}}}</returns>
  {{/if}}
        public {{{OperationTaskReturnType}}} {{Name}}Async({{#each Parameters}}{{#unless @first}}, {{/unless}}{{ParameterType}} {{ArgumentName}}{{/each}})
        {
  {{#ifeq Type 'Create' 'Update'}}
            value.Validate(nameof(value)).Mandatory().Run().ThrowOnError();

  {{/ifeq}}
            return ManagerInvoker.Current.InvokeAsync(this, async () =>
            {
  {{#ifval AuthRole}}
                ExecutionContext.Current.IsInRole("{{AuthRole}}", true);
  {{/ifval}}
  {{#ifval AuthPermission}}
                ExecutionContext.Current.IsAuthorized("{{AuthPermission}}", true);
  {{/ifval}}
                ExecutionContext.Current.OperationType = OperationType.{{WebApiOperationType}};
  {{#each Parameters}}
    {{#ifeq LayerPassing 'ToManagerSet'}}
                value.{{Name}} = {{ArgumentName}};
    {{/ifeq}}
    {{#ifeq LayerPassing 'ToManagerCollSet'}}
                value?.ForEach(__item => __item.{{Name}} = {{ArgumentName}});
    {{/ifeq}}
  {{/each}}
  {{#if ManagerCustom}}
                {{#if HasReturnValue}}return Cleaner.Clean({{/if}}await {{Name}}OnImplementationAsync({{#each Parameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}}).ConfigureAwait(false){{#if HasReturnValue}}){{/if}};
  {{else}}
    {{#ifne CleanerParameters.Count 0}}
                Cleaner.CleanUp({{#each CleanerParameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}});
    {{/ifne}}
    {{#if Parent.ManagerExtensions}}
      {{#unless SingleValdiateParameters}}
                if ({{PrivateName}}OnPreValidateAsync != null) await {{PrivateName}}OnPreValidateAsync({{#each Parameters}}{{#unless @first}}, {{/unless}}{{{ArgumentName}}}{{/each}}).ConfigureAwait(false);

      {{/unless}}
    {{/if}}
    {{#if SingleValidateParameters}}
      {{#each ValidateParameters}}
                {{ArgumentName}}.Validate(nameof({{ArgumentName}})){{#if IsMandatory}}.Mandatory(){{/if}}{{#ifval Validator}}.Entity({{Validator}}.Default){{/ifval}}{{#ifval ValidatorCode}}.{{ValidatorCode}}{{/ifval}}.Run().ThrowOnError();
      {{/each}}
    {{else}}
                MultiValidator.Create()
      {{#each ValidateParameters}}
                    .Add({{ArgumentName}}.Validate(nameof({{ArgumentName}})){{#if IsMandatory}}.Mandatory(){{/if}}{{#ifval Validator}}.Entity({{Validator}}.Default){{/ifval}}{{#ifval ValidatorCode}}.{{ValidatorCode}}{{/ifval}})
      {{/each}}
      {{#if Parent.ManagerExtensions}}
        {{#unless SingleValidateParameters}}
                    .Additional((__mv) => {{PrivateName}}OnValidate?.Invoke(__mv{{#each Parameters}}, {{ArgumentName}}{{/each}}))
        {{/unless}}
      {{/if}}
                    .Run().ThrowOnError();

    {{/if}}
    {{#if Parent.ManagerExtensions}}
                if ({{PrivateName}}OnBeforeAsync != null) await {{PrivateName}}OnBeforeAsync({{#each Parameters}}{{#unless @first}}, {{/unless}}{{{ArgumentName}}}{{/each}}).ConfigureAwait(false);
                {{#if HasReturnValue}}var __result = {{/if}}await _dataService.{{Name}}Async({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{{ArgumentName}}}{{/each}}).ConfigureAwait(false);
                if ({{PrivateName}}OnAfterAsync != null) await {{PrivateName}}OnAfterAsync({{#if HasReturnValue}}__result{{/if}}{{#each ValueLessParameters}}{{#if @first}}{{#if Parent.HasReturnValue}}, {{/if}}{{else}}, {{/if}}{{{ArgumentName}}}{{/each}}).ConfigureAwait(false);
      {{#if HasReturnValue}}
                return Cleaner.Clean(__result);
      {{/if}}
    {{else}}
                {{#if HasReturnValue}}return Cleaner.Clean({{/if}}await _dataService.{{Name}}Async({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{{ArgumentName}}}{{/each}}).ConfigureAwait(false){{#if HasReturnValue}}){{/if}};
    {{/if}}
  {{/if}}
            }{{#if ManagerTransaction}}, new BusinessInvokerArgs { IncludeTransactionScope = true }{{/if}});
        }
{{/each}}
    }
}

#pragma warning restore IDE0005
#nullable restore
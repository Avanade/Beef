<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef -->
<Template OutputGenDirName="Generated" OutputFileName="ReferenceDataDataSvc.cs">
  <Header>
    <![CDATA[/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Beef;
using Beef.Business;
using Beef.RefData;
using Beef.RefData.Caching;
using {{Config.Company}}.{{Config.AppName}}.Business.Data;
]]>
    <If Condition="Config.RefDataNamespace != null">
      <![CDATA[using RefDataNamespace = {{Config.RefDataNamespace}};
]]>
    </If>
    <If Condition="Config.RefDataBusNamespace != null">
      <![CDATA[using RefDataBusNamespace = {{Config.RefDataBusNamespace}};
]]>
    </If>
    <![CDATA[
namespace {{Config.Company}}.{{Config.AppName}}.Business.DataSvc
{
    /// <summary>
    /// Provides the <b>ReferenceData</b> data services.
    /// </summary>
    public class ReferenceDataDataSvc : IReferenceDataDataSvc
    {
        private readonly IServiceProvider _provider;
        private readonly Dictionary<Type, IReferenceDataCache> _cacheDict = new Dictionary<Type, IReferenceDataCache>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataDataSvc" /> class.
        /// </summary>
        /// <param name="provider">The <see cref="IServiceProvider"/>.</param>
        public ReferenceDataDataSvc(IServiceProvider provider)
        {
            _provider = Check.NotNull(provider, nameof(provider));
]]>
  </Header>
  <Entity Condition="Entity.RefDataType != null and Entity.ExcludeDataSvc == false and Entity.ExcludeAll == false">
    <Set Name="Entity.EntityName" Condition="Config.RefDataNamespace == null" Value="${{Entity.Name}}" Otherwise="$RefDataNamespace.{{Entity.Name}}" />
    <Set Name="Entity.EntityCollectionName" Condition="Config.RefDataNamespace == null" Value="${{Entity.Name}}Collection" Otherwise="$RefDataNamespace.{{Entity.Name}}Collection" />
    <![CDATA[            _cacheDict.Add(typeof({{Entity.EntityName}}), new ]]>
    <If Condition="Config.RefDataCache == null">
      <Then><![CDATA[ReferenceDataCache]]></Then>
      <Else><![CDATA[{{Config.RefDataCache}}]]></Else>
    </If>
    <![CDATA[<{{Entity.EntityCollectionName}}, ]]>
    <If Condition="Config.UseEntityData == true">
      <Then>
        <![CDATA[{{Entity.EntityName}}>(() => DataSvcInvoker.Current.InvokeAsync(typeof(ReferenceDataDataSvc), () => Factory.Create<I{{Entity.Name}}Data>().GetAllAsync())));
]]>
      </Then>
      <Else>
        <![CDATA[{{Entity.EntityName}}>(() => DataSvcInvoker.Current.InvokeAsync(typeof(ReferenceDataDataSvc), () => GetData(data => data.{{Entity.Name}}GetAllAsync()))));
]]>
      </Else>
    </If>
  </Entity>
  <Footer>
    <![CDATA[        }

        /// <summary>
        /// Gets the data within a new scope; each reference data request needs to occur separately and independently.
        /// </summary>
        private Task<T> GetData<T>(Func<IReferenceDataData, Task<T>> func)
        {
            using var scope = _provider.CreateScope();
            return func(scope.ServiceProvider.GetService<IReferenceDataData>());
        }

        /// <summary>
        /// Gets the <see cref="IReferenceDataCollection"/> for the associated <see cref="ReferenceDataBase"/> <see cref="Type"/>.
        /// </summary>
        /// <param name="type">The <see cref="ReferenceDataBase"/> type associated </param>
        /// <returns>A <see cref="IReferenceDataCollection"/>.</returns>
        public IReferenceDataCollection GetCollection(Type type)
        {
            if (_cacheDict.TryGetValue(type ?? throw new ArgumentNullException(nameof(type)), out var rdc))
                return rdc.GetCollection();
            else
                throw new ArgumentException($"Type {type.Name} does not exist within the ReferenceDataDataSvc cache.", nameof(type));
        }
    }
}

#pragma warning restore IDE0005
#nullable restore]]>
  </Footer>
</Template>
{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Net;
using System.Threading.Tasks;
using Beef;
using Beef.Grpc;
using Grpc.Core;
using Microsoft.AspNetCore.Authorization;
using {{Root.NamespaceBusiness}};
using {{Root.NamespaceCommon}}.Grpc;
using {{Root.NamespaceCommon}}.Grpc.Proto;
{{#ifval Root.RefDataNamespace}}
using RefDataNamespace = {{Root.RefDataNamespace}};
{{/ifval}}
{{#ifval Root.RefDataBusNamespace}}
using RefDataNamespace = {{Root.RefDataBusNamespace}};
{{/ifval}}

namespace {{Root.NamespaceApi}}.Grpc
{
    /// <summary>
    /// Provides the {{{EntityNameSeeComments}}} gRPC Server functionality.
    /// </summary>
{{#ifval WebApiAuthorize}}
    [{{{WebApiAuthorize}}}]
{{/ifval}}
    public partial class {{Name}}Service : {{Name}}GrpcService.{{Name}}GrpcServiceBase
    {
        private readonly I{{Name}}Manager _manager;

        /// <summary>
        /// Initializes a new instance of the <see cref="{{Name}}Service"/> class.
        /// </summary>
        /// <param name="manager">The <see cref="I{{Name}}Manager"/>.</param>
        public {{Name}}Service(I{{Name}}Manager manager)
            { _manager = Check.NotNull(manager, nameof(manager)); ServiceCtor(); }

        partial void ServiceCtor(); // Enables additional functionality to be added to the constructor.

{{#each GrpcOperations}}
  {{#unless @first}}

  {{/unless}} 
        /// <summary>
        /// {{{SummaryText}}}
        /// </summary>
        /// <param name="request">The <see cref="{{Parent.Name}}{{Name}}Request"/>.</param>
        /// <param name="context">The <see cref="ServerCallContext"/>.</param>
        /// <returns>The {{#if HasReturnValue}}{{seecomments ReturnType}}{{else}}{{seecomments 'Google.Protobuf.WellKnownTypes.Empty'}}{{/if}}.</returns>
  {{#ifval WebApiAuthorize}}
        [{{{WebApiAuthorize}}}]
  {{/ifval}}
        public override Task<{{#if HasReturnValue}}{{ReturnType}}{{else}}Google.Protobuf.WellKnownTypes.Empty{{/if}}> {{Name}}({{Parent.Name}}{{Name}}Request request, ServerCallContext context)
        {
            return new GrpcService<{{#if HasReturnValue}}{{ReturnType}}{{else}}Google.Protobuf.WellKnownTypes.Empty{{/if}}>(context, async () =>
            {
                var __req = request ?? new {{Parent.Name}}{{Name}}Request();
                {{#if HasReturnValue}}var __result = {{/if}}await _manager.{{Name}}Async({{#each Parameters}}{{#unless @first}}, {{/unless}}{{#if IsValueArg}}Transformers.{{Type}}.MapToSrce(__req.Value)!{{else}}{{#if IsPagingArgs}}__req.Paging == null ? new Entities.PagingArgs() : Transformers.PagingArgsToPagingArgsConverter.ConvertToSrce(__req.Paging){{else}}{{#if GrpcConverter}}Transformers.{{GrpcConverter}}.ConvertToSrce(__req.{{Name}}){{else}}{{#if GrpcMapper}}Transformers.{{GrpcMapper}}.MapToSrce(__req.{{Name}})!{{else}}__req.{{Name}}{{/if}}{{/if}}{{/if}}{{/if}}{{/each}});
                return {{#if HasReturnValue}}Transformers.{{ReturnType}}.MapToDest(__result!)!;{{else}}new Google.Protobuf.WellKnownTypes.Empty();{{/if}}
            }, operationType: OperationType.{{WebApiOperationType}}, statusCode: HttpStatusCode.{{WebApiStatus}}{{#if HasReturnValue}}, alternateStatusCode: {{#ifeq WebApiAlternateStatus 'ThrowException'}}null{{else}}HttpStatusCode.{{WebApiAlternateStatus}}{{/ifeq}}{{/if}}).ExecuteAsync();
        }
{{/each}}
    }
}

#pragma warning restore IDE0005
#nullable restore
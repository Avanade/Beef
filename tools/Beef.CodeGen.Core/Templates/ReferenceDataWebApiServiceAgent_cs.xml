<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef -->
<Template OutputGenDirName="Generated" OutputFileName="ReferenceDataServiceAgent.cs">
  <Set Name="System.ServiceClientName" Value="Config.WebApiServiceClient"/>
  <If Condition="System.ServiceClientName == null or System.ServiceClientName == ''">
    <Set Name="System.ServiceClientName" Value="'ServiceClient'"/>
  </If>
  <![CDATA[/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Beef.RefData;
using Beef.WebApi;
using {{Config.Company}}.{{Config.AppName}}.Common.Entities;
]]>
  <If Condition="Config.RefDataNamespace != null">
    <![CDATA[using RefDataNamespace = {{Config.RefDataNamespace}};
]]>
  </If>
  <![CDATA[
namespace {{Config.Company}}.{{Config.AppName}}.Common.Agents.ServiceAgents
{
    /// <summary>
    /// Defines the <b>ReferenceData</b> service agent.
    /// </summary>
    public partial interface IReferenceDataServiceAgent
    {
]]>
  <Entity Condition="Entity.RefDataType != null and Entity.EntityScope == 'Common'">
    <Set Name="Entity.EntityName" Condition="Config.RefDataNamespace == null" Value="${{Entity.Name}}" Otherwise="$RefDataNamespace.{{Entity.Name}}" />
    <Set Name="Entity.EntityCollectionName" Condition="Config.RefDataNamespace == null" Value="${{Entity.Name}}Collection" Otherwise="$RefDataNamespace.{{Entity.Name}}Collection" />
    <![CDATA[        /// <summary>
        /// Gets all of the {{Entity.EntityName:ToSeeComments}} objects.
        /// </summary>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        Task<WebApiAgentResult<{{Entity.EntityCollectionName}}>> {{Entity.Name}}GetAllAsync();

]]>
  </Entity>
  <![CDATA[        /// <summary>
        /// Gets the named reference data objects.
        /// </summary>
        /// <param name="names">The list of reference data names.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        /// <remarks>The reference data objects will need to be manually extracted from the corresponding response content.</remarks>
        Task<WebApiAgentResult> GetNamedAsync(string[] names);
    }

    /// <summary>
    /// Provides the <b>ReferenceData</b> Web API service agent.
    /// </summary>
    public partial class ReferenceDataServiceAgent : WebApiServiceAgentBase<ReferenceDataServiceAgent>, IReferenceDataServiceAgent
    {
        /// <summary>
        /// Static constructor.
        /// </summary>
        static ReferenceDataServiceAgent()
        {
            Register(() =>
            {
                var rd = WebApiServiceAgentManager.Get<ReferenceDataServiceAgent>();
                return rd == null ? null : new ReferenceDataServiceAgent(rd.Client, rd.BeforeRequest);
            }, false);
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataServiceAgent"/> class with a <paramref name="httpClient"/>.
        /// </summary>
        /// <param name="httpClient">The <see cref="HttpClient"/>.</param>
        /// <param name="beforeRequest">The <see cref="Action{HttpRequestMessage}"/> to invoke before the <see cref="HttpRequestMessage">Http Request</see> is made (see <see cref="WebApiServiceAgentBase.BeforeRequest"/>).</param>
        public ReferenceDataServiceAgent(HttpClient httpClient = null, Action<HttpRequestMessage> beforeRequest = null) : base(httpClient, beforeRequest) { }
]]>
  <Entity Condition="Entity.RefDataType != null and Entity.EntityScope == 'Common'">
    <![CDATA[
        /// <summary>
        /// Gets all of the {{Entity.EntityName:ToSeeComments}} objects.
        /// </summary>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        public Task<WebApiAgentResult<{{Entity.EntityCollectionName}}>> {{Entity.Name}}GetAllAsync() => base.GetAsync<{{Entity.EntityCollectionName}}>("{{Entity.WebApiRoutePrefix}}", args: new WebApiArg[] { });      
]]>
  </Entity>
  <![CDATA[
        /// <summary>
        /// Gets the named reference data objects.
        /// </summary>
        /// <param name="names">The list of reference data names.</param>
        /// <returns>A <see cref="WebApiAgentResult"/>.</returns>
        /// <remarks>The reference data objects will need to be manually extracted from the corresponding response content.</remarks>
        public Task<WebApiAgentResult> GetNamedAsync(string[] names) => base.GetAsync("{{Config.RefDataWebApiRoute}}", args: new WebApiArg[] { new WebApiArg<string[]>("names", names) });
    }
}]]>
</Template>
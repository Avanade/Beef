/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Beef.RefData;
using Beef.RefData.Caching;
using Beef.WebApi;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using {{Root.NamespaceCommon}}.Entities;
{{#ifval Root.RefDataCommonNamespace}}
using RefDataNamespace = {{Root.RefDataCommonNamespace}};
{{/ifval}}

namespace {{Root.NamespaceCommon}}.Agents
{
    /// <summary>
    /// Provides the <see cref="ReferenceData"/> implementation using the corresponding Web API agent.
    /// </summary>
    public partial class ReferenceDataAgentProvider : {{#ifval Root.RefDataNamespace}}RefDataNamespace.{{/ifval}}ReferenceData
    {
        private readonly Dictionary<string, Type> _nameDict = new Dictionary<string, Type>();
        private readonly Dictionary<Type, string> _typeDict = new Dictionary<Type, string>();
        private readonly IReferenceDataAgent _agent;
        private readonly Dictionary<Type, object> _cacheDict = new Dictionary<Type, object>();

        #region Ctor
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataAgentProvider"/> class.
        /// </summary>
        /// <param name="agent">The <see cref="IReferenceDataAgent"/>.</param>
        public ReferenceDataAgentProvider(IReferenceDataAgent agent)
        {
            _agent = Beef.Check.NotNull(agent, nameof(agent));
{{#each RefDataEntities}}

            _nameDict.Add(nameof({{Name}}), typeof({{RefDataQualifiedEntityName}}));
            _typeDict.Add(typeof({{RefDataQualifiedEntityName}}), nameof({{Name}}));
            _cacheDict.Add(typeof({{RefDataQualifiedEntityName}}), new {{Root.RefDataCache}}<{{RefDataQualifiedEntityCollectionName}}, {{RefDataQualifiedEntityName}}>(() => _agent.{{Name}}GetAllAsync().ContinueWith((t) => t.Result.Value, TaskScheduler.Current)));
{{/each}}

            ReferenceDataAgentProviderCtor();
        }

        partial void ReferenceDataAgentProviderCtor(); // Enables the ReferenceDataAgentProvider constructor to be extended.

        #endregion

        #region Collections
{{#each RefDataEntities}}

        /// <summary>
        /// Gets the {{seecomments RefDataQualifiedEntityCollectionName}}.
        /// </summary>
        /// <returns>The {{seecomments RefDataQualifiedEntityCollectionName}}.</returns>
        public override {{RefDataQualifiedEntityCollectionName}} {{Name}} => ({{RefDataQualifiedEntityCollectionName}})this[typeof({{RefDataQualifiedEntityName}})];
{{/each}}

        #endregion

        #region This/GetCache/PrefetchAsync
    
        /// <summary>
        /// Gets the <see cref="IReferenceDataCollection"/> for the associated <see cref="ReferenceDataBase"/> <see cref="Type"/>.
        /// </summary>
        /// <param name="type">The <see cref="ReferenceDataBase"/> <see cref="Type"/>.</param>
        /// <returns>The <see cref="IReferenceDataCollection"/>.</returns>
        public override IReferenceDataCollection this[Type type] => GetCache(type).GetCollection();

        /// <summary>
        /// Gets the <see cref="IReferenceDataCache"/> for the associated <see cref="ReferenceDataBase"/> <see cref="Type"/>.
        /// </summary>
        /// <param name="type">The <see cref="ReferenceDataBase"/> <see cref="Type"/>.</param>
        /// <returns>The <see cref="IReferenceDataCache"/>.</returns>
        public IReferenceDataCache GetCache(Type type)
        {
            if (type == null)
                throw new ArgumentNullException(nameof(type));
        
            if (!_cacheDict.ContainsKey(type))
                throw new ArgumentException($"Type {type.Name} does not exist within the ReferenceDataProvider cache.");

            return (IReferenceDataCache)_cacheDict[type];
        }
        
        /// <summary>
        /// Prefetches all of the named <see cref="ReferenceDataBase"/> objects where not already cached or have expired.
        /// </summary>
        /// <param name="names">The list of <see cref="ReferenceDataBase"/> type names.</param>
        public override async Task PrefetchAsync(params string[] names)
        {
            if (names == null || names.Length == 0)
                return;

            var getNames = new List<string>();
            foreach (string name in names.Distinct())
            {
                if (_nameDict.ContainsKey(name) && GetCache(_nameDict[name]).IsExpired)
                    getNames.Add(name);
            }

            if (getNames.Count == 0)
                return;
                        
            var result = await _agent.GetNamedAsync(getNames.ToArray()).ConfigureAwait(false);
            foreach (var rdj in JObject.Parse("{ \"content\": " + result.Content ?? "[ ]" + " }")["content"]!.Children())
            {
                var name = rdj["name"]?.Value<string>();
                var items = rdj["items"]?.ToString();
                if (name != null)
                {
                    switch (name)
                    {
{{#each RefDataEntities}}
                        case nameof({{Name}}): GetCache(_nameDict[nameof({{Name}})]).SetCollection(JsonConvert.DeserializeObject<{{RefDataQualifiedEntityName}}[]>(items!)); break;
{{/each}}
                    }
                 }
            }
        }
        
        #endregion
    }
}

#pragma warning restore
#nullable restore
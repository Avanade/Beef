<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef -->
<Template OutputGenDirName="Generated" OutputFileName="ReferenceDataProvider.cs">
  <![CDATA[/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Beef.RefData;
using {{Config.Company}}.{{Config.AppName}}.Business.DataSvc;
using {{Config.Company}}.{{Config.AppName}}.Common.Entities;
]]>
  <If Condition="Config.RefDataNamespace != null">
    <![CDATA[using RefDataNamespace = {{Config.RefDataNamespace}};
]]>
  </If>
  <If Condition="Config.RefDataBusNamespace != null">
    <![CDATA[using RefDataBusNamespace = {{Config.RefDataBusNamespace}};
]]>
  </If>
  <![CDATA[
namespace {{Config.Company}}.{{Config.AppName}}.Business
{
    /// <summary>
    /// Provides the <see cref="ReferenceData"/> implementation using the corresponding data services.
    /// </summary>
    public class ReferenceDataProvider : ]]>
  <If Condition="Config.RefDataNamespace != null">
    <![CDATA[RefDataNamespace.]]>
  </If>
  <If Condition="Config.RefDataBusNamespace != null and Config.RefDataNamespace == null">
    <![CDATA[RefDataBusNamespace.]]>
  </If>
  <![CDATA[ReferenceData
    {
        #region Collections

]]>
  <Entity Condition="Entity.RefDataType != null and Entity.Abstract == false and Entity.ExcludeManager == false and Entity.ExcludeAll == false">
    <Set Name="Entity.EntityName" Condition="Config.RefDataNamespace == null" Value="${{Entity.Name}}" Otherwise="$RefDataNamespace.{{Entity.Name}}" />
    <Set Name="Entity.EntityCollectionName" Condition="Config.RefDataNamespace == null" Value="${{Entity.Name}}Collection" Otherwise="$RefDataNamespace.{{Entity.Name}}Collection" />
    <![CDATA[        /// <summary> 
        /// Gets the {{Entity.EntityCollectionName:ToSeeComments}}.
        /// </summary>
        public override {{Entity.EntityCollectionName}} {{Entity.Name}} => ({{Entity.EntityCollectionName}})this[typeof({{Entity.EntityName}})];

]]>
  </Entity>
  <![CDATA[        #endregion
  
        /// <summary>
        /// Gets the <see cref="IReferenceDataCollection"/> for the associated <see cref="ReferenceDataBase"/> <see cref="Type"/>.
        /// </summary>
        /// <param name="type">The <see cref="ReferenceDataBase"/> <see cref="Type"/>.</param>
        /// <returns>A <see cref="IReferenceDataCollection"/>.</returns>
        public override IReferenceDataCollection this[Type type] => ReferenceDataDataSvc.GetCollection(type);
        
        /// <summary>
        /// Prefetches all, or the list of <see cref="ReferenceDataBase"/> objects, where not already cached or expired.
        /// </summary>
        /// <param name="names">The list of <see cref="ReferenceDataBase"/> names; otherwise, <c>null</c> for all.</param>
        public override Task PrefetchAsync(params string[] names)
        {
            var types = new List<Type>();
            if (names == null)
            {
                types.AddRange(GetAllTypes());
            }
            else
            {
                foreach (string name in names.Distinct())
                {
                    switch (name)
                    {
]]>
                    <Entity Condition="Entity.RefDataType != null and Entity.Abstract == false and Entity.ExcludeManager == false">
                      <![CDATA[                        case var n when string.Compare(n, nameof({{Entity.EntityName}}), StringComparison.InvariantCultureIgnoreCase) == 0: types.Add(typeof({{Entity.EntityName}})); break;
]]>
                    </Entity>
  <![CDATA[                    }
                }
            }

            ExecutionContext.FlowSuppression(ecf =>
            {
                Parallel.ForEach(types, (type, _) => { ecf.SetExecutionContext(); var x = this[type]; });
            });

            return Task.CompletedTask;
        }
    }
}

#nullable restore]]>
</Template>
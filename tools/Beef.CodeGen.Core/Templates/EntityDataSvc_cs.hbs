{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005, IDE0044 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
{{#if DataSvcCaching}}
using Beef.Caching;
{{/if}}
using Beef.Entities;
{{#if SupportsEvents}}
using Beef.Events;
{{/if}}
{{#if RequiresData}}
using {{Root.Company}}.{{Root.AppName}}.Business.Data;
{{/if}}
{{#ifeq Root.EntityUsing 'Common' 'All'}}
using {{Root.Company}}.{{Root.AppName}}.Common.Entities;
{{/ifeq}}
{{#ifeq Root.EntityUsing 'Business' 'All'}}
using {{Root.Company}}.{{Root.AppName}}.Business.Entities;
{{/ifeq}}
{{#ifval Root.RefDataNamespace}}
using RefDataNamespace = {{Root.RefDataNamespace}};
{{/ifval}}
{{#ifval Root.RefDataBusNamespace}}
using RefDataNamespace = {{Root.RefDataBusNamespace}};
{{/ifval}}

namespace {{Root.Company}}.{{Root.AppName}}.Business.DataSvc
{
    /// <summary>
    /// Provides the {{{EntityNameSeeComments}}} data repository services.
    /// </summary>
    public partial class {{Name}}DataSvc{{#if GenericWithT}}<T>{{/if}} : I{{Name}}DataSvc{{#if GenericWithT}}<T>{{/if}}
    {
{{#each DataSvcConstructorParameters}}
        private readonly {{Type}} {{PrivateName}};
  {{#if @last}}

  {{/if}}
{{/each}}
{{#if DataSvcExtensions}}
        #region Extensions
        #pragma warning disable CS0649 // Defaults to null by design; can be overridden in constructor.

  {{#each DataSvcAutoOperations}}
        private Func<{{#if HasReturnValue}}{{OperationReturnType}}, {{/if}}{{#each ValueLessDataParameters}}{{{ParameterType}}}, {{/each}}Task>? {{PrivateName}}OnAfterAsync;
  {{/each}}

        #pragma warning restore CS0649
        #endregion

{{/if}}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{Name}}DataSvc"/> class.
        /// </summary>
{{#each DataSvcConstructorParameters}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
{{/each}}
        {{lower DataSvcConstructor}} {{Name}}DataSvc({{#each DataSvcConstructorParameters}}{{#unless @first}}, {{/unless}}{{Type}} {{ArgumentName}}{{/each}})
            { {{#each DataSvcConstructorParameters}}{{PrivateName}} = Check.NotNull({{ArgumentName}}, nameof({{ArgumentName}})); {{/each}}{{Name}}DataSvcCtor(); }

        partial void {{Name}}DataSvcCtor(); // Enables additional functionality to be added to the constructor.
{{#each DataSvcOperations}}

        /// <summary>
        /// {{{SummaryText}}}
        /// </summary>
  {{#each DataParameters}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
  {{/each}}
  {{#if HasReturnValue}}
        /// <returns>{{{ReturnText}}}</returns>
  {{/if}}
        public {{{OperationTaskReturnType}}} {{Name}}Async({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{{ParameterType}}} {{ArgumentName}}{{/each}})
  {{#if DataSvcCustom}}
            => DataSvcInvoker.Current.InvokeAsync(this, () => {{Name}}OnImplementationAsync({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}}){{#if DataSvcTransaction}}, new BusinessInvokerArgs { IncludeTransactionScope = true }{{/if}});
  {{else}}
        {
            return DataSvcInvoker.Current.InvokeAsync(this, async () =>
            {
    {{#if SupportsCaching}}
      {{#ifeq Type 'Get'}}
                var __key = new UniqueKey({{#each ValueLessDataParameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}});
                if (_cache.TryGetValue(__key, out {{OperationReturnType}} __val))
                    return __val;

      {{/ifeq}}
    {{/if}}         
                {{#if HasReturnValue}}var __result = {{/if}}await _data.{{Name}}Async({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{#if IsValueArg}}Check.NotNull(value, nameof(value)){{else}}{{ArgumentName}}{{/if}}{{/each}}).ConfigureAwait(false);
    {{#if EventPublish}}
      {{#ifeq Events.Count 1}}
        {{#each Events}}
                await _evtPub.Publish{{#if ../HasReturnValue}}Value{{/if}}Async({{#if ../HasReturnValue}}__result, {{/if}}$"{{Subject}}", "{{Action}}"{{#each ../ValueLessDataParameters}}, {{ArgumentName}}{{/each}}).ConfigureAwait(false);
        {{/each}}
      {{else}}
        {{#ifeq Events.Count 0}}
        {{else}}
                await _evtPub.PublishAsync(
          {{#each Events}}
                    _evtPub.Create{{#if ../HasReturnValue}}Value{{/if}}Event({{#if ../HasReturnValue}}__result, {{/if}}$"{{Subject}}", "{{Action}}"{{#each ../ValueLessDataParameters}}, {{ArgumentName}}{{/each}}){{#if @last}}).ConfigureAwait(false);{{else}},{{/if}}
            {{#if @last}}

            {{/if}}
          {{/each}}
        {{/ifeq}}
      {{/ifeq}}
    {{/if}}
    {{#if SupportsCaching}}
      {{#ifeq Type 'Delete'}}
                _cache.Remove<{{Parent.Name}}>(new UniqueKey({{#each ValueLessDataParameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}}));
      {{else}}
                _cache.SetValue({{#ifeq Type 'Get'}}__key{{else}}__result.UniqueKey{{/ifeq}}, __result);
      {{/ifeq}}
    {{/if}}         
    {{#if Parent.DataSvcExtensions}}
                if ({{PrivateName}}OnAfterAsync != null) await {{PrivateName}}OnAfterAsync({{#if HasReturnValue}}__result{{/if}}{{#each ValueLessDataParameters}}{{#if @first}}{{#if Parent.HasReturnValue}}, {{/if}}{{else}}, {{/if}}{{{ArgumentName}}}{{/each}}).ConfigureAwait(false);
    {{/if}}
      {{#if HasReturnValue}}
                return __result;
      {{/if}}
            }{{#if DataSvcTransaction}}, new BusinessInvokerArgs { IncludeTransactionScope = true }{{/if}});
        }
  {{/if}}
{{/each}}
    }
}

#pragma warning restore IDE0005, IDE0044
#nullable restore
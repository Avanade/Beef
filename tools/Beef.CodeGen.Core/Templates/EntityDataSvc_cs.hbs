{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

{{#if Root.PreprocessorDirectives}}
#nullable enable
#pragma warning disable

{{/if}}
namespace {{Root.NamespaceBusiness}}.DataSvc;

/// <summary>
/// Provides the {{{EntityNameSeeComments}}} data repository services.
/// </summary>
public partial class {{Name}}DataSvc{{#if GenericWithT}}<T>{{/if}} : I{{Name}}DataSvc{{#if GenericWithT}}<T>{{/if}}
{
{{#each DataSvcCtorParameters}}
    private readonly {{Type}} {{PrivateName}};
  {{#if @last}}

  {{/if}}
{{/each}}
{{#if HasDataSvcExtensions}}
    #region Extensions

  {{#each DataSvcAutoOperations}}
    {{#if DataSvcExtensions}}
    private Func<{{#if HasReturnValue}}{{OperationReturnType}}, {{/if}}{{#each ValueLessDataParameters}}{{{ParameterType}}}, {{/each}}{{#if Root.CancellationToken}}CancellationToken, {{/if}}Task{{#if WithResult}}<Result>{{/if}}>? {{PrivateName}}OnAfterAsync;
    {{/if}}
  {{/each}}

    #endregion

{{/if}}
{{#unless DataSvcCtorCustom}}
  {{#ifne DataSvcCtorParameters.Count 0}}
    /// <summary>
    /// Initializes a new instance of the <see cref="{{Name}}DataSvc"/> class.
    /// </summary>
{{#each DataSvcCtorParameters}}
    /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
{{/each}}
    {{lower DataSvcCtor}} {{Name}}DataSvc({{#each DataSvcCtorParameters}}{{#unless @first}}, {{/unless}}{{Type}} {{ArgumentName}}{{/each}})
{{#ifle DataSvcCtorParameters.Count 5}}
        { {{#each DataSvcCtorParameters}}{{PrivateName}} = {{ArgumentName}}.ThrowIfNull(); {{/each}}{{Name}}DataSvcCtor(); }
{{else}}
    {
  {{#each DataSvcCtorParameters}}
        {{PrivateName}} = {{ArgumentName}}.ThrowIfNull();
  {{/each}}
        {{Name}}DataSvcCtor();
    }
{{/ifle}}

    partial void {{Name}}DataSvcCtor(); // Enables additional functionality to be added to the constructor.

  {{/ifne}}
{{/unless}}
{{#each DataSvcOperations}}
  {{#unless @first}}

  {{/unless}}
  {{#if ExcludeIDataSvc}}
    /// <summary>
    /// {{{SummaryText}}}
    /// </summary>
    {{#each DataParameters}}
    /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
    {{/each}}
    {{#if Root.CancellationToken}}
    /// <param name="cancellationToken">The <see cref="CancellationToken"/>.</param>
    {{/if}}
    {{#if HasReturnValue}}
    /// <returns>{{{ReturnText}}}</returns>
    {{/if}}
  {{else}}
    /// <inheritdoc/>
  {{/if}}
    {{set-value 'HasResultCode' false}}public {{#unless DataSvcInvoker}}{{#ifeq DataSvcCustom 'None' 'Partial'}}{{#unless DataSvcSingleLine}}{{#unless WithResult}}async {{/unless}}{{/unless}}{{/ifeq}}{{/unless}}{{{OperationTaskReturnType}}} {{Name}}Async({{#each DataParameters}}{{{ParameterType}}} {{ArgumentName}}{{#unless @last}}, {{/unless}}{{/each}}{{#if Root.CancellationToken}}, CancellationToken cancellationToken = default{{/if}}){{#ifeq DataSvcCustom 'Full'}}{{#if DataSvcInvoker}} => DataSvcInvoker.Current.InvokeAsync(this, {{#if Root.CancellationToken}}(_, cancellationToken) => {{/if}}{{else}}{{#if DataSvcInvoker}}(_, __){{/if}}{{/if}}{{#if DataSvcInvoker}}(_, __){{/if}} => {{Name}}OnImplementationAsync({{#each DataParameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}}{{#if Root.CancellationToken}}{{#ifne DataParameters.Count 0}}, {{/ifne}}cancellationToken{{/if}}){{#if DataSvcTransaction}}, new InvokerArgs { IncludeTransactionScope = true{{#ifeq EventPublish 'DataSvc'}}, EventPublisher = _events{{/ifeq}} }{{else}}{{#ifeq EventPublish 'DataSvc'}}, new InvokerArgs { EventPublisher = _events }{{/ifeq}}{{/if}}{{#if Root.CancellationToken}}, cancellationToken{{/if}}{{#if DataSvcInvoker}}){{/if}};{{else}}{{#if DataSvcInvoker}} => DataSvcInvoker.Current.InvokeAsync(this, {{#unless DataSvcSingleLine}}{{#unless WithResult}}async {{/unless}}{{/unless}}{{#if Root.CancellationToken}}(_, cancellationToken) =>{{else}}(_, __) =>{{/if}}{{/if}}{{/ifeq}}{{#if DataSvcSingleLine}}{{#unless DataSvcInvoker}}{{#ifeq DataSvcCustom 'None' 'Partial'}} =>{{/ifeq}}{{/unless}} {{#ifeq Type 'Get'}}{{#if SupportsCaching}}{{#if WithResult}}Result.Go().CacheGetOrAddAsync(_cache, {{else}}_cache.GetOrAddAsync({{/if}}{{#ifne ValueLessParameters.Count 1}}new CompositeKey({{/ifne}}{{#each ValueLessDataParameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}}{{#ifne ValueLessParameters.Count 1}}){{/ifne}}, () => {{/if}}{{/ifeq}}{{#ifeq DataSvcCustom 'None' 'Partial'}}{{#ifeq DataSvcCustom 'None'}}_data.{{Name}}{{else}}{{Name}}OnImplementation{{/ifeq}}Async({{#each DataParameters}}{{ArgumentName}}{{#unless @last}}, {{/unless}}{{/each}}{{#if Root.CancellationToken}}, cancellationToken{{/if}}){{#ifeq Type 'Get'}}{{#if SupportsCaching}}){{/if}}{{/ifeq}}{{#if DataSvcInvoker}}){{/if}};{{/ifeq}}{{/if}}
  {{#ifeq DataSvcCustom 'None' 'Partial'}}
  {{#unless DataSvcSingleLine}}
    {
    {{#if WithResult}}
      {{#if SupportsCaching}}
        {{#ifeq Type 'Get'}}
        {{set-value 'HasResultCode' true}}return Result.Go().CacheGetOrAddAsync(_cache, {{#ifne ValueLessParameters.Count 1}}new CompositeKey({{/ifne}}{{#each ValueLessDataParameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}}{{#ifne ValueLessParameters.Count 1}}){{/ifne}}, () => {{#ifeq DataSvcCustom 'None'}}_data.{{Name}}{{else}}{{Name}}OnImplementation{{/ifeq}}Async({{#each DataParameters}}{{ArgumentName}}{{#unless @last}}, {{/unless}}{{/each}}{{#if Root.CancellationToken}}, cancellationToken{{/if}}))
        {{/ifeq}}
        {{#ifeq Type 'Delete'}}
        {{set-value 'HasResultCode' true}}return Result.Go().CacheRemove<{{Parent.Name}}>(_cache, {{#ifne ValueLessParameters.Count 1}}new CompositeKey({{/ifne}}{{#each ValueLessDataParameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}}{{#ifne ValueLessParameters.Count 1}}){{/ifne}})
        {{/ifeq}}
      {{/if}}
      {{#unless IsGetWithCache}}
        {{#if HasResultCode}}             .Then{{#ifne Type 'Delete'}}As{{/ifne}}Async({{#ifeq Type 'Delete'}}(){{else}}_{{/ifeq}} => {{else}}return Result.GoAsync({{/if}}{{#ifeq DataSvcCustom 'None'}}_data.{{Name}}{{else}}{{Name}}OnImplementation{{/ifeq}}Async({{#each DataParameters}}{{ArgumentName}}{{#unless @last}}, {{/unless}}{{/each}}{{#if Root.CancellationToken}}, cancellationToken{{/if}})){{#unless DataSvcExtensions}}{{#unless DataSvcWillEventPublish}}{{#if SupportsCaching}}{{#ifeq Type 'Delete'}};{{/ifeq}}{{else}};{{/if}}{{/unless}}{{/unless}}
      {{/unless}}
      {{#if DataSvcExtensions}}
                     .ThenAsync({{#if HasReturnValue}}r{{else}}(){{/if}} => {{PrivateName}}OnAfterAsync?.Invoke({{#if HasReturnValue}}r{{/if}}{{#each ValueLessDataParameters}}{{#if @first}}{{#if Parent.HasReturnValue}}, {{/if}}{{else}}, {{/if}}{{{ArgumentName}}}{{/each}}{{#if Root.CancellationToken}}{{#ifne ValueLessDataParamaters 0}}, {{else}}{{#if HasReturnValue}}, {{/if}}{{/ifne}}cancellationToken{{/if}}) ?? Result.SuccessTask){{#unless DataSvcWillEventPublish}}{{#if SupportsCaching}}{{#ifeq Type 'Delete' 'Get'}};{{/ifeq}}{{else}};{{/if}}{{/unless}}
      {{/if}}
    {{else}}
      {{#if SupportsCaching}}
        {{#ifeq Type 'Get'}}
        if (_cache.TryGetValue({{#ifne ValueLessParameters.Count 1}}new CompositeKey({{/ifne}}{{#each ValueLessDataParameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}}{{#ifne ValueLessParameters.Count 1}}){{/ifne}}, out {{OperationReturnType}} __val))
            return __val;

        {{/ifeq}}
        {{#ifeq Type 'Delete'}}
        _cache.Remove<{{Parent.Name}}>({{#ifne ValueLessParameters.Count 1}}new CompositeKey({{/ifne}}{{#each ValueLessDataParameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}}{{#ifne ValueLessParameters.Count 1}}){{/ifne}});
        {{/ifeq}}
      {{/if}}
        {{#if HasReturnValue}}var r = {{/if}}await {{#ifeq DataSvcCustom 'None'}}_data.{{Name}}{{else}}{{Name}}OnImplementation{{/ifeq}}Async({{#each DataParameters}}{{ArgumentName}}{{#unless @last}}, {{/unless}}{{/each}}{{#if Root.CancellationToken}}, cancellationToken{{/if}}).ConfigureAwait(false);
      {{#if DataSvcExtensions}}
        await Invoker.InvokeAsync({{PrivateName}}OnAfterAsync?.Invoke({{#if HasReturnValue}}r{{/if}}{{#each ValueLessDataParameters}}{{#if @first}}{{#if Parent.HasReturnValue}}, {{/if}}{{else}}, {{/if}}{{{ArgumentName}}}{{/each}}{{#if Root.CancellationToken}}{{#ifne ValueLessDataParamaters 0}}, {{else}}{{#if HasReturnValue}}, {{/if}}{{/ifne}}cancellationToken{{/if}})).ConfigureAwait(false);
      {{/if}}
    {{/if}}
    {{#ifeq EventPublish 'DataSvc'}}
      {{#ifeq Events.Count 1}}
        {{#each Events}}
        {{#if Parent.WithResult}}             .Then({{#if Parent.HasReturnValue}}r{{else}}(){{/if}} => {{/if}}_events.Publish{{#ifval Value}}Value{{/ifval}}Event({{#ifval Value}}{{Value}}, {{/ifval}}{{#ifval Source}}new Uri($"{{Source}}", UriKind.{{../../Root.EventSourceKind}}), {{/ifval}}$"{{Subject}}", "{{Action}}"){{#if Parent.WithResult}}){{#if Parent.SupportsCaching}}{{#ifeq Parent.Type 'Delete'}};{{/ifeq}}{{else}};{{/if}}{{else}};{{/if}}
        {{/each}}
      {{else}}
        {{#ifeq Events.Count 0}}
        {{else}}
        {{#if WithResult}}             .Then({{#if HasReturnValue}}r{{else}}(){{/if}} => {{/if}}_events.Publish(
          {{#each Events}}
            {{#if Parent.WithResult}}             {{/if}}_events.Create{{#ifval Value}}Value{{/ifval}}Event({{#ifval Value}}{{Value}}, {{/ifval}}{{#ifval Source}}new Uri($"{{Source}}", UriKind.{{../../Root.EventSourceKind}}), {{/ifval}}$"{{Subject}}", "{{Action}}"){{#if @last}}){{#if Parent.WithResult}}){{#if Parent.SupportsCaching}}{{#ifeq Parent.Type 'Delete'}};{{/ifeq}}{{else}};{{/if}}{{else}};{{/if}}{{else}},{{/if}}
            {{#if @last}}
              {{#unless Parent.WithResult}}

              {{/unless}}   
            {{/if}}
          {{/each}}
        {{/ifeq}}
      {{/ifeq}}
    {{/ifeq}}
    {{#if WithResult}}
      {{#if SupportsCaching}}
        {{#ifne Type 'Delete' 'Get'}}
                     .CacheSet(_cache);
        {{/ifne}}
      {{/if}}
    {{else}}
      {{#if SupportsCaching}}
        {{#ifne Type 'Delete'}}
        return _cache.SetValue(r);
        {{/ifne}}
      {{else}}   
        {{#if HasReturnValue}}
        return r;
        {{/if}}
      {{/if}}
    {{/if}}
    }{{#if DataSvcInvoker}}{{#if DataSvcTransaction}}, new InvokerArgs { IncludeTransactionScope = true{{#ifeq EventPublish 'DataSvc'}}, EventPublisher = _events{{/ifeq}} }{{else}}{{#ifeq EventPublish 'DataSvc'}}, new InvokerArgs { EventPublisher = _events }{{/ifeq}}{{/if}}{{#if Root.CancellationToken}}, cancellationToken{{/if}});{{/if}}
  {{/unless}}
  {{/ifeq}}
{{/each}}
}{{#if Root.PreprocessorDirectives}}

#pragma warning restore
#nullable restore{{/if}}
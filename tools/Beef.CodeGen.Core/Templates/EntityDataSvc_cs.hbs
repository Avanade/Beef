{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using CoreEx;
using CoreEx.Business;
{{#if DataSvcCaching}}
using CoreEx.Caching;
{{/if}}
using CoreEx.Entities;
{{#if SupportsDataSvcEvents}}
using CoreEx.Events;
{{/if}}
{{#if RequiresData}}
{{#if DataSvcNeedsUsingData}}
using {{Root.NamespaceBusiness}}.Data;
{{/if}}
{{/if}}
{{#ifeq EntityUsing 'Common' 'All'}}
using {{Root.NamespaceCommon}}.Entities;
{{/ifeq}}
{{#ifeq EntityUsing 'Business' 'All'}}
using {{Root.NamespaceBusiness}}.Entities;
{{/ifeq}}
{{#ifval Root.RefDataNamespace}}
using RefDataNamespace = {{Root.RefDataNamespace}};
{{/ifval}}
{{#ifval Root.RefDataBusNamespace}}
using RefDataNamespace = {{Root.RefDataBusNamespace}};
{{/ifval}}

namespace {{Root.NamespaceBusiness}}.DataSvc
{
    /// <summary>
    /// Provides the {{{EntityNameSeeComments}}} data repository services.
    /// </summary>
    public partial class {{Name}}DataSvc{{#if GenericWithT}}<T>{{/if}} : I{{Name}}DataSvc{{#if GenericWithT}}<T>{{/if}}
    {
{{#each DataSvcCtorParameters}}
        private readonly {{Type}} {{PrivateName}};
  {{#if @last}}

  {{/if}}
{{/each}}
{{#if HasDataSvcExtensions}}
        #region Extensions

  {{#each DataSvcAutoOperations}}
    {{#if DataSvcExtensions}}
        private Func<{{#if HasReturnValue}}{{OperationReturnType}}, {{/if}}{{#each ValueLessDataParameters}}{{{ParameterType}}}, {{/each}}CancellationToken, Task>? {{PrivateName}}OnAfterAsync;
    {{/if}}
  {{/each}}

        #endregion

{{/if}}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{Name}}DataSvc"/> class.
        /// </summary>
{{#each DataSvcCtorParameters}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
{{/each}}
        {{lower DataSvcCtor}} {{Name}}DataSvc({{#each DataSvcCtorParameters}}{{#unless @first}}, {{/unless}}{{Type}} {{ArgumentName}}{{/each}})
{{#ifle DataSvcCtorParameters.Count 3}}
            { {{#each DataSvcCtorParameters}}{{PrivateName}} = {{ArgumentName}} ?? throw new ArgumentNullException(nameof({{ArgumentName}})); {{/each}}{{Name}}DataSvcCtor(); }
{{else}}
        {
  {{#each DataSvcCtorParameters}}
            {{PrivateName}} = {{ArgumentName}} ?? throw new ArgumentNullException(nameof({{ArgumentName}}));
  {{/each}}
            {{Name}}DataSvcCtor();
        }
{{/ifle}}

        partial void {{Name}}DataSvcCtor(); // Enables additional functionality to be added to the constructor.
{{#each DataSvcOperations}}

        /// <summary>
        /// {{{SummaryText}}}
        /// </summary>
  {{#each DataParameters}}
        /// <param name="{{ArgumentName}}">{{{SummaryText}}}</param>
  {{/each}}
        /// <param name="cancellationToken">The <see cref="CancellationToken"/>.</param>
  {{#if HasReturnValue}}
        /// <returns>{{{ReturnText}}}</returns>
  {{/if}}
        public {{{OperationTaskReturnType}}} {{Name}}Async({{#each DataParameters}}{{{ParameterType}}} {{ArgumentName}}, {{/each}}CancellationToken cancellationToken = default) => {{#if DataSvcCustom}}DataSvcInvoker.Current.InvokeAsync(this, ct => {{Name}}OnImplementationAsync({{#each DataParameters}}{{ArgumentName}}, {{/each}}ct){{#if DataSvcTransaction}}, new BusinessInvokerArgs { IncludeTransactionScope = true{{#ifeq EventPublish 'DataSvc'}}, EventPublisher = _evtPub{{/ifeq}} }{{else}}{{#ifeq EventPublish 'DataSvc'}}, new BusinessInvokerArgs { EventPublisher = _evtPub }{{/ifeq}}{{/if}}, cancellationToken);{{else}}DataSvcInvoker.Current.InvokeAsync(this, async ct =>{{/if}}
  {{#unless DataSvcCustom}}
        {
    {{#if SupportsCaching}}
      {{#ifeq Type 'Get'}}
            if (_cache.TryGetValue(new CompositeKey({{#each ValueLessDataParameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}}), out {{OperationReturnType}} __val))
                return __val;

      {{/ifeq}}
    {{/if}}         
            {{#if HasReturnValue}}var __result = {{/if}}await _data.{{Name}}Async({{#each DataParameters}}{{#if IsValueArg}}value ?? throw new ArgumentNullException(nameof(value)), {{else}}{{ArgumentName}}, {{/if}}{{/each}}ct).ConfigureAwait(false);
    {{#if DataSvcExtensions}}
            await ({{PrivateName}}OnAfterAsync?.Invoke({{#if HasReturnValue}}__result{{/if}}{{#each ValueLessDataParameters}}{{#if @first}}{{#if Parent.HasReturnValue}}, {{/if}}{{else}}, {{/if}}{{{ArgumentName}}}{{/each}}) ?? Task.CompletedTask).ConfigureAwait(false);
    {{/if}}
    {{#ifeq EventPublish 'DataSvc'}}
      {{#ifeq Events.Count 1}}
        {{#each Events}}
            _evtPub.Publish{{#ifval Value}}Value{{/ifval}}({{#ifval Value}}{{Value}}, {{/ifval}}{{#ifval Source}}new Uri($"{{Source}}", UriKind.{{../../Root.EventSourceKind}}), {{/ifval}}$"{{Subject}}", "{{Action}}"{{#each ../ValueLessDataParameters}}, {{ArgumentName}}{{#ifval RefDataType}}.Code{{/ifval}}{{/each}});
        {{/each}}
      {{else}}
        {{#ifeq Events.Count 0}}
        {{else}}
            _evtPub.Publish(
          {{#each Events}}
                _evtPub.Create{{#ifval Value}}Value{{/ifval}}Event({{#ifval Value}}{{Value}}, {{/ifval}}{{#ifval Source}}new Uri($"{{Source}}", UriKind.{{../../Root.EventSourceKind}}), {{/ifval}}$"{{Subject}}", "{{Action}}"{{#each ../ValueLessDataParameters}}, {{ArgumentName}}{{#ifval RefDataType}}.Code{{/ifval}}{{/each}}){{#if @last}});{{else}},{{/if}}
            {{#if @last}}

            {{/if}}
          {{/each}}
        {{/ifeq}}
      {{/ifeq}}
    {{/ifeq}}
    {{#if SupportsCaching}}
      {{#ifeq Type 'Delete'}}
            _cache.Remove<{{Parent.Name}}>(new CompositeKey({{#each ValueLessDataParameters}}{{#unless @first}}, {{/unless}}{{ArgumentName}}{{/each}}));
      {{else}}
            return _cache.SetAndReturnValue(__result);
      {{/ifeq}}
    {{else}}   
      {{#if HasReturnValue}}
            return __result;
      {{/if}}
    {{/if}}
        }{{#if DataSvcTransaction}}, new BusinessInvokerArgs { IncludeTransactionScope = true{{#ifeq EventPublish 'DataSvc'}}, EventPublisher = _evtPub{{/ifeq}} }{{else}}{{#ifeq EventPublish 'DataSvc'}}, new BusinessInvokerArgs { EventPublisher = _evtPub }{{/ifeq}}{{/if}}, cancellationToken);
  {{/unless}}
{{/each}}
    }
}

#pragma warning restore
#nullable restore
// Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef

using System.Text.Json.Serialization;
using OnRamp.Config;
using OnRamp.Utility;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace Beef.CodeGen.Config.Entity
{
    /// <summary>
    /// Represents the <b>Property</b> code-generation configuration.
    /// </summary>
    [CodeGenClass("Property", Title = "'Property' object (entity-driven)",
        Description = "The `Property` object defines an `Entity` property and its charateristics.", 
        ExampleMarkdown = @"A YAML configuration [example](../samples/My.Hr/My.Hr.CodeGen/entity.beef.yaml) is as follows:
``` yaml
properties: [
  { name: Id, type: Guid, text: '{{Employee}} identifier', uniqueKey: true, dataName: EmployeeId, dataAutoGenerated: true },
  { name: FirstName, type: string },
  { name: LastName, type: string },
  { name: Gender, type: RefDataNamespace.Gender, dataName: GenderCode },
  { name: Birthday, type: DateTime, dateTimeTransform: DateOnly },
  { name: ETag, type: string },
  { name: ChangeLog, type: ChangeLog }
]
```")]
    [CodeGenCategory("Key", Title = "Provides the _key_ configuration.")]
    [CodeGenCategory("Property", Title = "Provides additional _Property_ configuration.")]
    [CodeGenCategory("RefData", Title = "Provides the _Reference Data_ configuration.")]
    [CodeGenCategory("Serialization", Title = "Provides the _Serialization_ configuration.")]
    [CodeGenCategory("Manager", Title = "Provides the _Manager-layer_ configuration.")]
    [CodeGenCategory("Data", Title = "Provides the generic _Data-layer_ configuration.")]
    [CodeGenCategory("Database", Title = "Provides the specific _Database (ADO.NET)_ configuration where `Entity.AutoImplement` or `Operation.AutoImplement` is `Database`.")]
    [CodeGenCategory("EntityFramework", Title = "Provides the specific _Entity Framework (EF)_ configuration where `Entity.AutoImplement` or `Operation.AutoImplement` is `EntityFramework`.")]
    [CodeGenCategory("Cosmos", Title = "Provides the specific _Cosmos DB_ configuration where `Entity.AutoImplement` or `Operation.AutoImplement` is `Cosmos`.")]
    [CodeGenCategory("OData", Title = "Provides the specific _OData_ configuration where `Entity.AutoImplement` or `Operation.AutoImplement` is `OData`.")]
    [CodeGenCategory("HttpAgent", Title = "Provides the specific _HTTP Agent_ configuration where `Entity.AutoImplement` or `Operation.AutoImplement` is `HttpAgent`.")]
    [CodeGenCategory("Annotation", Title = "Provides additional property _Annotation_ configuration.")]
    [CodeGenCategory("WebApi", Title = "Provides the data _Web API_ configuration.")]
    [CodeGenCategory("gRPC", Title = "Provides the _gRPC_ configuration.")]
    public class PropertyConfig : ConfigBase<CodeGenConfig, EntityConfig>
    {
        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        /// <remarks><inheritdoc/></remarks>
        public override string? QualifiedKeyName => BuildQualifiedKeyName("Property", Name);

        #region Key

        /// <summary>
        /// Gets or sets the unique property name.
        /// </summary>
        [JsonPropertyName("name")]
        [CodeGenProperty("Key", Title = "The unique property name.", IsMandatory = true, IsImportant = true)]
        public string? Name { get; set; }

        /// <summary>
        /// Gets or sets the overriding text for use in comments.
        /// </summary>
        [JsonPropertyName("text")]
        [CodeGenProperty("Key", Title = "The overriding text for use in comments.",
            Description = "By default the `Text` will be the `Name` reformatted as sentence casing. Depending on whether the `Type` is `bool`, will appear in one of the two generated sentences. Where not `bool` it will be: Gets or sets a value indicating whether {text}.'. " +
            "Otherwise, it will be: Gets or sets the {text}.'. To create a `<see cref=\"XXX\"/>` within use moustache shorthand (e.g. {{Xxx}}).")]
        public string? Text { get; set; }

        /// <summary>
        /// Gets or sets the overriding model text for use in comments.
        /// </summary>
        [JsonPropertyName("modelText")]
        [CodeGenProperty("Key", Title = "The overriding model text for use in comments.",
            Description = "By default the `ModelText` will be the `Name` reformatted as sentence casing. Depending on whether the `Type` is `bool`, will appear in one of the two generated sentences. Where not `bool` it will be: Gets or sets a value indicating whether {text}.'. " +
            "Otherwise, it will be: Gets or sets the {text}.'. To create a `<see cref=\"XXX\"/>` within use moustache shorthand (e.g. {{Xxx}}).")]
        public string? ModelText { get; set; }

        /// <summary>
        /// Gets or sets the .NET <see cref="Type"/>.
        /// </summary>
        [JsonPropertyName("type")]
        [CodeGenProperty("Key", Title = "The .NET `Type`.", IsImportant = true,
            Description = "Defaults to `string`. To reference a Reference Data `Type` always prefix with `RefDataNamespace` (e.g. `RefDataNamespace.Gender`) or shortcut `^` (e.g. `^Gender`). This will ensure that the appropriate Reference Data " +
            "`using` statement is used. _Shortcut:_ Where the `Type` starts with (prefix) `RefDataNamespace.` or `^`, and the correspondong `RefDataType` attribute is not specified it will automatically default the `RefDataType` to `string.`")]
        public string? Type { get; set; }

        /// <summary>
        /// Indicates whether the .NET <see cref="Type"/> should be declared as nullable.
        /// </summary>
        [JsonPropertyName("nullable")]
        [CodeGenProperty("Key", Title = "Indicates whether the .NET `Type` should be declared as nullable; e.g. `string?`. Will be inferred where the `Type` is denoted as nullable; i.e. suffixed by a `?`.", IsImportant = true)]
        public bool? Nullable { get; set; }

        /// <summary>
        /// Indicates whether the property is inherited and therefore should not be output within the generated Entity class.
        /// </summary>
        [JsonPropertyName("inherited")]
        [CodeGenProperty("Key", Title = "Indicates whether the property is inherited and therefore should not be output within the generated Entity class.")]
        public bool? Inherited { get; set; }

        /// <summary>
        /// Gets or sets the overriding private name.
        /// </summary>
        [JsonPropertyName("privateName")]
        [CodeGenProperty("Key", Title = "The overriding private name.",
            Description = "Overrides the `Name` to be used for private fields. By default reformatted from `Name`; e.g. `FirstName` as `_firstName`.")]
        public string? PrivateName { get; set; }

        /// <summary>
        /// Gets or sets the overriding argument name.
        /// </summary>
        [JsonPropertyName("argumentName")]
        [CodeGenProperty("Key", Title = "The overriding argument name.",
            Description = "Overrides the `Name` to be used for argument parameters. By default reformatted from `Name`; e.g. `FirstName` as `firstName`.")]
        public string? ArgumentName { get; set; }

        #endregion

        #region Property

        /// <summary>
        /// Indicates whether the property is considered part of the unique (primary) key.
        /// </summary>
        [JsonPropertyName("uniqueKey")]
        [CodeGenProperty("Property", Title = "Indicates whether the property is considered part of the unique (primary) key.", IsImportant = true,
            Description = "This is also used to simplify the parameter specification for an Entity Operation by inferrence.")]
        public bool? UniqueKey { get; set; }

        /// <summary>
        /// Indicates that the property Type is another generated entity / collection and therefore specific capabilities can be assumed (e.g. CopyFrom and Clone).
        /// </summary>
        [JsonPropertyName("isEntity")]
        [CodeGenProperty("Property", Title = "Indicates that the property `Type` is another generated entity / collection and therefore specific capabilities can be assumed (e.g. `CopyFrom` and `Clone`).", IsImportant = true,
            Description = "Will be inferred (default to `true`) where the `Type` is `ChangeLog` or the `Type` is found as another `Entity` within the code-generation configuration file.")]
        public bool? IsEntity { get; set; }

        /// <summary>
        /// Indicates that the value is immutable and therefore cannot be changed once set.
        /// </summary>
        [JsonPropertyName("immutable")]
        [CodeGenProperty("Property", Title = "Indicates that the value is immutable and therefore cannot be changed once set.")]
        public bool? Immutable { get; set; }

        /// <summary>
        /// Gets or sets the <see cref="DateTime"/> transformation to be performed on <c>Set</c> and <c>CleanUp</c>.
        /// </summary>
        [JsonPropertyName("dateTimeTransform")]
        [CodeGenProperty("Property", Title = "The `DateTime` transformation to be performed on `Set` and `CleanUp`.", Options = new string[] { "UseDefault", "None", "DateOnly", "DateTimeLocal", "DateTimeUtc", "DateTimeUnspecified" },
            Description = "Defaults to `UseDefault`. This is only applied where the `Type` is `DateTime`.")]
        public string? DateTimeTransform { get; set; }

        /// <summary>
        /// Gets or sets the <see cref="string"/> trimming of white space characters to be performed on <c>Set</c> and <c>CleanUp</c>.
        /// </summary>
        [JsonPropertyName("stringTrim")]
        [CodeGenProperty("Property", Title = "The `string` trimming of white space characters to be performed on `Set` and `CleanUp`.", Options = new string[] { "UseDefault", "None", "Start", "End", "Both" },
            Description = "Defaults to `UseDefault`. This is only applied where the `Type` is `string`.")]
        public string? StringTrim { get; set; }

        /// <summary>
        /// Gets or sets the <see cref="string"/> transformation to be performed on <c>Set</c> and <c>CleanUp</c>.
        /// </summary>
        [JsonPropertyName("stringTransform")]
        [CodeGenProperty("Property", Title = "The `string` transformation to be performed on `Set` and `CleanUp`.", Options = new string[] { "UseDefault", "None", "NullToEmpty", "EmptyToNull" },
            Description = "Defaults to `UseDefault`. This is only applied where the `Type` is `string`.")]
        public string? StringTransform { get; set; }

        /// <summary>
        /// Indicates whether an instance of the <see cref="Type"/> is to be automatically created/instantiated when the property is first accessed (i.e. lazy instantiation).
        /// </summary>
        [JsonPropertyName("autoCreate")]
        [CodeGenProperty("Property", Title = "Indicates whether an instance of the `Type` is to be automatically created/instantiated when the property is first accessed (i.e. lazy instantiation).")]
        public bool? AutoCreate { get; set; }

        /// <summary>
        /// Gets or sets the C# code to default the value.
        /// </summary>
        [JsonPropertyName("default")]
        [CodeGenProperty("Property", Title = "The C# code to default the value.",
            Description = "Where the `Type` is `string` then the specified default value will need to be delimited. Any valid value assignment C# code can be used.")]
        public string? Default { get; set; }

        /// <summary>
        /// Indicates whether the property is considered part of the Partition Key.
        /// </summary>
        [JsonPropertyName("partitionKey")]
        [CodeGenProperty("Property", Title = "Indicates whether the property is considered part of the Partition Key.",
            Description = "This will implement `IPartitionKey` for the generated entity.")]
        public bool? PartitionKey { get; set; }

        /// <summary>
        /// Gets or sets the names of the secondary property(s), comma delimited, that are to be notified on a property change.
        /// </summary>
        [JsonPropertyName("secondaryPropertyChanged")]
        [CodeGenProperty("Property", Title = "The names of the secondary property(s), comma delimited, that are to be notified on a property change.")]
        public string? SecondaryPropertyChanged { get; set; }

        /// <summary>
        /// Indicates whether the value should bubble up property changes versus only recording within the sub-entity itself.
        /// </summary>
        [JsonPropertyName("bubblePropertyChanges")]
        [CodeGenProperty("Property", Title = "Indicates whether the value should bubble up property changes versus only recording within the sub-entity itself.",
            Description = "Note that the `IsEntity` property is also required to enable.")]
        public bool? BubblePropertyChanged { get; set; }

        /// <summary>
        /// Indicates that CleanUp is not to be performed for the property within the Entity.CleanUp method.
        /// </summary>
        [JsonPropertyName("excludeCleanup")]
        [CodeGenProperty("Property", Title = "Indicates that `CleanUp` is not to be performed for the property within the `Entity.CleanUp` method.")]
        public bool? ExcludeCleanup { get; set; }

        /// <summary>
        /// Indicates whether the property is for internal use only; declared in the Business entities only.
        /// </summary>
        [JsonPropertyName("internalOnly")]
        [CodeGenProperty("Property", Title = "Indicates whether the property is for internal use only; declared in Business entities only.",
            Description = "This is only applicable where the `Entity.EntityScope` is `Autonomous`. In this instance the `Property` will be excluded from the `Common` entity declaration.")]
        public bool? InternalOnly { get; set; }

        #endregion

        #region RefData

        /// <summary>
        /// Gets or sets the underlying Reference Data Type that is also used as the Reference Data serialization identifier (SID).
        /// </summary>
        [JsonPropertyName("refDataType")]
        [CodeGenProperty("RefData", Title = "The underlying Reference Data Type that is also used as the Reference Data serialization identifier (SID).", Options = new string[] { "string", "int", "Guid" },
            Description = "Defaults to `string` (being the `ReferenceDataBase.Code`) where not specified and the corresponding `Type` starts with (prefix) `RefDataNamespace.` or `^`. Note: an `Id` of type `string` is currently not supported; the use of the `Code` is the recommended approach.")]
        public string? RefDataType { get; set; }

        /// <summary>
        /// Indicates that the Reference Data property is to be a serializable list (ReferenceDataSidList). 
        /// </summary>
        [JsonPropertyName("refDataList")]
        [CodeGenProperty("RefData", Title = "Indicates that the Reference Data property is to be a serializable list (`ReferenceDataSidList`).",
            Description = "This is required to enable a list of Reference Data values (as per `RefDataType`) to be passed as an argument for example.")]
        public bool? RefDataList { get; set; }

        /// <summary>
        /// Indicates whether a corresponding <i>text</i> property is added when generating a Reference Data property overriding the <c>CodeGeneration.RefDataText</c> selection.
        /// </summary>
        [JsonPropertyName("refDataText")]
        [CodeGenProperty("RefData", Title = "Indicates whether a corresponding `Text` property is added when generating a Reference Data property, overriding the `Entity.RefDataText` selection.",
            Description = "This is used where serializing within the Web API `Controller` and the `ExecutionContext.IsRefDataTextSerializationEnabled` is set to `true` (which is automatically set where the url contains `$text=true`).")]
        public bool? RefDataText { get; set; }

        /// <summary>
        /// Indicates whether the property should use the underlying Reference Data mapping capabilities. 
        /// </summary>
        [JsonPropertyName("refDataMapping")]
        [CodeGenProperty("RefData", Title = "Indicates whether the property should use the underlying Reference Data mapping capabilities.",
            Description = "Mapped properties are a special Reference Data property type that ensure value uniqueness; this allows the likes of additional to/from mappings to occur between systems where applicable.")]
        public bool? RefDataMapping { get; set; }

        #endregion

        #region Serialization

        /// <summary>
        /// Gets or sets the JSON property name.
        /// </summary>
        [JsonPropertyName("jsonName")]
        [CodeGenProperty("Serialization", Title = "The JSON property name.",
            Description = "Defaults to `ArgumentName` where not specified (i.e. camelCase); however, where the property is `ETag` it will default to the `Config.ETagJsonName`.")]
        public string? JsonName { get; set; }

        /// <summary>
        /// Gets or sets the JSON property name for the corresponding data model.
        /// </summary>
        [JsonPropertyName("jsonDataModelName")]
        [CodeGenProperty("Serialization", Title = "The JSON property name for the corresponding data model (see `Entity.DataModel`).",
            Description = "Defaults to `JsonName` where not specified.")]
        public string? JsonDataModelName { get; set; }

        /// <summary>
        /// Indicates whether the property is not to be serialized.
        /// </summary>
        [JsonPropertyName("serializationIgnore")]
        [CodeGenProperty("Serialization", Title = "Indicates whether the property is not to be serialized.",
            Description = "All properties are serialized by default.")]
        public bool? SerializationIgnore { get; set; }

        /// <summary>
        /// Indicates whether to emit the default value when serializing.
        /// </summary>
        [JsonPropertyName("serializationEmitDefault")]
        [CodeGenProperty("Serialization", Title = "Indicates whether to emit the default value when serializing.")]
        public bool? SerializationEmitDefault { get; set; }

        /// <summary>
        /// Gets or sets the override JSON property name where outputting as a data model.
        /// </summary>
        [JsonPropertyName("dataModelJsonName")]
        [CodeGenProperty("Serialization", Title = "The override JSON property name where outputting as a data model.",
            Description = "Defaults to `JsonName` where not specified.")]
        public string? DataModelJsonName { get; set; }

        #endregion

        #region Manager

        /// <summary>
        /// Gets or sets the Identifier Generator Type to generate the identifier on create via Dependency Injection (<see cref="Entities.IIdentifierGenerator"/>).
        /// </summary>
        [JsonPropertyName("identifierGenerator")]
        [CodeGenProperty("Manager", Title = "The Identifier Generator Type to generate the identifier on create via Dependency Injection.",
            Description = "Should be formatted as `Type` + `^` + `Name`; e.g. `IGuidIdentifierGenerator^GuidIdGen`. Where the `Name` portion is not specified it will be inferred. " +
                "Where the `Type` matches an already inferred value it will be ignored. " +
                "See `Beef.Entities.IInt32IdentifierGenerator`, `Beef.Entities.IInt64IdentifierGenerator`, `Beef.Entities.IGuidIdentifierGenerator` or `Beef.Entities.IStringIdentifierGenerator` for underlying implementation requirements.")]
        public string? IdentifierGenerator { get; set; }

        #endregion

        #region Data
    
        /// <summary>
        /// Gets or sets the data name where `Entity.AutoImplement` is selected.
        /// </summary>
        [JsonPropertyName("dataName")]
        [CodeGenProperty("Data", Title = "The data name where Entity.AutoImplement is selected.", IsImportant = true,
            Description = "Defaults to the property `Name`. Represents the column name for a `Database`, or the correspinding property name for the other options.")]
        public string? DataName { get; set; }

        /// <summary>
        /// Gets or sets the data `Converter` class name where `Entity.AutoImplement` is selected.
        /// </summary>
        [JsonPropertyName("dataConverter")]
        [CodeGenProperty("Data", Title = "The data `Converter` class name where `Entity.AutoImplement` is selected.", IsImportant = true,
            Description = "A `Converter` is used to convert a data source value to/from a .NET `Type` where no standard data conversion can be applied. Where this value is suffixed by `<T>` or `{T}` this will automatically set `DataConverterIsGeneric` to `true`.")]
        public string? DataConverter { get; set; }

        /// <summary>
        /// Indicates whether the data `Converter` is a generic class and will automatically use the corresponding property `Type` as the generic `T`.
        /// </summary>
        [JsonPropertyName("dataConverterIsGeneric")]
        [CodeGenProperty("Data", Title = "Indicates whether the data `Converter` is a generic class and will automatically use the corresponding property `Type` as the generic `T`.")]
        public bool? DataConverterIsGeneric { get; set; }

        /// <summary>
        /// Indicates whether the property should be ignored (excluded) from the Data / DataMapper generated output. 
        /// </summary>
        [JsonPropertyName("dataMapperIgnore")]
        [CodeGenProperty("Data", Title = "Indicates whether the property should be ignored (excluded) from the `Data`-layer / data `Mapper` generated output.",
            Description = "All properties are included by default.")]
        public bool? DataMapperIgnore { get; set; }

        /// <summary>
        /// Indicates whether the `UniqueKey` property value is automatically generated by the data source on `Create`.
        /// </summary>
        [JsonPropertyName("dataAutoGenerated")]
        [CodeGenProperty("Data", Title = "Indicates whether the `UniqueKey` property value is automatically generated by the data source on `Create`.")]
        public bool? DataAutoGenerated { get; set; }

        /// <summary>
        /// Gets or sets the operations types (`ExecutionContext.OperationType`) selection to enable inclusion and exclusion of property mapping.
        /// </summary>
        [JsonPropertyName("dataOperationTypes")]
        [CodeGenProperty("Data", Title = "The operations types (`ExecutionContext.OperationType`) selection to enable inclusion and exclusion of property mapping.",
            Options = new string[] { "Any", "AnyExceptCreate", "AnyExceptUpdate", "AnyExceptGet", "Get", "Create", "Update", "Delete" },
            Description = "Defaults to `Any`.")]
        public string? DataOperationTypes { get; set; }

        #endregion

        #region Database

        /// <summary>
        /// Gets or sets the database property `Mapper` class name where `Entity.AutoImplement` is selected.
        /// </summary>
        [JsonPropertyName("databaseMapper")]
        [CodeGenProperty("Database", Title = "The database property `Mapper` class name where `Entity.AutoImplement` is selected.",
            Description = "A `Mapper` is used to map a data source value to/from a .NET complex `Type` (i.e. class with one or more properties).")]
        public string? DatabaseMapper { get; set; }

        /// <summary>
        /// Indicates whether the property should be ignored (excluded) from the database `Mapper` generated output.
        /// </summary>
        [JsonPropertyName("databaseIgnore")]
        [CodeGenProperty("Database", Title = "Indicates whether the property should be ignored (excluded) from the database `Mapper` generated output.")]
        public bool? DatabaseIgnore { get; set; }

        /// <summary>
        /// Gets or sets the database DbType override (versus inferring from the corresponding .NET Type).
        /// </summary>
        [JsonPropertyName("databaseDbType")]
        [CodeGenProperty("Database", Title = "The database `DbType` override (versus inferring from the corresponding .NET Type).", IsImportant = true,
            Description = "Overrides the inferred database type; i.e. can specify `Date` or `DateTime2`, for .NET Type `System.DateTime`.")]
        public string? DatabaseDbType { get; set; }

        #endregion

        #region EntityFramework

        /// <summary>
        /// The Entity Framework `Mapper` approach for the property.
        /// </summary>
        [JsonPropertyName("entityFrameworkMapper")]
        [CodeGenProperty("EntityFramework", Title = "The Entity Framework `Mapper` approach for the property.", Options = new string[] { "Map", "Ignore", "Skip" },
            Description = "Defaults to `Map` which indicates the property will be explicitly mapped. A value of `Ignore` will explicitly `Ignore`, whilst a value of `Skip` will skip code-generated mapping altogether.")]
        public string? EntityFrameworkMapper { get; set; }

        #endregion

        #region Cosmos

        /// <summary>
        /// The Cosmos `Mapper` approach for the property.
        /// </summary>
        [JsonPropertyName("cosmosMapper")]
        [CodeGenProperty("Cosmos", Title = "The Cosmos `Mapper` approach for the property.", Options = new string[] { "Map", "Ignore", "Skip" },
            Description = "Defaults to `Map` which indicates the property will be explicitly mapped. A value of `Ignore` will explicitly `Ignore`, whilst a value of `Skip` will skip code-generated mapping altogether.")]
        public string? CosmosMapper { get; set; }

        #endregion

        #region OData

        /// <summary>
        /// The OData `Mapper` approach for the property.
        /// </summary>
        [JsonPropertyName("odataMapper")]
        [CodeGenProperty("OData", Title = "The OData `Mapper` approach for the property.", Options = new string[] { "Map", "Ignore", "Skip" },
            Description = "Defaults to `Map` which indicates the property will be explicitly mapped. A value of `Ignore` will explicitly `Ignore`, whilst a value of `Skip` will skip code-generated mapping altogether.")]
        public string? ODataMapper { get; set; }

        #endregion

        #region HttpAgent

        /// <summary>
        /// The HttpAgent `Mapper` approach for the property.
        /// </summary>
        [JsonPropertyName("httpAgentMapper")]
        [CodeGenProperty("HttpAgent", Title = "The HttpAgent `Mapper` approach for the property.", Options = new string[] { "Map", "Ignore", "Skip" },
            Description = "Defaults to `Map` which indicates the property will be explicitly mapped. A value of `Ignore` will explicitly `Ignore`, whilst a value of `Skip` will skip code-generated mapping altogether.")]
        public string? HttpAgentMapper { get; set; }

        #endregion

        #region Annotation

        /// <summary>
        /// Gets or sets the display name used in the likes of error messages for the property.
        /// </summary>
        [JsonPropertyName("displayName")]
        [CodeGenProperty("Annotation", Title = "The display name used in the likes of error messages for the property.",
            Description = "Defaults to the `Name` as sentence case.")]
        public string? DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the property annotation (e.g. attribute) declaration code.
        /// </summary>
        [JsonPropertyName("annotation1")]
        [CodeGenProperty("Annotation", Title = "The property annotation (e.g. attribute) declaration code.")]
        public string? Annotation1 { get; set; }

        /// <summary>
        /// Gets or sets the property annotation (e.g. attribute) declaration code.
        /// </summary>
        [JsonPropertyName("annotation2")]
        [CodeGenProperty("Annotation", Title = "The property annotation (e.g. attribute) declaration code.")]
        public string? Annotation2 { get; set; }

        /// <summary>
        /// Gets or sets the property annotation (e.g. attribute) declaration code.
        /// </summary>
        [JsonPropertyName("annotation3")]
        [CodeGenProperty("Annotation", Title = "The property annotation (e.g. attribute) declaration code.")]
        public string? Annotation3 { get; set; }

        #endregion

        #region WebApi

        /// <summary>
        /// Gets or sets the `IPropertyMapperConverter` to perform `Type` to `string` conversion for writing to and parsing from the query string.
        /// </summary>
        [JsonPropertyName("webApiQueryStringConverter")]
        [CodeGenProperty("WebApi", Title = "The `IPropertyMapperConverter` to perform `Type` to `string` conversion for writing to and parsing from the query string.")]
        public string? WebApiQueryStringConverter { get; set; }

        #endregion

        #region Grpc

        /// <summary>
        /// Gets or sets the unique (immutable) field number required to enable gRPC support.
        /// </summary>
        [JsonPropertyName("grpcFieldNo")]
        [CodeGenProperty("gRPC", Title = "The unique (immutable) field number required to enable gRPC support.", IsImportant = true)]
        public int? GrpcFieldNo { get; set; }

        /// <summary>
        /// Gets or sets the underlying gRPC data type.
        /// </summary>
        [JsonPropertyName("grpcType")]
        [CodeGenProperty("gRPC", Title = "The underlying gRPC data type; will be inferred where not specified.")]
        public string? GrpcType { get; set; }

        #endregion

        /// <summary>
        /// Gets the formatted summary text.
        /// </summary>
        public string? SummaryText => StringConverter.ToComments($"{(Type == "bool" ? "Indicates whether" : "Gets or sets the")} {Text}.");

        /// <summary>
        /// Gets the formatted model summary text.
        /// </summary>
        public string? ModelSummaryText => StringConverter.ToComments($"{(Type == "bool" ? "Indicates whether" : "Gets or sets the")} {ModelText}.");

        /// <summary>
        /// Gets the formatted summary text for the Reference Data Serialization Identifier (SID) property.
        /// </summary>
        public string? SummaryRefDataSid => CompareValue(RefDataList, true)
            ? StringConverter.ToComments($"Gets or sets the {{{{{Name}}}}} list using the underlying Serialization Identifier (SID).")
            : StringConverter.ToComments($"Gets or sets the {{{{{Name}}}}} using the underlying Serialization Identifier (SID).");

        /// <summary>
        /// Gets the formatted summary text for the Reference Data Text property.
        /// </summary>
        public string? SummaryRefDataText => StringConverter.ToComments($"Gets the corresponding {{{{{Name}}}}} text (read-only where selected).");

        /// <summary>
        /// Gets the formatted summary text when used in a parameter context.
        /// </summary>
        public string? ParameterSummaryText => StringConverter.ToComments($"{(Type == "bool" ? "Indicates whether" : "The")} {Text}.");

        /// <summary>
        /// Gets the <see cref="Name"/> formatted as see comments.
        /// </summary>
        public string? PropertyNameSeeComments => StringConverter.ToSeeComments(Name);

        /// <summary>
        /// Gets the computed declared property type.
        /// </summary>
        public string PropertyType => string.IsNullOrEmpty(RefDataType) 
            ? PrivateType 
            : (CompareValue(RefDataList, true) ? $"ReferenceDataSidList<{Type}, {RefDataType}>?" : CompareValue(Nullable, true) ? Type + "?" : Type!);

        /// <summary>
        /// Gets the computed declared private type.
        /// </summary>
        public string PrivateType
        {
            get
            {
                if (string.IsNullOrEmpty(RefDataType))
                    return CompareValue(Nullable, true) ? Type + "?" : Type!;

                var rt = CompareValue(RefDataList, true) ? $"List<{RefDataType}>" : RefDataType!;
                return CompareValue(Nullable, true) ? rt + "?" : rt!;
            }
        }

        /// <summary>
        /// Gets or sets the declared type including nullability.
        /// </summary>
        public string? DeclaredType { get; set; }

        /// <summary>
        /// Gets the data reader type (used for ReferenceDataData layer only).
        /// </summary>
        public string? DataReaderType => string.IsNullOrEmpty(RefDataType)
            ? DeclaredType
            : DataConverter switch
                {
                    "ReferenceDataGuidIdConverter" => "Guid",
                    "ReferenceDataNullableGuidIdConverter" => "Guid?",
                    "ReferenceDataInt32IdConverter" => "int",
                    "ReferenceDataNullableInt32IdConverter" => "int?",
                    "ReferenceDataInt64IdConverter" => "long",
                    "ReferenceDataNullableInt64IdConverter" => "long?",
                    "ReferenceDataStringIdConverter" => "string?",
                    _ => DeclaredType
                };

        /// <summary>
        /// Gets the computed property name.
        /// </summary>
        public string PropertyName => string.IsNullOrEmpty(RefDataType) ? Name! : Name! + (CompareValue(RefDataList, true) ? "Sids" : "Sid");

        /// <summary>
        /// Gets the computed argument name.
        /// </summary>
        public string PropertyArgumentName => string.IsNullOrEmpty(RefDataType) ? ArgumentName! : ArgumentName! + (CompareValue(RefDataList, true) ? "Sids" : "Sid");

        /// <summary>
        /// Gets the computed private name.
        /// </summary>
        public string PropertyPrivateName => string.IsNullOrEmpty(RefDataType) ? PrivateName! : PrivateName! + (CompareValue(RefDataList, true) ? "Sids" : "Sid");

        /// <summary>
        /// Gets the computed data mapper property name.
        /// </summary>
        public string DataMapperPropertyName => string.IsNullOrEmpty(RefDataType) ? Name! : CompareNullOrValue(DataConverter, "ReferenceDataCodeConverter") ? PropertyName : Name!;

        /// <summary>
        /// Gets or sets the data converter name.
        /// </summary>
        /// <remarks>Where the name contains a '.' assume it is referencing a static and '.Default' is not required; otherwise, add.</remarks>
        public string? DataConverterName
        {
            get
            {
                var n = string.IsNullOrEmpty(DataConverter) ? null : $"{DataConverter}{(CompareValue(DataConverterIsGeneric, true) ? $"<{Type}>" : "")}";
                if (string.IsNullOrEmpty(n))
                    return null;
                else
                    return DataConverter!.Contains(".") ? n : $"{n}.Default";
            }
        }

        /// <summary>
        /// Gets the data converter C# code.
        /// </summary>
        public string? DataConverterCode => string.IsNullOrEmpty(DataConverter) ? null : $".SetConverter({DataConverterName})";

        /// <summary>
        /// Gets the data converter C# code for reference data data access.
        /// </summary>
        public string? RefDataConverterCode => string.IsNullOrEmpty(DataConverter) ? null : $"{DataConverterName}.ConvertToSrce(";

        /// <summary>
        /// Gets the WebAPI parameter type.
        /// </summary>
        public string WebApiParameterType => (string.IsNullOrEmpty(RefDataType) ? (string.IsNullOrEmpty(WebApiQueryStringConverter) ? Type! : "string") : (CompareValue(RefDataList, true) ? $"List<{RefDataType}>" : RefDataType!)) + (CompareValue(Nullable, true) ? "?" : "");

        /// <summary>
        /// Gets the name of the IdentifierGenerator as passed in as a parameter via DI.
        /// </summary>
        public string? IdentifierGeneratorName { get; set; }

        /// <summary>
        /// Gets or sets the gRPC converter.
        /// </summary>
        public string? GrpcConverter { get; set; }

        /// <summary>
        /// Gets or sets the gRPC mapper.
        /// </summary>
        public string? GrpcMapper { get; set; }

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        protected override Task PrepareAsync()
        {
            Type = DefaultWhereNull(Type, () => "string");
            if (Type!.StartsWith("^"))
                Type = $"RefDataNamespace.{Type[1..]}";

            if (Type!.StartsWith("RefDataNamespace.", StringComparison.InvariantCulture))
                RefDataType = DefaultWhereNull(RefDataType, () => "string");

            if (RefDataType != null && !Type!.StartsWith("RefDataNamespace.", StringComparison.InvariantCulture))
                Type = $"RefDataNamespace.{Type}";

            if (Type!.EndsWith("?", StringComparison.InvariantCulture))
            {
                Type = Type[0..^1];
                Nullable = true;
            }

            DeclaredType = $"{Type}{(CompareValue(Nullable, true) ? "?" : "")}";

            ModelText = StringConverter.ToComments(DefaultWhereNull(ModelText, () => Text ?? StringConverter.ToSentenceCase(Name)));

            Text = StringConverter.ToComments(DefaultWhereNull(Text, () =>
            {
                if (Type!.StartsWith("RefDataNamespace.", StringComparison.InvariantCulture))
                    return $"{StringConverter.ToSentenceCase(Name)} (see {StringConverter.ToSeeComments(Type)})";

                if (Type == "ChangeLog")
                    return $"{StringConverter.ToSentenceCase(Name)} (see {StringConverter.ToSeeComments("Beef.Entities." + Type)})";

                var ent = Root!.Entities?.FirstOrDefault(x => x.Name == Type);
                if (ent != null)
                {
                    if ((ent.EntityScope ?? Root.EntityScope) == "Common")
                        return $"{StringConverter.ToSentenceCase(Name)} (see {StringConverter.ToSeeComments("Common.Entities." + Type)})";
                    else
                        return $"{StringConverter.ToSentenceCase(Name)} (see {StringConverter.ToSeeComments("Business.Entities." + Type)})";
                }

                return StringConverter.ToSentenceCase(Name);
            }));

            PrivateName = DefaultWhereNull(PrivateName, () => StringConverter.ToPrivateCase(Name));
            ArgumentName = DefaultWhereNull(ArgumentName, () => StringConverter.ToCamelCase(Name));
            DateTimeTransform = DefaultWhereNull(DateTimeTransform, () => "UseDefault");
            StringTrim = DefaultWhereNull(StringTrim, () => "UseDefault");
            StringTransform = DefaultWhereNull(StringTransform, () => "UseDefault");
            RefDataText = DefaultWhereNull(RefDataText, () => Parent!.RefDataText);
            DisplayName = DefaultWhereNull(DisplayName, () => GenerateDisplayName());
            Nullable = DefaultWhereNull(Nullable, () => !DotNet.IgnoreNullableTypes.Contains(Type!));
            JsonName = DefaultWhereNull(JsonName, () => Name == "ETag" ? Root!.ETagJsonName : ArgumentName);
            JsonDataModelName = DefaultWhereNull(JsonDataModelName, () => JsonName);
            SerializationEmitDefault = DefaultWhereNull(SerializationEmitDefault, () => CompareValue(UniqueKey, true));
            DataModelJsonName = DefaultWhereNull(DataModelJsonName, () => JsonName);
            DataOperationTypes = DefaultWhereNull(DataOperationTypes, () => "Any");
            IsEntity = DefaultWhereNull(IsEntity, () => (Type == "ChangeLog" || Parent!.Parent!.Entities!.Any(x => x.Name == Type)) && RefDataType == null);
            Immutable = DefaultWhereNull(Immutable, () => RefDataMapping.HasValue && RefDataMapping.Value == true);
            BubblePropertyChanged = DefaultWhereNull(BubblePropertyChanged, () => CompareValue(IsEntity, true));

            DataConverter = DefaultWhereNull(DataConverter, () => string.IsNullOrEmpty(RefDataType) ? null : Root!.RefDataDefaultMapperConverter);
            if (!string.IsNullOrEmpty(DataConverter) && (DataConverter.EndsWith("{T}", StringComparison.InvariantCulture) || DataConverter.EndsWith("<T>", StringComparison.InvariantCulture)))
            {
                DataConverterIsGeneric = true;
                DataConverter = DataConverter![0..^3];
            }

            if (CompareValue(RefDataType, "string") && CompareValue(DataConverter, "ReferenceDataCodeConverter"))
                DataConverter = null;

            if (!string.IsNullOrEmpty(IdentifierGenerator))
            {
                var pc = EntityConfig.CreateParameterConfigFromInterface(IdentifierGenerator);
                if (pc != null)
                {
                    IdentifierGenerator = pc.Type;
                    IdentifierGeneratorName = pc.Name;
                }
            }

            EntityFrameworkMapper = DefaultWhereNull(EntityFrameworkMapper, () => "Map");
            CosmosMapper = DefaultWhereNull(CosmosMapper, () => "Map");
            ODataMapper = DefaultWhereNull(ODataMapper, () => "Map");
            HttpAgentMapper = DefaultWhereNull(HttpAgentMapper, () => "Map");

            GrpcType = DefaultWhereNull(GrpcType, () => InferGrpcType(string.IsNullOrEmpty(RefDataType) ? Type! : RefDataType!, RefDataType, RefDataList, DateTimeTransform));
            GrpcMapper = DotNet.SystemTypes.Contains(Type) || RefDataType != null ? null : Type;
            GrpcConverter = Type switch
            {
                "DateTime" => $"{(CompareValue(Nullable, true) ? "Nullable" : "")}{(DateTimeTransform == "DateOnly" ? "DateTimeToDateOnly" : "DateTimeToTimestamp")}",
                "Guid" => $"{(CompareValue(Nullable, true) ? "Nullable" : "")}GuidToStringConverter",
                "decimal" => $"{(CompareValue(Nullable, true) ? "Nullable" : "")}DecimalToDecimalConverter",
                _ => null
            };

            return Task.CompletedTask;
        }

        /// <summary>
        /// Generates the display name (checks for Id and handles specifically).
        /// </summary>
        private string GenerateDisplayName()
        {
            var dn = StringConverter.ToSentenceCase(Name)!;
            var parts = dn.Split(' ');
            if (parts.Length == 1)
                return (parts[0] == "Id") ? "Identifier" : dn;

            if (parts.Last() != "Id")
                return dn;

            var parts2 = new string[parts.Length - 1];
            Array.Copy(parts, parts2, parts.Length - 1);
            return string.Join(" ", parts2);
        }

        /// <summary>
        /// Infers the gRPC data type.
        /// </summary>
        internal static string InferGrpcType(string type, string? refDataType = null, bool? refDataList = null, string? dateTimeTransform = null)
        {
            var gt = type switch
            {
                "string" => "google.protobuf.StringValue",
                "bool" => "google.protobuf.BoolValue",
                "double" => "google.protobuf.DoubleValue",
                "float" => "google.protobuf.FloatValue",
                "int" => "google.protobuf.Int32Value",
                "long" => "google.protobuf.Int64Value",
                "unit" => "google.protobuf.UInt32Value",
                "ulong" => "google.protobuf.UInt64Value",
                "short" => "google.protobuf.Int32Value",  // Not natively supported
                "ushort" => "google.protobuf.UInt32Value", // Not natively supported
                "Guid" => "google.protobuf.StringValue", // Not natively supported
                "byte[]" => "bytes", // Not natively supported
                "Decimal" => "Decimal", // Not natively supported
                "DateTime" => string.Compare(dateTimeTransform, "DateOnly", StringComparison.InvariantCulture) == 0 ? "DateOnly" : "google.protobuf.Timestamp", // DateOnly not natively supported
                "TimeSpan" => "google.protobuf.Duration",
                "void" => "google.protobuf.Empty",
                _ => type
            };

            return !string.IsNullOrEmpty(refDataType) && CompareValue(refDataList, true) ? "repeated " + gt : gt;
        }
    }
}
{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace {{Root.NamespaceBusiness}}.Data.EfModel
{
    /// <summary>
    /// Represents the Entity Framework (EF) model for database object '{{DbTable.QualifiedName}}'.
    /// </summary>
    public partial class {{EfModelName}}{{#ifval ColumnIsDeleted}} : ILogicallyDeleted{{#ifval ColumnTenantId}}, ITenantId{{/ifval}}{{else}}{{#ifval ColumnTenantId}} : ITenantId{{/ifval}}{{/ifval}}
    {
{{#each CoreColumns}}
        /// <summary>
        /// Gets or sets the '{{Name}}' column value.
        /// </summary>
        public {{DotNetType}}{{#if IsDotNetNullable}}?{{/if}} {{NameAlias}} { get; set; }

{{/each}}
{{#ifval ColumnIsDeleted}}
        /// <summary>
        /// Gets or sets the '{{ColumnIsDeleted.Name}}' column value.
        /// </summary>
        public {{ColumnIsDeleted.DotNetType}}{{#if ColumnIsDeleted.IsDotNetNullable}}?{{/if}} IsDeleted { get; set; }

{{/ifval}}
{{#ifval ColumnTenantId}}
        /// <summary>
        /// Gets or sets the '{{ColumnTenantId.Name}}' column value.
        /// </summary>
        public {{ColumnTenantId.DotNetType}}{{#if ColumnTenantId.IsDotNetNullable}}?{{/if}} TenantId { get; set; }

{{/ifval}}
{{#each Relationships}}
        /// <summary>
        /// Gets or sets the <i>{{Type}}</i> relationship to <see cref="{{EfModelName}}"/>.
        /// </summary>
        public {{#ifeq Type 'OneToMany'}}List<{{/ifeq}}{{EfModelName}}{{#ifeq Type 'OneToMany'}}>{{/ifeq}} {{PropertyName}} { get; set; }

{{/each}}
        /// <summary>
        /// Adds the table/model configuration to the <see cref="ModelBuilder"/>.
        /// </summary>
        /// <param name="modelBuilder">The <see cref="ModelBuilder"/>.</param>
        public static void AddToModel(ModelBuilder modelBuilder)
        {
            if (modelBuilder == null)
                throw new ArgumentNullException(nameof(modelBuilder));

            modelBuilder.Entity<{{EfModelName}}>(entity =>
            {
                entity.{{#if DbTable.IsAView}}ToView{{else}}ToTable{{/if}}("{{Name}}"{{#ifne Schema ''}}, "{{Schema}}"{{/ifne}});
                entity.HasKey({{#each PrimaryKeyColumns}}nameof({{NameAlias}}){{#unless @last}}, {{/unless}}{{/each}});
{{#each CoreColumns}}
                entity.Property(p => p.{{NameAlias}}).HasColumnName("{{Name}}").HasColumnType("{{EfSqlType}}"){{#if DbColumn.IsComputed}}.ValueGeneratedOnAddOrUpdate(){{/if}}{{#if IsRowVersionColumn}}.IsRowVersion(){{/if}}{{#if IsCreated}}.ValueGeneratedOnUpdate(){{/if}}{{#if IsUpdated}}.ValueGeneratedOnAdd(){{/if}};
{{/each}}
{{#ifval ColumnIsDeleted}}
                entity.Property(p => p.IsDeleted).HasColumnName("{{ColumnIsDeleted.Name}}").HasColumnType("{{ColumnIsDeleted.EfSqlType}}");
                entity.HasQueryFilter(v => v.IsDeleted != true);
{{/ifval}}
{{#ifval ColumnTenantId}}
                entity.Property(p => p.TenantId).HasColumnName("{{ColumnTenantId.Name}}").HasColumnType("{{ColumnTenantId.EfSqlType}}");
                entity.HasQueryFilter(v => v.TenantId == CoreEx.ExecutionContext.Current.TenantId);
{{/ifval}}
{{#each Relationships}}
  {{#if @first}}

                // Relationships...
  {{/if}}
                entity.HasMany(r => r.{{PropertyName}}).WithOne().HasForeignKey({{#ifeq ForeignKeyDbColumns.Count 1}}fk => fk.{{#each ForeignKeyDbColumns}}{{PropertyName}}{{/each}}{{else}}{{#each ForeignKeyDbColumns}}{{#unless @first}}, {{/unless}}"{{PropertyName}}"{{/each}}{{/ifeq}}).OnDelete(DeleteBehavior.{{OnDelete}});
                entity.Navigation(r => r.{{PropertyName}}).AutoInclude({{#if AutoInclude}}true{{else}}false{{/if}});
{{/each}}
                AddToModel(entity);
            });
        }
        
        /// <summary>
        /// Enables further configuration of the underlying <see cref="EntityTypeBuilder"/> when configuring the <see cref="ModelBuilder"/>.
        /// </summary>
        static partial void AddToModel(EntityTypeBuilder<{{EfModelName}}> entity);
    }
}

#pragma warning restore
#nullable restore
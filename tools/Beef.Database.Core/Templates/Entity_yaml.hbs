{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
entities:
{{#each RefDataTables}}
  {{#if @first}}
# The following is identified as Reference Data and as such has been formatted for usage in: refdata.beef-5.yaml (the 'refDataType' can be removed where same as specified at root; assumes 'autoImplement: EntityFramework' specified at root).
  {{/if}}
- { name: {{DotNetName}}, refDataType: {{#each PrimaryKeyColumns}}{{DotNetType}}{{/each}}, entityFrameworkModel: EfModel.{{DotNetName}} }
{{/each}}
{{#each StandardTables}}
  {{#ifne ../RefDataTables.Count 0}}
    {{#if @first}}

    {{/if}}
  {{/ifne}}
  {{#if @first}}
# The following is identified as Master/Transaction Data and as such has been formatted for usage in: entity.beef-5.yaml (assumes 'autoImplement: EntityFramework' specified at root).
  {{/if}}
- { name: {{DotNetName}}, collection: true, {{#if IncludeOperation}}collectionResult: true, {{#if IncludeCrud}}validator: {{DotNetName}}Validator, {{/if}}webApiRoutePrefix: {{lower PluralName}}, {{#if IncludeCrud}}behavior: crupd, {{/if}}{{/if}}entityFrameworkModel: EfModel.{{DotNetName}},
    properties: [
  {{#each PrimaryKeyColumns}}
      { name: {{#if ../IsPrimaryKeyAnIdentifier}}Id{{else}}{{DotNetCleanedName}}{{/if}}, type: {{DotNetType}}, {{#if ../IsPrimaryKeyAnIdentifier}}text: '{{../MoustacheDotNetName}} identifier', {{/if}}primaryKey: true, dataName: {{DotNetName}}{{#if IsIdentity}}, dataAutoGenerated: true{{/if}} },
  {{/each}}
  {{#each StandardColumns}}
      { name: {{DotNetCleanedName}}{{#if IsJsonContent}}, type: {{DotNetCleanedName}}{{else}}{{#if IsRefData}}, type: ^{{DotNetCleanedName}}{{else}}{{#ifne DotNetType 'string'}}, type: {{#if IsNullable}}'{{DotNetType}}?'{{else}}{{DotnetType}}{{/if}}{{/ifne}}{{/if}}{{/if}}{{#ifeq DotNetType 'DateTime'}}{{#if IsDotNetDateOnly}}, dateTimeTransform: DateOnly{{/if}}{{/ifeq}}{{#ifne DotNetCleanedName DotNetName }}, dataName: {{DotNetName}}{{/ifne}}{{#if IsJsonContent}}, dataConverter: ObjectToJsonConverter<T>, entityFrameworkMapper: Set{{/if}} }{{#if @last}}{{#ifor ../HasAuditColumns ../RowVersionColumn}},{{/ifor}}{{else}},{{/if}}
  {{/each}}
  {{#if RowVersionColumn}}
      { name: ETag }{{#if HasAuditColumns}},{{/if}}
  {{/if}}
  {{#if HasAuditColumns}}
      { name: ChangeLog, type: ChangeLog }
  {{/if}}
    ]{{#if IncludeGetByArgs}},{{/if}}
  {{#if IncludeGetByArgs}}
    operations: [     
      { name: GetByArgs, type: GetColl, paging: true,
        parameters: [
          { name: Args, type: {{DotNetName}}Args, validator: {{DotNetName}}ArgsValidator }
        ]
      }
    ]
  }

- { name: {{DotNetName}}Args,
    properties: [
      { name: FooBar }
    ]
  {{/if}}
  }
  {{#unless @last}}

  {{/unless}}
{{/each}}
{{#each StandardTables}}

  {{#if @first}}
validation:
# Each of the following C# code snippets should be copied into the Business.Vaidation folder representing the basic starting position for the corresponding entity validation (where applicable). 
  {{/if}}
- {{camel DotNetName}}: |
     public class {{DotNetName}}Validator : Validator<{{DotNetName}}>
     {
         public {{DotNetName}}Validator()
         {
    {{#each PrimaryKeyColumns}}
             Property(x => x.{{DotNetCleanedName}}){{#unless IsIdentity}}.Mandatory(){{/unless}}{{#if IsRefData}}.IsValid(){{else}}{{#ifeq DotNetType 'string'}}{{#if HasLength}}.String({{Length}}){{/if}}{{/ifeq}}{{/if}};
    {{/each}}
    {{#each StandardColumns}}
             Property(x => x.{{DotNetCleanedName}}){{#unless IsNullable}}.Mandatory(){{/unless}}{{#if IsRefData}}.IsValid(){{else}}{{#ifeq DotNetType 'string'}}{{#if IsJsonContent}}.Entity({{private DotNetCleanedName}}Validator){{else}}{{#if HasLength}}.String({{Length}}){{/if}}{{/if}}{{/ifeq}}{{/if}};
    {{/each}}
         }
     }
  {{#if IncludeGetByArgs}}

- {{camel DotNetName}}Args: |
     public class {{DotNetName}}ArgsValidator : Validator<{{DotNetName}}Args>
     {
         public {{DotNetName}}ArgsValidator()
         {
             Property(x => x.FooBar);
         }
     }
  {{/if}}
{{/each}}
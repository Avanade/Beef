/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace MyEf.Hr.Business.Data
{
    /// <summary>
    /// Provides the <see cref="Employee"/> data access.
    /// </summary>
    public partial class EmployeeData : IEmployeeData
    {
        private readonly IEfDb _ef;
        private Func<IQueryable<EfModel.Employee>, EmployeeArgs?, IQueryable<EfModel.Employee>>? _getByArgsOnQuery;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmployeeData"/> class.
        /// </summary>
        /// <param name="ef">The <see cref="IEfDb"/>.</param>
        public EmployeeData(IEfDb ef)
            { _ef = ef ?? throw new ArgumentNullException(nameof(ef)); EmployeeDataCtor(); }

        partial void EmployeeDataCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the specified <see cref="Employee"/>.
        /// </summary>
        /// <param name="id">The <see cref="Employee"/> identifier.</param>
        /// <returns>The selected <see cref="Employee"/> where found.</returns>
        public Task<Employee?> GetAsync(Guid id)
        {
            return _ef.GetAsync<Employee, EfModel.Employee>(id);
        }

        /// <summary>
        /// Creates a new <see cref="Employee"/>.
        /// </summary>
        /// <param name="value">The <see cref="Employee"/>.</param>
        /// <returns>The created <see cref="Employee"/>.</returns>
        public Task<Employee> CreateAsync(Employee value)
        {
            return _ef.CreateAsync<Employee, EfModel.Employee>(value ?? throw new ArgumentNullException(nameof(value)));
        }

        /// <summary>
        /// Updates an existing <see cref="Employee"/>.
        /// </summary>
        /// <param name="value">The <see cref="Employee"/>.</param>
        /// <returns>The updated <see cref="Employee"/>.</returns>
        public Task<Employee> UpdateAsync(Employee value)
        {
            return _ef.UpdateAsync<Employee, EfModel.Employee>(value ?? throw new ArgumentNullException(nameof(value)));
        }

        /// <summary>
        /// Deletes the specified <see cref="Employee"/>.
        /// </summary>
        /// <param name="id">The Id.</param>
        public Task DeleteAsync(Guid id)
        {
            return _ef.DeleteAsync<Employee, EfModel.Employee>(id);
        }

        /// <summary>
        /// Gets the <see cref="EmployeeBaseCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <param name="args">The Args (see <see cref="Entities.EmployeeArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>The <see cref="EmployeeBaseCollectionResult"/>.</returns>
        public Task<EmployeeBaseCollectionResult> GetByArgsAsync(EmployeeArgs? args, PagingArgs? paging)
        {
            return _ef.Query<EmployeeBase, EfModel.Employee>(q => _getByArgsOnQuery?.Invoke(q, args) ?? q).WithPaging(paging).SelectResultAsync<EmployeeBaseCollectionResult, EmployeeBaseCollection>();
        }

        /// <summary>
        /// Terminates an existing <see cref="Employee"/>.
        /// </summary>
        /// <param name="value">The <see cref="TerminationDetail"/>.</param>
        /// <param name="id">The <see cref="Employee"/> identifier.</param>
        /// <returns>The updated <see cref="Employee"/>.</returns>
        public Task<Employee> TerminateAsync(TerminationDetail value, Guid id) => TerminateOnImplementationAsync(value ?? throw new ArgumentNullException(nameof(value)), id);

        /// <summary>
        /// Provides the <see cref="Employee"/> to Entity Framework <see cref="EfModel.Employee"/> mapping.
        /// </summary>
        public partial class EntityToModelEfMapper : Mapper<Employee, EfModel.Employee>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="EntityToModelEfMapper"/> class.
            /// </summary>
            public EntityToModelEfMapper()
            {
                Base<EmployeeBaseData.EntityToModelEfMapper>();
                Map((s, d) => d.AddressJson = ObjectToJsonConverter<Address>.Default.ToDestination.Convert(s.Address));
                Map((o, s, d) => d.EmergencyContacts = o.Map(s.EmergencyContacts, d.EmergencyContacts));
                Map((s, d) => d.RowVersion = StringToBase64Converter.Default.ToDestination.Convert(s.ETag));
                Flatten(s => s.ChangeLog);
                EntityToModelEfMapperCtor();
            }

            /// <inheritdoc/>
            public override bool IsSourceInitial(Employee s)
                => s.Address == default
                && s.EmergencyContacts == default
                && s.ETag == default
                && s.ChangeLog == default;

            /// <inheritdoc/>
            protected override void OnRegister(Mapper<Employee, EfModel.Employee> mapper) => mapper.Owner.Register(new Mapper<ChangeLogEx, EfModel.Employee>()
                .Map((s, d) => d.CreatedBy = s.CreatedBy, OperationTypes.AnyExceptUpdate)
                .Map((s, d) => d.CreatedDate = s.CreatedDate, OperationTypes.AnyExceptUpdate)
                .Map((s, d) => d.UpdatedBy = s.UpdatedBy, OperationTypes.AnyExceptCreate)
                .Map((s, d) => d.UpdatedDate = s.UpdatedDate, OperationTypes.AnyExceptCreate));

            partial void EntityToModelEfMapperCtor(); // Enables the constructor to be extended.
        }

        /// <summary>
        /// Provides the Entity Framework <see cref="EfModel.Employee"/> to <see cref="Employee"/> mapping.
        /// </summary>
        public partial class ModelToEntityEfMapper : Mapper<EfModel.Employee, Employee>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ModelToEntityEfMapper"/> class.
            /// </summary>
            public ModelToEntityEfMapper()
            {
                Base<EmployeeBaseData.ModelToEntityEfMapper>();
                Map((s, d) => d.Address = (Address?)ObjectToJsonConverter<Address>.Default.ToSource.Convert(s.AddressJson));
                Map((o, s, d) => d.EmergencyContacts = o.Map(s.EmergencyContacts, d.EmergencyContacts));
                Map((s, d) => d.ETag = (string?)StringToBase64Converter.Default.ToSource.Convert(s.RowVersion));
                Expand<ChangeLogEx>((d, v) => d.ChangeLog = v);
                ModelToEntityEfMapperCtor();
            }

            /// <inheritdoc/>
            public override bool IsSourceInitial(EfModel.Employee s)
                => s.AddressJson == default
                && s.EmergencyContacts == default
                && s.RowVersion == default;

            /// <inheritdoc/>
            protected override void OnRegister(Mapper<EfModel.Employee, Employee> mapper) => mapper.Owner.Register(new Mapper<EfModel.Employee, ChangeLogEx>()
                .Map((s, d) => d.CreatedBy = s.CreatedBy, OperationTypes.AnyExceptUpdate)
                .Map((s, d) => d.CreatedDate = s.CreatedDate, OperationTypes.AnyExceptUpdate)
                .Map((s, d) => d.UpdatedBy = s.UpdatedBy, OperationTypes.AnyExceptCreate)
                .Map((s, d) => d.UpdatedDate = s.UpdatedDate, OperationTypes.AnyExceptCreate));

            partial void ModelToEntityEfMapperCtor(); // Enables the constructor to be extended.
        }
    }
}

#pragma warning restore
#nullable restore
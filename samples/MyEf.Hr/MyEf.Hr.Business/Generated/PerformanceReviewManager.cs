/*
 * This file is automatically generated; any changes will be lost. 
 */

namespace MyEf.Hr.Business;

/// <summary>
/// Provides the <see cref="PerformanceReview"/> business functionality.
/// </summary>
public partial class PerformanceReviewManager : IPerformanceReviewManager
{
    private readonly IPerformanceReviewDataSvc _dataService;

    /// <summary>
    /// Initializes a new instance of the <see cref="PerformanceReviewManager"/> class.
    /// </summary>
    /// <param name="dataService">The <see cref="IPerformanceReviewDataSvc"/>.</param>
    public PerformanceReviewManager(IPerformanceReviewDataSvc dataService)
        { _dataService = dataService.ThrowIfNull(); PerformanceReviewManagerCtor(); }

    partial void PerformanceReviewManagerCtor(); // Enables additional functionality to be added to the constructor.

    /// <inheritdoc/>
    public Task<Result<PerformanceReview?>> GetAsync(Guid id) => ManagerInvoker.Current.InvokeAsync(this, (_, ct) =>
    {
        return Result.Go().Requires(id)
                     .ThenAsAsync(() => _dataService.GetAsync(id));
    }, InvokerArgs.Read);

    /// <inheritdoc/>
    public Task<Result<PerformanceReview>> UpdateAsync(PerformanceReview value, Guid id) => ManagerInvoker.Current.InvokeAsync(this, (_, ct) =>
    {
        return Result.Go(value).Required().Requires(id).Then(v => v.Id = id)
                     .ValidateAsync(vc => vc.Entity().With<PerformanceReviewValidator>(), cancellationToken: ct)
                     .ThenAsAsync(v => _dataService.UpdateAsync(v));
    }, InvokerArgs.Update);

    /// <inheritdoc/>
    public Task<Result> DeleteAsync(Guid id) => ManagerInvoker.Current.InvokeAsync(this, (_, ct) =>
    {
        return Result.Go().Requires(id)
                     .ThenAsync(() => _dataService.DeleteAsync(id));
    }, InvokerArgs.Delete);

    /// <inheritdoc/>
    public Task<Result<PerformanceReviewCollectionResult>> GetByEmployeeIdAsync(Guid employeeId, PagingArgs? paging) => ManagerInvoker.Current.InvokeAsync(this, (_, ct) =>
    {
        return Result.Go().Requires(employeeId)
                     .ThenAsAsync(() => _dataService.GetByEmployeeIdAsync(employeeId, paging));
    }, InvokerArgs.Read);

    /// <inheritdoc/>
    public Task<Result<PerformanceReview>> CreateAsync(PerformanceReview value, Guid employeeId) => ManagerInvoker.Current.InvokeAsync(this, (_, ct) =>
    {
        return Result.Go(value).Required().Requires(employeeId).Then(v => v.EmployeeId = employeeId)
                     .ValidateAsync(vc => vc.Entity().With<PerformanceReviewValidator>(), cancellationToken: ct)
                     .ThenAsAsync(v => _dataService.CreateAsync(v));
    }, InvokerArgs.Create);
}
/*
 * This file is automatically generated; any changes will be lost. 
 */

namespace MyEf.Hr.Business.DataSvc;

/// <summary>
/// Provides the <see cref="Employee"/> data repository services.
/// </summary>
public partial class EmployeeDataSvc : IEmployeeDataSvc
{
    private readonly IEmployeeData _data;
    private readonly IEventPublisher _events;
    private readonly IRequestCache _cache;

    /// <summary>
    /// Initializes a new instance of the <see cref="EmployeeDataSvc"/> class.
    /// </summary>
    /// <param name="data">The <see cref="IEmployeeData"/>.</param>
    /// <param name="events">The <see cref="IEventPublisher"/>.</param>
    /// <param name="cache">The <see cref="IRequestCache"/>.</param>
    public EmployeeDataSvc(IEmployeeData data, IEventPublisher events, IRequestCache cache)
        { _data = data.ThrowIfNull(); _events = events.ThrowIfNull(); _cache = cache.ThrowIfNull(); EmployeeDataSvcCtor(); }

    partial void EmployeeDataSvcCtor(); // Enables additional functionality to be added to the constructor.

    /// <inheritdoc/>
    public Task<Result<Employee?>> GetAsync(Guid id) => Result.Go().CacheGetOrAddAsync(_cache, id, () => _data.GetAsync(id));

    /// <inheritdoc/>
    public Task<Result<Employee>> CreateAsync(Employee value) => DataSvcInvoker.Current.InvokeAsync(this, (_, __) =>
    {
        return Result.GoAsync(_data.CreateAsync(value))
                     .Then(r => _events.PublishValueEvent(r, new Uri($"myef/hr/employee/{r.Id}", UriKind.Relative), $"MyEf.Hr.Employee", "Created"))
                     .CacheSet(_cache);
    }, new InvokerArgs { IncludeTransactionScope = true, EventPublisher = _events });

    /// <inheritdoc/>
    public Task<Result<Employee>> UpdateAsync(Employee value) => DataSvcInvoker.Current.InvokeAsync(this, (_, __) =>
    {
        return Result.GoAsync(_data.UpdateAsync(value))
                     .Then(r => _events.PublishValueEvent(r, new Uri($"myef/hr/employee/{r.Id}", UriKind.Relative), $"MyEf.Hr.Employee", "Updated"))
                     .CacheSet(_cache);
    }, new InvokerArgs { IncludeTransactionScope = true, EventPublisher = _events });

    /// <inheritdoc/>
    public Task<Result> DeleteAsync(Guid id) => DataSvcInvoker.Current.InvokeAsync(this, (_, __) =>
    {
        return Result.Go().CacheRemove<Employee>(_cache, id)
                     .ThenAsync(() => _data.DeleteAsync(id))
                     .Then(() => _events.PublishValueEvent(new { Id = id }, new Uri($"myef/hr/employee/{id}", UriKind.Relative), $"MyEf.Hr.Employee", "Deleted"));
    }, new InvokerArgs { IncludeTransactionScope = true, EventPublisher = _events });

    /// <inheritdoc/>
    public Task<Result<EmployeeBaseCollectionResult>> GetByArgsAsync(EmployeeArgs? args, PagingArgs? paging) => _data.GetByArgsAsync(args, paging);

    /// <inheritdoc/>
    public Task<Result<EmployeeBaseCollectionResult>> GetByQueryAsync(QueryArgs? query, PagingArgs? paging) => _data.GetByQueryAsync(query, paging);

    /// <inheritdoc/>
    public Task<Result<Employee>> TerminateAsync(TerminationDetail value, Guid id) => DataSvcInvoker.Current.InvokeAsync(this, (_, __) =>
    {
        return Result.GoAsync(_data.TerminateAsync(value, id))
                     .Then(r => _events.PublishValueEvent(r, new Uri($"myef/hr/employee/{r.Id}", UriKind.Relative), $"MyEf.Hr.Employee", "Terminated"))
                     .CacheSet(_cache);
    }, new InvokerArgs { IncludeTransactionScope = true, EventPublisher = _events });
}
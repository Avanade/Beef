/*
 * This file is automatically generated; any changes will be lost. 
 */

namespace MyEf.Hr.Api.Controllers;

/// <summary>
/// Provides the <see cref="PerformanceReview"/> Web API functionality.
/// </summary>
[Consumes(System.Net.Mime.MediaTypeNames.Application.Json)]
[Produces(System.Net.Mime.MediaTypeNames.Application.Json)]
public partial class PerformanceReviewController : ControllerBase
{
    private readonly WebApi _webApi;
    private readonly IPerformanceReviewManager _manager;

    /// <summary>
    /// Initializes a new instance of the <see cref="PerformanceReviewController"/> class.
    /// </summary>
    /// <param name="webApi">The <see cref="WebApi"/>.</param>
    /// <param name="manager">The <see cref="IPerformanceReviewManager"/>.</param>
    public PerformanceReviewController(WebApi webApi, IPerformanceReviewManager manager)
        { _webApi = webApi.ThrowIfNull(); _manager = manager.ThrowIfNull(); PerformanceReviewControllerCtor(); }

    partial void PerformanceReviewControllerCtor(); // Enables additional functionality to be added to the constructor.

    /// <summary>
    /// Gets the specified <c>PerformanceReview</c>.
    /// </summary>
    /// <param name="id">The <c>PerformanceReview</c> identifier.</param>
    /// <returns>The selected <c>PerformanceReview</c> where found.</returns>
    [HttpGet("reviews/{id}", Name="PerformanceReview_Get")]
    [ProducesResponseType(typeof(Common.Entities.PerformanceReview), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> Get(Guid id)
        => _webApi.GetWithResultAsync<PerformanceReview?>(Request, p => _manager.GetAsync(id));

    /// <summary>
    /// Updates an existing <c>PerformanceReview</c>.
    /// </summary>
    /// <param name="id">The <c>PerformanceReview</c> identifier.</param>
    /// <returns>The updated <c>PerformanceReview</c>.</returns>
    [HttpPut("reviews/{id}", Name="PerformanceReview_Update")]
    [AcceptsBody(typeof(Common.Entities.PerformanceReview))]
    [ProducesResponseType(typeof(Common.Entities.PerformanceReview), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> Update(Guid id)
        => _webApi.PutWithResultAsync<PerformanceReview, PerformanceReview>(Request, p => _manager.UpdateAsync(p.Value!, id));

    /// <summary>
    /// Patches an existing <c>PerformanceReview</c>.
    /// </summary>
    /// <param name="id">The <c>PerformanceReview</c> identifier.</param>
    /// <returns>The patched <c>PerformanceReview</c>.</returns>
    [HttpPatch("reviews/{id}", Name="PerformanceReview_Patch")]
    [AcceptsBody(typeof(Common.Entities.PerformanceReview), HttpConsts.MergePatchMediaTypeName)]
    [ProducesResponseType(typeof(Common.Entities.PerformanceReview), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> Patch(Guid id)
        => _webApi.PatchWithResultAsync<PerformanceReview>(Request, get: _ => _manager.GetAsync(id), put: p => _manager.UpdateAsync(p.Value!, id));

    /// <summary>
    /// Deletes the specified <c>PerformanceReview</c>.
    /// </summary>
    /// <param name="id">The <c>PerformanceReview</c> identifier.</param>
    [HttpDelete("reviews/{id}", Name="PerformanceReview_Delete")]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> Delete(Guid id)
        => _webApi.DeleteWithResultAsync(Request, p => _manager.DeleteAsync(id));

    /// <summary>
    /// Gets the <c>PerformanceReview</c> array that contains the items that match the selection criteria.
    /// </summary>
    /// <param name="employeeId">The <c>Employee</c> identifier.</param>
    /// <returns>The <c>PerformanceReview</c> array</returns>
    [HttpGet("employees/{employeeId}/reviews", Name="PerformanceReview_GetByEmployeeId")]
    [Paging]
    [ProducesResponseType(typeof(Common.Entities.PerformanceReviewCollection), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> GetByEmployeeId(Guid employeeId)
        => _webApi.GetWithResultAsync<PerformanceReviewCollectionResult>(Request, p => _manager.GetByEmployeeIdAsync(employeeId, p.RequestOptions.Paging), alternateStatusCode: HttpStatusCode.NoContent);

    /// <summary>
    /// Creates a new <c>PerformanceReview</c>.
    /// </summary>
    /// <param name="employeeId">The <c>Employee</c> identifier.</param>
    /// <returns>The created <c>PerformanceReview</c>.</returns>
    [HttpPost("employees/{employeeId}/reviews", Name="PerformanceReview_Create")]
    [AcceptsBody(typeof(Common.Entities.PerformanceReview))]
    [ProducesResponseType(typeof(Common.Entities.PerformanceReview), (int)HttpStatusCode.Created)]
    public Task<IActionResult> Create(Guid employeeId)
        => _webApi.PostWithResultAsync<PerformanceReview, PerformanceReview>(Request, p => _manager.CreateAsync(p.Value!, employeeId), statusCode: HttpStatusCode.Created, locationUri: r => new Uri($"/reviews/{r.Id}", UriKind.Relative));
}
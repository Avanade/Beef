entities:
# The following is identified as Reference Data and as such has been formatted for usage in: refdata.beef-5.yaml
- { name: Gender, refDataType: Guid, collection: true, webApiRoutePrefix: genders, autoImplement: EntityFramework, entityFrameworkModel: EfModel.Gender }
- { name: TerminationReason, refDataType: Guid, collection: true, webApiRoutePrefix: terminationReasons, autoImplement: EntityFramework, entityFrameworkModel: EfModel.TerminationReason }

# The following is identified as Master/Transaction Data and as such has been formatted for usage in: entity.beef-5.yaml
- { name: Employee, collection: true, collectionResult: true, validator: EmployeeValidator, webApiRoutePrefix: employees, get: true, create: true, update: true, patch: true, autoImplement: EntityFramework, entityFrameworkModel: EfModel.Employee,
    properties: [
      { name: Id, type: Guid, text: 'Employee identifier', primaryKey: true, dataName: EmployeeId, dataAutoGenerated: true },
      { name: Email },
      { name: FirstName },
      { name: LastName },
      { name: Gender, type: ^Gender, dataName: GenderCode },
      { name: Birthday, type: 'DateTime?' },
      { name: StartDate, type: 'DateTime?' },
      { name: TerminationDate, type: 'DateTime?' },
      { name: TerminationReason, type: ^TerminationReason, dataName: TerminationReasonCode },
      { name: PhoneNo },
      { name: Address, type: Address, dataName: AddressJson, dataConverter: 'ObjectToJsonConverter{T}', entityFrameworkMapper: Set },
      { name: ETag },
      { name: ChangeLog, type: ChangeLog }
    ],
    operations: [     
      { name: GetByArgs, type: GetColl, paging: true,
        parameters: [
          { name: Args, type: EmployeeArgs, validator: EmployeeArgsValidator }
        ]
      }
    ]
  }

- { name: EmployeeArgs,
    properties: [
      { name: FooBar }
    ]
  }

- { name: EmergencyContact, collection: true, autoImplement: EntityFramework, entityFrameworkModel: EfModel.EmergencyContact,
    properties: [
      { name: Id, type: Guid, text: 'EmergencyContact identifier', primaryKey: true, dataName: EmergencyContactId, dataAutoGenerated: true },
      { name: EmployeeId, type: Guid },
      { name: FirstName },
      { name: LastName },
      { name: PhoneNo },
      { name: RelationshipType, type: ^RelationshipType, dataName: RelationshipTypeCode }
    ]
  }

validation:
- employee: |
     public class EmployeeValidator : Validator<Employee>
     {
         public EmployeeValidator()
         {
             Property(x => x.EmployeeId);
             Property(x => x.Email).String(250);
             Property(x => x.FirstName).String(100);
             Property(x => x.LastName).String(100);
             Property(x => x.Gender).IsValid();
             Property(x => x.Birthday);
             Property(x => x.StartDate);
             Property(x => x.TerminationDate);
             Property(x => x.TerminationReason).IsValid();
             Property(x => x.PhoneNo).String(50);
             Property(x => x.Address).Entity(?);
         }
     }

- employeeArgs: |
     public class EmployeeArgsValidator : Validator<EmployeeArgs>
     {
         public EmployeeArgsValidator()
         {
             Property(x => x.FooBar).Mandatory();
         }
     }

- emergencyContact: |
     public class EmergencyContactValidator : Validator<EmergencyContact>
     {
         public EmergencyContactValidator()
         {
             Property(x => x.EmergencyContactId);
             Property(x => x.EmployeeId).Mandatory();
             Property(x => x.FirstName).String(100);
             Property(x => x.LastName).String(100);
             Property(x => x.PhoneNo).String(50);
             Property(x => x.RelationshipType).IsValid();
         }
     }

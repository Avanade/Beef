# Configuring the code-generation global settings
# - RefDataText generates a corresponding reference data text property for '$text=true' output.
# - WebApiRoutrePrefix will prefix/prepend all Entity and Operation routes with specified value.
# - WebApiAutoLocation indicates to set the HTTP response location for a create.
# - EventSubjectRoot specifies the root for the event subject.
# - EventSourceRoot specifies the root for the event source.
# - EventSourceKind will be a relative path URI.
# - EventActionFormat specifies past tense for the event action.
# - EventTransaction will ensure that the data update and event send will occur within a database transaction.
# - AutoImplement will default all operations to EntityFramework unless explicitly overridden.
refDataText: true
webApiRoutePrefix: ''
webApiAutoLocation: true
eventSubjectRoot: MyEf
eventSourceRoot: MyEf/Hr
eventSourceKind: Relative
eventActionFormat: PastTense
eventTransaction: true
autoImplement: EntityFramework
entities:
  # Creating an Employee base with only the subset of fields that we want returned from the GetByArgs.
  # - As we will be returning more than one we need the Collection and CollectionResult.
  # - Any Text with a handlebars '{{xxx}}' is a shortcut for .NET see comments; e.g. '<see cref="xxx"/>'.
  # - The identifier/primary key property(ies) must be specified.
  # - EntityFrameworkModel specifies the corresponding model and will also result in the generation of an IMapper implementation.
  # - Use of DataName is to reference the name of the column where different to the property name itself.
  # - Use of DataAutoGenerated indicates that the data source will automatically generate the value.
  # - A Type with a '^' prefix is shorthand for 'RefDataNamespace.*', this is how to reference a reference data entity (will default RefDataType to 'string' where not specified).
  # - A DateTimeTransform of DateOnly is used to indicate that the DateTime property should only be concerned with the Date component.
  # - The Termination property EntityFrameworkMapper is set to Flatten to leverage the TerminationDetail mapper to perform flattening (and corresponding expand).
- { name: EmployeeBase, text: '{{Employee}} base', collection: true, collectionResult: true, entityFrameworkModel: EfModel.Employee,
    properties: [
      { name: Id, type: Guid, text: '{{Employee}} identifier', primaryKey: true, dataName: EmployeeId, dataAutoGenerated: true },
      { name: Email, text: 'Unique {{Employee}} Email' },
      { name: FirstName },
      { name: LastName },
      { name: Gender, type: ^Gender, dataName: GenderCode },
      { name: Birthday, type: DateTime, dateTimeTransform: DateOnly },
      { name: StartDate, type: DateTime, dateTimeTransform: DateOnly },
      { name: Termination, type: TerminationDetail, entityFrameworkMapper: Flatten },
      { name: PhoneNo }
    ]
  }

  # Creating an Employee inheriting from EmployeeBase (DataMapper will also inherit).
  # - The Id property is re-specified, but marked as inherited, as is needed to assist with the operations that reference the PrimaryKey (will ensure not output into generated entity).
  # - The Validator is specified, which is then used by both the Create and Update operations.
  # - The AutoImplement specifies that operations should be auto-implemented using EntityFramework unless explicitly overridden.
  # - The WebApiRoutePrefix is not defined as it automatically defaults to pluarlized name; i.e. employees.
  # - The Behavior of CGUP is shorthand to auto-declare the standard 'C'reate, 'G'et, 'U'pdate and 'P'atch operations; note that Delete operation must be specified explicitly given the extended ValidatorCode requirement.
  # - The EntityFrameworkModel specifies the corresponding model and will be auto-implemented (defaults from configuration hierarchy) including mapping.
- { name: Employee, inherits: EmployeeBase, validator: EmployeeValidator, behavior: cgup, entityFrameworkModel: EfModel.Employee, entityFrameworkMapperBase: EmployeeBaseData,
    properties: [
      { name: Id, type: Guid, primaryKey: true, inherited: true, databaseIgnore: true, entityFrameworkMapper: Ignore },
      { name: Address, type: Address, dataConverter: ObjectToJsonConverter<T>, dataName: AddressJson, entityFrameworkMapper: Set },
      { name: EmergencyContacts, type: EmergencyContactCollection, entityFrameworkMapper: Map },
      { name: ETag },
      { name: ChangeLog, type: ChangeLog }
    ],
    operations: [
      # Delete operation
      # - Type is Delete that indicates that this is a delete operation.
      # - Explictly defining so that we can tie further validation to the identifier using specific ValidatorCode.
      # - Using the Property reference to copy configuration from the Entity itself.
      # - Providing further validation by using the Common extension method to invoke the EmployeeValidator.CanDelete.
      { name: Delete, type: Delete, webApiRoute: '{id}',
        parameters: [
          { name: Id, property: Id, isMandatory: true, validatorCode: Common(EmployeeValidator.CanDelete) }
        ]
      },
      # Search operation
      # - Type is GetColl that indicates that a collection is the expected result for the query-based operation.
      # - ReturnType is overriding the default Employee as we want to use EmployeeBase (reduced set of fields).
      # - Paging indicates that paging support is required and to be automatically enabled for the operation.
      # - Parameter specifies that a single parameter with a type of EmployeeArgs (defined later) is required and that the value should be validated.
      { name: GetByArgs, type: GetColl, paging: true, returnType: EmployeeBase,
        parameters: [
          { name: Args, type: EmployeeArgs, validator: EmployeeArgsValidator }
        ]
      },
      # Query operation
      # - Type is GetColl that indicates that a collection is the expected result for the query-based operation.
      # - ReturnType is overriding the default Employee as we want to use EmployeeBase (reduced set of fields).
      # - Paging indicates that paging support is required and to be automatically enabled for the operation.
      # - Query indicates that OData-like $filter/$order support is to be enabled.
      # - WebApiRoute specifies the route of 'query' to be used for the operation.
      { name: GetByQuery, type: GetColl, query: true, paging: true, returnType: EmployeeBase, webApiRoute: query },
      # Terminate operation
      # - Text is specified to override the default for an Update.
      # - Type is Update as it follows a similar operation pattern.
      # - ValueType is overridden with the TerminationDetail to use this instead of the default Employee.
      # - Validator is overridden to use the TerminationDetailValidator.
      # - WebApiRoute is overridden to be terminate.
      # - WebApiMethod is overriden to use HttpPost (an Update otherwise defaults to an HttpPut).
      # - EventSubject is overridden so that the action component will be Terminated.
      # - AutoImplement is None as this will be specifically implemented by the developer.
      # - An additional Id parameter is passed; in this instance we do not use the Operation.PrimaryKey as we require the value to be passed down all the layers.
      { name: Terminate, text: 'Terminates an existing {{Employee}}', type: Update, valueType: TerminationDetail, validator: TerminationDetailValidator, webApiRoute: '{id}/terminate', webApiMethod: HttpPost, eventSubject: 'Hr.Employee:Terminated', autoImplement: None,
        parameters: [
          { name: Id, property: Id, isMandatory: true, text: '{{Employee}} identifier' }
        ]
      }
    ]
  }

  # Creating a TerminationDetail with Date and Reason.
  # - EntityFrameworkModel ensures that the EF Mappings also get generated.
- { name: TerminationDetail, entityFrameworkModel: EfModel.Employee,
    properties: [
      { name: Date, type: DateTime, dateTimeTransform: DateOnly, dataName: TerminationDate },
      { name: Reason, type: ^TerminationReason, dataName: TerminationReasonCode }
    ]
  }

  # Creating an Address.
- { name: Address,
    properties: [
      { name: Street1 },
      { name: Street2 },
      { name: City },
      { name: State, type: ^USState },
      { name: PostCode }
    ]
  }

  # Creating a EmergencyContact and corresponding collection.
- { name: EmergencyContact, collection: true, entityFrameworkModel: EfModel.EmergencyContact,
    properties: [
      { name: Id, type: Guid, primaryKey: true, dataName: EmergencyContactId },
      { name: FirstName },
      { name: LastName },
      { name: PhoneNo },
      { name: Relationship, type: ^RelationshipType, dataName: RelationshipTypeCode }
    ]
  }

  # Creating an EmployeeArgs entity
  # - Genders will support a list (none or more) reference data values as per RefDataList specification.
  # - StartFrom, StartTo and IncludeTerminated are all nullable so we can tell whether a value was provided or not.
  # - The IsIncludeTerminated overrides the JsonName to meet the stated requirement name of includeTerminated.
- { name: EmployeeArgs,
    properties: [
      { name: FirstName },
      { name: LastName },
      { name: Genders, type: ^Gender, refDataList: true },
      { name: StartFrom, type: 'DateTime?', dateTimeTransform: DateOnly },
      { name: StartTo, type: 'DateTime?', dateTimeTransform: DateOnly },
      { name: IsIncludeTerminated, jsonName: includeTerminated, type: 'bool?' }
    ]
  }

  # Creating a PerformanceReview entity
  # - Collection and CollectionResult required by GetByEmployeeId operation.
  # - WebApiRoutePrefix is explicitly specified overridding the default.
  # - Behavior specifies that a Get, Update, Patch and Delete operation should be implemeted following the standard pattern.
  # - EntityFrameworkModel specifies the corresponding model and will be auto-implemented (defaults from configuration hierarchy).
  # - EmployeeId is made immutable within mapper by specifing DataOperationTypes as AnyExceptUpdate; i.e. the value will never map (override) on an update.
- { name: PerformanceReview, collection: true, collectionResult: true, webApiRoutePrefix: reviews, behavior: gupd, validator: PerformanceReviewValidator, entityFrameworkModel: EfModel.PerformanceReview,
    properties: [
      { name: Id, type: Guid, text: '{{PerformanceReview}} identifier', primaryKey: true, dataName: PerformanceReviewId, dataAutoGenerated: true },
      { name: EmployeeId, text: '{{Employee.Id}} (value is immutable)', type: Guid, dataOperationTypes: AnyExceptUpdate },
      { name: Date, type: DateTime },
      { name: Outcome, type: ^PerformanceOutcome, dataName: PerformanceOutcomeCode },
      { name: Reviewer },
      { name: Notes },
      { name: ETag },
      { name: ChangeLog, type: ChangeLog }
    ],
    operations: [
      # Operations (in addition to the Get, Update, Patch and Delete).
      # GetByEmployeeId - this requires the EmployeeId to be passed in via the URI which is filtered within the developer extension.
      # Create - this requires the EmployeeId to be passed in via the URI which will override the value in the entity within the Manager layer (as defined by LayerPassing value of ToManagerSet).
      # The WebApiRoute with a ! prefix informs code-gen to use as-is versus prepending with the WebApiRoutePrefix; otherwise, would incorrectly result in 'reviews/employees/{employeeId}'.
      { name: GetByEmployeeId, type: GetColl, paging: true, webApiRoute: '!employees/{employeeId}/reviews',
        parameters: [
          { name: EmployeeId, text: '{{Employee}} identifier', type: Guid, isMandatory: true }
        ]
      },
      { name: Create, type: Create, webApiRoute: '!employees/{employeeId}/reviews',
        parameters: [
          { name: EmployeeId, text: '{{Employee}} identifier', type: Guid, layerPassing: ToManagerSet, isMandatory: true }
        ]
      }
    ]
  }
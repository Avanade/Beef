/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Beef.Entities;
using Beef.RefData;
using Newtonsoft.Json;
using RefDataNamespace = My.Hr.Business.Entities;

namespace My.Hr.Business.Entities
{
    /// <summary>
    /// Represents the Address entity.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class Address : EntityBase, IEquatable<Address>
    {
        #region Privates

        private string? _street1;
        private string? _street2;
        private string? _city;
        private string? _stateSid;
        private string? _stateText;
        private string? _postCode;

        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the Street1.
        /// </summary>
        [JsonProperty("street1", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Street1")]
        public string? Street1
        {
            get => _street1;
            set => SetValue(ref _street1, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(Street1));
        }

        /// <summary>
        /// Gets or sets the Street2.
        /// </summary>
        [JsonProperty("street2", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Street2")]
        public string? Street2
        {
            get => _street2;
            set => SetValue(ref _street2, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(Street2));
        }

        /// <summary>
        /// Gets or sets the City.
        /// </summary>
        [JsonProperty("city", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="City")]
        public string? City
        {
            get => _city;
            set => SetValue(ref _city, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(City));
        }

        /// <summary>
        /// Gets or sets the <see cref="State"/> using the underlying Serialization Identifier (SID).
        /// </summary>
        [JsonProperty("state", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="State")]
        public string? StateSid
        {
            get => _stateSid;
            set => SetValue(ref _stateSid, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(State));
        }

        /// <summary>
        /// Gets the corresponding <see cref="State"/> text (read-only where selected).
        /// </summary>
        [JsonProperty("stateText", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string? StateText { get => _stateText ?? GetRefDataText(() => State); set => _stateText = value; }

        /// <summary>
        /// Gets or sets the State (see <see cref="RefDataNamespace.USState"/>).
        /// </summary>
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [Display(Name="State")]
        public RefDataNamespace.USState? State
        {
            get => _stateSid;
            set => SetValue(ref _stateSid, value, false, false, nameof(State)); 
        }

        /// <summary>
        /// Gets or sets the Post Code.
        /// </summary>
        [JsonProperty("postCode", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Post Code")]
        public string? PostCode
        {
            get => _postCode;
            set => SetValue(ref _postCode, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(PostCode));
        }

        #endregion

        #region IEquatable

        /// <summary>
        /// Determines whether the specified object is equal to the current object by comparing the values of all the properties.
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public override bool Equals(object? obj) => obj is Address val && Equals(val);

        /// <summary>
        /// Determines whether the specified <see cref="Address"/> is equal to the current <see cref="Address"/> by comparing the values of all the properties.
        /// </summary>
        /// <param name="value">The <see cref="Address"/> to compare with the current <see cref="Address"/>.</param>
        /// <returns><c>true</c> if the specified <see cref="Address"/> is equal to the current <see cref="Address"/>; otherwise, <c>false</c>.</returns>
        public bool Equals(Address? value)
        {
            if (value == null)
                return false;
            else if (ReferenceEquals(value, this))
                return true;

            return base.Equals((object)value)
                && Equals(Street1, value.Street1)
                && Equals(Street2, value.Street2)
                && Equals(City, value.City)
                && Equals(StateSid, value.StateSid)
                && Equals(PostCode, value.PostCode);
        }

        /// <summary>
        /// Compares two <see cref="Address"/> types for equality.
        /// </summary>
        /// <param name="a"><see cref="Address"/> A.</param>
        /// <param name="b"><see cref="Address"/> B.</param>
        /// <returns><c>true</c> indicates equal; otherwise, <c>false</c> for not equal.</returns>
        public static bool operator == (Address? a, Address? b) => Equals(a, b);

        /// <summary>
        /// Compares two <see cref="Address"/> types for non-equality.
        /// </summary>
        /// <param name="a"><see cref="Address"/> A.</param>
        /// <param name="b"><see cref="Address"/> B.</param>
        /// <returns><c>true</c> indicates not equal; otherwise, <c>false</c> for equal.</returns>
        public static bool operator != (Address? a, Address? b) => !Equals(a, b);

        /// <summary>
        /// Returns the hash code for the <see cref="Address"/>.
        /// </summary>
        /// <returns>The hash code for the <see cref="Address"/>.</returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(Street1);
            hash.Add(Street2);
            hash.Add(City);
            hash.Add(StateSid);
            hash.Add(PostCode);
            return base.GetHashCode() ^ hash.ToHashCode();
        }
    
        #endregion

        #region ICopyFrom
    
        /// <summary>
        /// Performs a copy from another <see cref="Address"/> updating this instance.
        /// </summary>
        /// <param name="from">The <see cref="Address"/> to copy from.</param>
        public override void CopyFrom(object from)
        {
            var fval = ValidateCopyFromType<Address>(from);
            CopyFrom(fval);
        }
        
        /// <summary>
        /// Performs a copy from another <see cref="Address"/> updating this instance.
        /// </summary>
        /// <param name="from">The <see cref="Address"/> to copy from.</param>
        public void CopyFrom(Address from)
        {
            if (from == null)
                throw new ArgumentNullException(nameof(from));

            CopyFrom((EntityBase)from);
            Street1 = from.Street1;
            Street2 = from.Street2;
            City = from.City;
            StateSid = from.StateSid;
            PostCode = from.PostCode;

            OnAfterCopyFrom(from);
        }

        #endregion

        #region ICloneable
        
        /// <summary>
        /// Creates a deep copy of the <see cref="Address"/>.
        /// </summary>
        /// <returns>A deep copy of the <see cref="Address"/>.</returns>
        public override object Clone()
        {
            var clone = new Address();
            clone.CopyFrom(this);
            return clone;
        }
        
        #endregion
        
        #region ICleanUp

        /// <summary>
        /// Performs a clean-up of the <see cref="Address"/> resetting property values as appropriate to ensure a basic level of data consistency.
        /// </summary>
        public override void CleanUp()
        {
            base.CleanUp();
            Street1 = Cleaner.Clean(Street1, StringTrim.UseDefault, StringTransform.UseDefault);
            Street2 = Cleaner.Clean(Street2, StringTrim.UseDefault, StringTransform.UseDefault);
            City = Cleaner.Clean(City, StringTrim.UseDefault, StringTransform.UseDefault);
            StateSid = Cleaner.Clean(StateSid);
            PostCode = Cleaner.Clean(PostCode, StringTrim.UseDefault, StringTransform.UseDefault);

            OnAfterCleanUp();
        }

        /// <summary>
        /// Indicates whether considered initial; i.e. all properties have their initial value.
        /// </summary>
        /// <returns><c>true</c> indicates is initial; otherwise, <c>false</c>.</returns>
        public override bool IsInitial
        {
            get
            {
                return Cleaner.IsInitial(Street1)
                    && Cleaner.IsInitial(Street2)
                    && Cleaner.IsInitial(City)
                    && Cleaner.IsInitial(StateSid)
                    && Cleaner.IsInitial(PostCode);
            }
        }

        #endregion

        #region PartialMethods
      
        partial void OnAfterCleanUp();

        partial void OnAfterCopyFrom(Address from);

        #endregion
    }
}

#pragma warning restore
#nullable restore
/*
 * This file is automatically generated; any changes will be lost. 
 */

namespace My.Hr.Business.Data;

/// <summary>
/// Provides the <see cref="EmployeeBase"/> data access.
/// </summary>
public partial class EmployeeBaseData
{

    /// <summary>
    /// Provides the <see cref="EmployeeBase"/> property and database column mapping.
    /// </summary>
    public partial class DbMapper : DatabaseMapper<EmployeeBase, DbMapper>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DbMapper"/> class.
        /// </summary>
        public DbMapper()
        {
            Property(s => s.Id, "EmployeeId").SetPrimaryKey(true);
            Property(s => s.Email);
            Property(s => s.FirstName);
            Property(s => s.LastName);
            Property(s => s.GenderSid, "GenderCode");
            Property(s => s.Birthday);
            Property(s => s.StartDate);
            Property(s => s.Termination).SetMapper(TerminationDetailData.DbMapper.Default!);
            Property(s => s.PhoneNo);
            DbMapperCtor();
        }
            
        partial void DbMapperCtor(); // Enables the DbMapper constructor to be extended.
    }

    /// <summary>
    /// Provides the <see cref="EmployeeBase"/> to Entity Framework <see cref="EfModel.Employee"/> mapping.
    /// </summary>
    public partial class EntityToModelEfMapper : Mapper<EmployeeBase, EfModel.Employee>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityToModelEfMapper"/> class.
        /// </summary>
        public EntityToModelEfMapper()
        {
            Map((s, d) => d.EmployeeId = s.Id, OperationTypes.Any, s => s.Id == default, d => d.EmployeeId = default);
            Map((s, d) => d.Email = s.Email, OperationTypes.Any, s => s.Email == default, d => d.Email = default);
            Map((s, d) => d.FirstName = s.FirstName, OperationTypes.Any, s => s.FirstName == default, d => d.FirstName = default);
            Map((s, d) => d.LastName = s.LastName, OperationTypes.Any, s => s.LastName == default, d => d.LastName = default);
            Map((s, d) => d.GenderCode = s.GenderSid, OperationTypes.Any, s => s.GenderSid == default, d => d.GenderCode = default);
            Map((s, d) => d.Birthday = s.Birthday, OperationTypes.Any, s => s.Birthday == default, d => d.Birthday = default);
            Map((s, d) => d.StartDate = s.StartDate, OperationTypes.Any, s => s.StartDate == default, d => d.StartDate = default);
            Flatten(s => s.Termination, OperationTypes.Any, s => s.Termination == default);
            Map((s, d) => d.PhoneNo = s.PhoneNo, OperationTypes.Any, s => s.PhoneNo == default, d => d.PhoneNo = default);
            EntityToModelEfMapperCtor();
        }

        partial void EntityToModelEfMapperCtor(); // Enables the constructor to be extended.
    }

    /// <summary>
    /// Provides the Entity Framework <see cref="EfModel.Employee"/> to <see cref="EmployeeBase"/> mapping.
    /// </summary>
    public partial class ModelToEntityEfMapper : Mapper<EfModel.Employee, EmployeeBase>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelToEntityEfMapper"/> class.
        /// </summary>
        public ModelToEntityEfMapper()
        {
            Map((s, d) => d.Id = (Guid)s.EmployeeId!, OperationTypes.Any, s => s.EmployeeId == default, d => d.Id = default);
            Map((s, d) => d.Email = (string?)s.Email!, OperationTypes.Any, s => s.Email == default, d => d.Email = default);
            Map((s, d) => d.FirstName = (string?)s.FirstName!, OperationTypes.Any, s => s.FirstName == default, d => d.FirstName = default);
            Map((s, d) => d.LastName = (string?)s.LastName!, OperationTypes.Any, s => s.LastName == default, d => d.LastName = default);
            Map((s, d) => d.GenderSid = (string?)s.GenderCode!, OperationTypes.Any, s => s.GenderCode == default, d => d.GenderSid = default);
            Map((s, d) => d.Birthday = (DateTime)s.Birthday!, OperationTypes.Any, s => s.Birthday == default, d => d.Birthday = default);
            Map((s, d) => d.StartDate = (DateTime)s.StartDate!, OperationTypes.Any, s => s.StartDate == default, d => d.StartDate = default);
            Expand<TerminationDetail>((d, v) => d.Termination = v, OperationTypes.Any, d => d.Termination = default);
            Map((s, d) => d.PhoneNo = (string?)s.PhoneNo!, OperationTypes.Any, s => s.PhoneNo == default, d => d.PhoneNo = default);
            ModelToEntityEfMapperCtor();
        }

        partial void ModelToEntityEfMapperCtor(); // Enables the constructor to be extended.
    }
}
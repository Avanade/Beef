/*
 * This file is automatically generated; any changes will be lost. 
 */

namespace My.Hr.Business.Data;

/// <summary>
/// Provides the <see cref="EmployeeBase"/> data access.
/// </summary>
public partial class EmployeeBaseData
{

    /// <summary>
    /// Provides the <see cref="EmployeeBase"/> property and database column mapping.
    /// </summary>
    public partial class DbMapper : DatabaseMapperEx<EmployeeBase, DbMapper>
    {
        /// <inheritdoc />
        protected override void OnMapToDb(EmployeeBase value, DatabaseParameterCollection parameters, OperationTypes operationType)
        {
            parameters.AddParameter("EmployeeId", value.Id).SetDirectionToOutputOnCreate(operationType);
            parameters.AddParameter("Email", value.Email);
            parameters.AddParameter("FirstName", value.FirstName);
            parameters.AddParameter("LastName", value.LastName);
            parameters.AddParameter("GenderCode", value.GenderSid);
            parameters.AddParameter("Birthday", value.Birthday);
            parameters.AddParameter("StartDate", value.StartDate);
            TerminationDetailData.DbMapper.Default.MapToDb(value.Termination, parameters, operationType);
            parameters.AddParameter("PhoneNo", value.PhoneNo);
            OnMapToDbEx(value, parameters, operationType);
        }

        /// <inheritdoc />
        protected override void OnMapFromDb(DatabaseRecord record, EmployeeBase value, OperationTypes operationType)
        {
            value.Id = record.GetValue<Guid>("EmployeeId");
            value.Email = record.GetValue<string?>("Email");
            value.FirstName = record.GetValue<string?>("FirstName");
            value.LastName = record.GetValue<string?>("LastName");
            value.GenderSid = record.GetValue<string?>("GenderCode");
            value.Birthday = record.GetValue<DateTime>("Birthday");
            value.StartDate = record.GetValue<DateTime>("StartDate");
            value.Termination = TerminationDetailData.DbMapper.Default.MapFromDb(record, operationType);
            value.PhoneNo = record.GetValue<string?>("PhoneNo");
            OnMapFromDbEx(record, value, operationType);
        }

        /// <inheritdoc />
        protected override void OnMapKeyToDb(CompositeKey key, DatabaseParameterCollection parameters)
        {
            key.AssertLength(1);
            parameters.AddParameter("EmployeeId", key.Args[0]);
            OnMapKeyToDbEx(key, parameters);
        }

        partial void OnMapToDbEx(EmployeeBase value, DatabaseParameterCollection parameters, OperationTypes operationType); // Enables the DbMapper.OnMapToDb to be extended.
        partial void OnMapFromDbEx(DatabaseRecord record, EmployeeBase value, OperationTypes operationType); // Enables the DbMapper.OnMapFromDb to be extended.
        partial void OnMapKeyToDbEx(CompositeKey key, DatabaseParameterCollection parameters); // Enables the DbMapper.OnMapKeyToDb to be extended.
    }

    /// <summary>
    /// Provides the <see cref="EmployeeBase"/> to Entity Framework <see cref="EfModel.Employee"/> mapping.
    /// </summary>
    public partial class EntityToModelEfMapper : Mapper<EmployeeBase, EfModel.Employee>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityToModelEfMapper"/> class.
        /// </summary>
        public EntityToModelEfMapper()
        {
            Map((s, d) => d.EmployeeId = s.Id, OperationTypes.Any, s => s.Id == default, d => d.EmployeeId = default);
            Map((s, d) => d.Email = s.Email, OperationTypes.Any, s => s.Email == default, d => d.Email = default);
            Map((s, d) => d.FirstName = s.FirstName, OperationTypes.Any, s => s.FirstName == default, d => d.FirstName = default);
            Map((s, d) => d.LastName = s.LastName, OperationTypes.Any, s => s.LastName == default, d => d.LastName = default);
            Map((s, d) => d.GenderCode = s.GenderSid, OperationTypes.Any, s => s.GenderSid == default, d => d.GenderCode = default);
            Map((s, d) => d.Birthday = s.Birthday, OperationTypes.Any, s => s.Birthday == default, d => d.Birthday = default);
            Map((s, d) => d.StartDate = s.StartDate, OperationTypes.Any, s => s.StartDate == default, d => d.StartDate = default);
            Flatten(s => s.Termination, OperationTypes.Any, s => s.Termination == default);
            Map((s, d) => d.PhoneNo = s.PhoneNo, OperationTypes.Any, s => s.PhoneNo == default, d => d.PhoneNo = default);
            EntityToModelEfMapperCtor();
        }

        partial void EntityToModelEfMapperCtor(); // Enables the constructor to be extended.
    }

    /// <summary>
    /// Provides the Entity Framework <see cref="EfModel.Employee"/> to <see cref="EmployeeBase"/> mapping.
    /// </summary>
    public partial class ModelToEntityEfMapper : Mapper<EfModel.Employee, EmployeeBase>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelToEntityEfMapper"/> class.
        /// </summary>
        public ModelToEntityEfMapper()
        {
            Map((s, d) => d.Id = (Guid)s.EmployeeId!, OperationTypes.Any, s => s.EmployeeId == default, d => d.Id = default);
            Map((s, d) => d.Email = (string?)s.Email!, OperationTypes.Any, s => s.Email == default, d => d.Email = default);
            Map((s, d) => d.FirstName = (string?)s.FirstName!, OperationTypes.Any, s => s.FirstName == default, d => d.FirstName = default);
            Map((s, d) => d.LastName = (string?)s.LastName!, OperationTypes.Any, s => s.LastName == default, d => d.LastName = default);
            Map((s, d) => d.GenderSid = (string?)s.GenderCode!, OperationTypes.Any, s => s.GenderCode == default, d => d.GenderSid = default);
            Map((s, d) => d.Birthday = (DateTime)s.Birthday!, OperationTypes.Any, s => s.Birthday == default, d => d.Birthday = default);
            Map((s, d) => d.StartDate = (DateTime)s.StartDate!, OperationTypes.Any, s => s.StartDate == default, d => d.StartDate = default);
            Expand<TerminationDetail>((d, v) => d.Termination = v, OperationTypes.Any, d => d.Termination = default);
            Map((s, d) => d.PhoneNo = (string?)s.PhoneNo!, OperationTypes.Any, s => s.PhoneNo == default, d => d.PhoneNo = default);
            ModelToEntityEfMapperCtor();
        }

        partial void ModelToEntityEfMapperCtor(); // Enables the constructor to be extended.
    }
}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using Beef.Validation;
using My.Hr.Business.Entities;
using My.Hr.Business.DataSvc;
using My.Hr.Business.Validation;
using RefDataNamespace = My.Hr.Business.Entities;

namespace My.Hr.Business
{
    /// <summary>
    /// Provides the <see cref="PerformanceReview"/> business functionality.
    /// </summary>
    public partial class PerformanceReviewManager : IPerformanceReviewManager
    {
        private readonly IPerformanceReviewDataSvc _dataService;

        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceReviewManager"/> class.
        /// </summary>
        /// <param name="dataService">The <see cref="IPerformanceReviewDataSvc"/>.</param>
        public PerformanceReviewManager(IPerformanceReviewDataSvc dataService)
            { _dataService = Check.NotNull(dataService, nameof(dataService)); PerformanceReviewManagerCtor(); }

        partial void PerformanceReviewManagerCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the specified <see cref="PerformanceReview"/>.
        /// </summary>
        /// <param name="id">The <see cref="Employee"/> identifier.</param>
        /// <returns>The selected <see cref="PerformanceReview"/> where found.</returns>
        public async Task<PerformanceReview?> GetAsync(Guid id) => await ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
            Cleaner.CleanUp(id);
            await id.Validate(nameof(id)).Mandatory().RunAsync(throwOnError: true).ConfigureAwait(false);
            return Cleaner.Clean(await _dataService.GetAsync(id).ConfigureAwait(false));
        }, BusinessInvokerArgs.Read).ConfigureAwait(false);

        /// <summary>
        /// Gets the <see cref="PerformanceReviewCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <param name="employeeId">The <see cref="Employee.Id"/>.</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>The <see cref="PerformanceReviewCollectionResult"/>.</returns>
        public async Task<PerformanceReviewCollectionResult> GetByEmployeeIdAsync(Guid employeeId, PagingArgs? paging) => await ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
            Cleaner.CleanUp(employeeId);
            return Cleaner.Clean(await _dataService.GetByEmployeeIdAsync(employeeId, paging).ConfigureAwait(false));
        }, BusinessInvokerArgs.Read).ConfigureAwait(false);

        /// <summary>
        /// Creates a new <see cref="PerformanceReview"/>.
        /// </summary>
        /// <param name="value">The <see cref="PerformanceReview"/>.</param>
        /// <param name="employeeId">The <see cref="Employee.Id"/>.</param>
        /// <returns>The created <see cref="PerformanceReview"/>.</returns>
        public async Task<PerformanceReview> CreateAsync(PerformanceReview value, Guid employeeId) => await ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
            await value.Validate().Mandatory().RunAsync(throwOnError: true).ConfigureAwait(false);

            value.EmployeeId = employeeId;
            Cleaner.CleanUp(value);
            await value.Validate().Entity().With<IValidator<PerformanceReview>>().RunAsync(throwOnError: true).ConfigureAwait(false);
            return Cleaner.Clean(await _dataService.CreateAsync(value).ConfigureAwait(false));
        }, BusinessInvokerArgs.Create).ConfigureAwait(false);

        /// <summary>
        /// Updates an existing <see cref="PerformanceReview"/>.
        /// </summary>
        /// <param name="value">The <see cref="PerformanceReview"/>.</param>
        /// <param name="id">The <see cref="Employee"/> identifier.</param>
        /// <returns>The updated <see cref="PerformanceReview"/>.</returns>
        public async Task<PerformanceReview> UpdateAsync(PerformanceReview value, Guid id) => await ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
            await value.Validate().Mandatory().RunAsync(throwOnError: true).ConfigureAwait(false);

            value.Id = id;
            Cleaner.CleanUp(value);
            await value.Validate().Entity().With<IValidator<PerformanceReview>>().RunAsync(throwOnError: true).ConfigureAwait(false);
            return Cleaner.Clean(await _dataService.UpdateAsync(value).ConfigureAwait(false));
        }, BusinessInvokerArgs.Update).ConfigureAwait(false);

        /// <summary>
        /// Deletes the specified <see cref="PerformanceReview"/>.
        /// </summary>
        /// <param name="id">The <see cref="Employee"/> identifier.</param>
        public async Task DeleteAsync(Guid id) => await ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
            Cleaner.CleanUp(id);
            await id.Validate(nameof(id)).Mandatory().RunAsync(throwOnError: true).ConfigureAwait(false);
            await _dataService.DeleteAsync(id).ConfigureAwait(false);
        }, BusinessInvokerArgs.Delete).ConfigureAwait(false);
    }
}

#pragma warning restore
#nullable restore
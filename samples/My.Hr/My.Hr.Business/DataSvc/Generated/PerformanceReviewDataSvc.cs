/*
 * This file is automatically generated; any changes will be lost. 
 */

namespace My.Hr.Business.DataSvc;

/// <summary>
/// Provides the <see cref="PerformanceReview"/> data repository services.
/// </summary>
public partial class PerformanceReviewDataSvc : IPerformanceReviewDataSvc
{
    private readonly IPerformanceReviewData _data;
    private readonly IRequestCache _cache;

    /// <summary>
    /// Initializes a new instance of the <see cref="PerformanceReviewDataSvc"/> class.
    /// </summary>
    /// <param name="data">The <see cref="IPerformanceReviewData"/>.</param>
    /// <param name="cache">The <see cref="IRequestCache"/>.</param>
    public PerformanceReviewDataSvc(IPerformanceReviewData data, IRequestCache cache)
        { _data = data.ThrowIfNull(); _cache = cache.ThrowIfNull(); PerformanceReviewDataSvcCtor(); }

    partial void PerformanceReviewDataSvcCtor(); // Enables additional functionality to be added to the constructor.

    /// <inheritdoc/>
    public Task<Result<PerformanceReview?>> GetAsync(Guid id) => Result.Go().CacheGetOrAddAsync(_cache, id, () => _data.GetAsync(id));

    /// <inheritdoc/>
    public Task<Result<PerformanceReviewCollectionResult>> GetByEmployeeIdAsync(Guid employeeId, PagingArgs? paging) => _data.GetByEmployeeIdAsync(employeeId, paging);

    /// <inheritdoc/>
    public Task<Result<PerformanceReview>> CreateAsync(PerformanceReview value)
    {
        return Result.GoAsync(_data.CreateAsync(value))
                     .Then(r => _cache.SetValue(r));
    }

    /// <inheritdoc/>
    public Task<Result<PerformanceReview>> UpdateAsync(PerformanceReview value)
    {
        return Result.GoAsync(_data.UpdateAsync(value))
                     .Then(r => _cache.SetValue(r));
    }

    /// <inheritdoc/>
    public Task<Result> DeleteAsync(Guid id)
    {
        return Result.Go(_cache.Remove<PerformanceReview>(id))
                     .ThenAsAsync(_ => _data.DeleteAsync(id));
    }
}
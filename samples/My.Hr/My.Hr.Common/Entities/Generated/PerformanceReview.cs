/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Beef.Entities;
using Newtonsoft.Json;

namespace My.Hr.Common.Entities
{
    /// <summary>
    /// Represents the Performance Review entity.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class PerformanceReview : IGuidIdentifier, IUniqueKey, IETag, IChangeLog
    {
        /// <summary>
        /// Gets or sets the <see cref="Employee"/> identifier.
        /// </summary>
        [JsonProperty("id", DefaultValueHandling = DefaultValueHandling.Include)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the <see cref="Employee.Id"/> (value is immutable).
        /// </summary>
        [JsonProperty("employeeId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public Guid EmployeeId { get; set; }

        /// <summary>
        /// Gets or sets the Date.
        /// </summary>
        [JsonProperty("date", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Gets or sets the Outcome (see <see cref="RefDataNamespace.PerformanceOutcome"/>).
        /// </summary>
        [JsonProperty("outcome", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string? Outcome { get; set; }

        /// <summary>
        /// Gets or sets the Reviewer.
        /// </summary>
        [JsonProperty("reviewer", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string? Reviewer { get; set; }

        /// <summary>
        /// Gets or sets the Notes.
        /// </summary>
        [JsonProperty("notes", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string? Notes { get; set; }

        /// <summary>
        /// Gets or sets the ETag.
        /// </summary>
        [JsonProperty("etag", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string? ETag { get; set; }

        /// <summary>
        /// Gets or sets the Change Log (see <see cref="Beef.Entities.ChangeLog"/>).
        /// </summary>
        [JsonProperty("changeLog", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public ChangeLog? ChangeLog { get; set; }

        /// <summary>
        /// Gets the list of property names that represent the unique key.
        /// </summary>
        public string[] UniqueKeyProperties => new string[] { nameof(Id) };
        
        /// <summary>
        /// Creates the <see cref="UniqueKey"/>.
        /// </summary>
        /// <returns>The <see cref="Beef.Entities.UniqueKey"/>.</returns>
        /// <param name="id">The <see cref="Id"/>.</param>
        public static UniqueKey CreateUniqueKey(Guid id) => new UniqueKey(id);

        /// <summary>
        /// Gets the <see cref="UniqueKey"/> (consists of the following property(s): <see cref="Id"/>).
        /// </summary>
        public UniqueKey UniqueKey => CreateUniqueKey(Id);
    }

    /// <summary>
    /// Represents the <see cref="PerformanceReview"/> collection.
    /// </summary>
    public partial class PerformanceReviewCollection : List<PerformanceReview> { }

    /// <summary>
    /// Represents the <see cref="PerformanceReview"/> collection result.
    /// </summary>
    public class PerformanceReviewCollectionResult : CollectionResult<PerformanceReviewCollection, PerformanceReview>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceReviewCollectionResult"/> class.
        /// </summary>
        public PerformanceReviewCollectionResult() { }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceReviewCollectionResult"/> class with <paramref name="paging"/>.
        /// </summary>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        public PerformanceReviewCollectionResult(PagingArgs? paging) : base(paging) { }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceReviewCollectionResult"/> class with a <paramref name="collection"/> of items to add.
        /// </summary>
        /// <param name="collection">A collection containing items to add.</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        public PerformanceReviewCollectionResult(IEnumerable<PerformanceReview> collection, PagingArgs? paging = null) : base(paging) => Result.AddRange(collection);
    }
}

#pragma warning restore
#nullable restore
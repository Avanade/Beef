/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Net;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json.Linq;
using Beef;
using Beef.AspNetCore.WebApi;
using Beef.Entities;
using My.Hr.Business;
using My.Hr.Business.Entities;
using RefDataNamespace = My.Hr.Business.Entities;

namespace My.Hr.Api.Controllers
{
    /// <summary>
    /// Provides the <see cref="PerformanceReview"/> Web API functionality.
    /// </summary>
    [Route("api")]
    public partial class PerformanceReviewController : ControllerBase
    {
        private readonly IPerformanceReviewManager _manager;

        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceReviewController"/> class.
        /// </summary>
        /// <param name="manager">The <see cref="IPerformanceReviewManager"/>.</param>
        public PerformanceReviewController(IPerformanceReviewManager manager)
            { _manager = Check.NotNull(manager, nameof(manager)); PerformanceReviewControllerCtor(); }

        partial void PerformanceReviewControllerCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the specified <see cref="PerformanceReview"/>.
        /// </summary>
        /// <param name="id">The <see cref="Employee"/> identifier.</param>
        /// <returns>The selected <see cref="PerformanceReview"/> where found.</returns>
        [HttpGet("reviews/{id}")]
        [ProducesResponseType(typeof(PerformanceReview), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NotFound)]
        public IActionResult Get(Guid id) =>
            new WebApiGet<PerformanceReview?>(this, () => _manager.GetAsync(id),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NotFound);

        /// <summary>
        /// Gets the <see cref="PerformanceReviewCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <param name="employeeId">The <see cref="Employee.Id"/>.</param>
        /// <returns>The <see cref="PerformanceReviewCollection"/></returns>
        [HttpGet("employees/{employeeId}/reviews")]
        [ProducesResponseType(typeof(PerformanceReviewCollection), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult GetByEmployeeId(Guid employeeId) =>
            new WebApiGet<PerformanceReviewCollectionResult, PerformanceReviewCollection, PerformanceReview>(this, () => _manager.GetByEmployeeIdAsync(employeeId, WebApiQueryString.CreatePagingArgs(this)),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NoContent);

        /// <summary>
        /// Creates a new <see cref="PerformanceReview"/>.
        /// </summary>
        /// <param name="value">The <see cref="PerformanceReview"/>.</param>
        /// <param name="employeeId">The <see cref="Employee.Id"/>.</param>
        /// <returns>The created <see cref="PerformanceReview"/>.</returns>
        [HttpPost("employees/{employeeId}/reviews")]
        [ProducesResponseType(typeof(PerformanceReview), (int)HttpStatusCode.Created)]
        public IActionResult Create([FromBody] PerformanceReview value, Guid employeeId) =>
            new WebApiPost<PerformanceReview>(this, () => _manager.CreateAsync(WebApiActionBase.Value(value), employeeId),
                operationType: OperationType.Create, statusCode: HttpStatusCode.Created, alternateStatusCode: null, locationUri: (r) => new Uri($"/api/reviews/{r.Id}", UriKind.Relative));

        /// <summary>
        /// Updates an existing <see cref="PerformanceReview"/>.
        /// </summary>
        /// <param name="value">The <see cref="PerformanceReview"/>.</param>
        /// <param name="id">The <see cref="Employee"/> identifier.</param>
        /// <returns>The updated <see cref="PerformanceReview"/>.</returns>
        [HttpPut("reviews/{id}")]
        [ProducesResponseType(typeof(PerformanceReview), (int)HttpStatusCode.OK)]
        public IActionResult Update([FromBody] PerformanceReview value, Guid id) =>
            new WebApiPut<PerformanceReview>(this, () => _manager.UpdateAsync(WebApiActionBase.Value(value), id),
                operationType: OperationType.Update, statusCode: HttpStatusCode.OK, alternateStatusCode: null);

        /// <summary>
        /// Patches an existing <see cref="PerformanceReview"/>.
        /// </summary>
        /// <param name="value">The <see cref="JToken"/> that contains the patch content for the <see cref="PerformanceReview"/>.</param>
        /// <param name="id">The <see cref="Employee"/> identifier.</param>
        /// <returns>The patched <see cref="PerformanceReview"/>.</returns>
        [HttpPatch("reviews/{id}")]
        [ProducesResponseType(typeof(PerformanceReview), (int)HttpStatusCode.OK)]
        public IActionResult Patch([FromBody] JToken value, Guid id) =>
            new WebApiPatch<PerformanceReview>(this, value, () => _manager.GetAsync(id), (__value) => _manager.UpdateAsync(__value, id),
                operationType: OperationType.Update, statusCode: HttpStatusCode.OK, alternateStatusCode: null);

        /// <summary>
        /// Deletes the specified <see cref="PerformanceReview"/>.
        /// </summary>
        /// <param name="id">The <see cref="Employee"/> identifier.</param>
        [HttpDelete("reviews/{id}")]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult Delete(Guid id) =>
            new WebApiDelete(this, () => _manager.DeleteAsync(id),
                operationType: OperationType.Delete, statusCode: HttpStatusCode.NoContent);
    }
}

#pragma warning restore
#nullable restore
# Configuring the code-generation global settings
# - EntityScope of Autonomous will generate both business and common entities to allow each to be used autonomously; versus using shared common.
# - RefDataText generates a corresponding reference data text property for '$text=true' output.
# - EventSubjectRoot specifies the root for the event subject.
# - EventSubjectFormat specifies the name only; i.e. not include the key.
# - EventActionFormat specifies past tense for the event action.
# - EventSourceRoot specifies the root for the event source.
# - EventSourceKind will be a relative path URI.
# - EventOutbox indicates that the code-generated event publish will occur in the Data-layer and should use the database to transactionally persist the event(s).
# - AppBasedAgentArgs indicates to create a domain specific AgentArgs to simplify dependency injection usage.
# - WebApiAutoLocation indicate to set the HTTP response location for a create.
# - DatabaseSchema defaults the database schema name.
entityScope: Autonomous
refDataText: true
eventSubjectRoot: My
eventSubjectFormat: NameOnly
eventActionFormat: PastTense
eventSourceRoot: My/Hr
eventSourceKind: Relative
eventOutbox: Database
appBasedAgentArgs: true
webApiAutoLocation: true
webApiRoutePrefix: api
databaseSchema: Hr
entities:
  # Creating an Employee base with only the subset of fields that we want returned from the GetByArgs.
  # - As we will be returning more than one we need the Collection and CollectionResult.
  # - Any Text with a handlebars '{{xxx}}' is a shortcut for .NET see comments; e.g. '<see cref="xxx"/>'.
  # - ExcludeAll is used so only the entity (not other layers are generated); with the exception of ExcludeData of RequiresMapper where it is a special case to output a DataMapper.
  # - Use of DataName is to reference the name of the column where different to the property name iteself.
  # - Use of DataAutoGenerated indicates that the data source will automatically generate the value.
  # - A Type with a '^' prefix is shorthand for 'RefDataNamespace.*', this is how to reference a reference data entity (will default RefDataType to 'string' where not specified).
  # - A DateTimeTransform of DateOnly is used to indicate that the DateTime property should only be concerned with the Date component.
  # - AutoImplement of Database will ensure that the DbMapper is generated; used by the Employee.Get/Create/Update.
  # - By specifying the EntityFrameworkModel the EfMapper (mapping to defined type will be mapped) will also be generated; used by the Employee.GetByArgs.
  # - The Termination property EntityFrameworkMapper is set to Skip as this cannot be automatically generated; custom code will need to be developed to handle; used by the Employee.GetByArgs.
- { name: EmployeeBase, text: '{{Employee}} base', collection: true, collectionResult: true, excludeAll: true, excludeData: RequiresMapper, autoImplement: Database, entityFrameworkModel: EfModel.Employee,
    properties: [
      { name: Id, type: Guid, text: '{{Employee}} identifier', uniqueKey: true, dataName: EmployeeId, dataAutoGenerated: true },
      { name: Email, text: 'Unique {{Employee}} Email' },
      { name: FirstName },
      { name: LastName },
      { name: Gender, type: ^Gender, dataName: GenderCode },
      { name: Birthday, type: DateTime, dateTimeTransform: DateOnly },
      { name: StartDate, type: DateTime, dateTimeTransform: DateOnly },
      { name: Termination, type: TerminationDetail, databaseMapper: TerminationDetailData.DbMapper, entityFrameworkMapper: Skip },
      { name: PhoneNo }
    ]
  }

  # Creating an Employee inheriting from EmployeeBase (DataMapper will also inherit).
  # - The Id is re-specified, but marked as inherited, as is needed to assist with the operations that reference the UniqueKey.
  # - The Validator is specified, which is then used by both the Create and Update operations.
  # - The AutoImplement specifies that operations should be auto-implemented using Database (ADO.NET) unless explicitly overridden.
  # - The WebApiRoutePrefix is defined, which is in turn extended by each operation.
  # - The EntityFrameworkModel is required so that the GetByArgs code-gen knows what EfModel is to be used; however, DataEntityFrameworkCustomMapper is also used so that a corresponding EfMapper is not output (not required).
  # - ETag and ChangeLog are special case and Beef will automatically map between RowVersion and other Audit columns where they exist.
- { name: Employee, inherits: EmployeeBase, validator: EmployeeValidator, webApiRoutePrefix: employees, autoImplement: Database, databaseMapperInheritsFrom: EmployeeBaseData.DbMapper, entityFrameworkModel: EfModel.Employee, entityFrameworkCustomMapper: true, 
    properties: [
      { name: Id, text: '{{Employee}} identifier', type: Guid, uniqueKey: true, inherited: true, databaseIgnore: true },
      { name: Address, type: Address, dataConverter: 'ObjectToJsonConverter{T}', dataName: AddressJson },
      { name: EmergencyContacts, type: EmergencyContactCollection, databaseIgnore: true },
      { name: ETag },
      { name: ChangeLog, type: ChangeLog }
    ],
    operations: [
      # CRUD operations:
      # - Get - Get by unique identifier which it infers from the properties marked as UniqueKey; data access cannot be automatically implemented given complexity.
      # - Create/Update/Patch - infers UniqueKey where appropriate; data access cannot be automatically implemented given complexity (Patch is Controller-only, reuses Get and Update to perform).
      # - Delete - explictly defining so that we can tie further validation to the identifier check.
      # - Using the Property attribute to copy configuration from the Entity itself.
      # - Providing further validation by using the Common extension method to invoke the EmployeeValidator.CanDelete.
      { name: Get, type: Get, uniqueKey: true, webApiRoute: '{id}', autoImplement: None },
      { name: Create, type: Create, autoImplement: None },
      { name: Update, type: Update, uniqueKey: true, webApiRoute: '{id}', autoImplement: None },
      { name: Patch, type: Patch, uniqueKey: true, webApiRoute: '{id}' },
      { name: Delete, type: Delete, webApiRoute: '{id}',
        parameters: [
          { name: Id, property: Id, isMandatory: true, validatorCode: Common(EmployeeValidator.CanDelete) }
        ]
      },
      # Search operation
      # - OperationType is GetColl which indicates that a collection is the expected result.
      # - ReturnType is overriding the default Employee as we want to use EmployeeBase (reduced set of fields).
      # - PagingArgs indicates to Beef that paging support is required and to be automatically enabled for the operation.
      # - AutoImplement of EntityFramework informs code-gen to output EntityFramework code versus database stored procedures.
      # - Parameter defines the parameter being the EmployeeArgs (defined) and that the value should be validated.
      { name: GetByArgs, type: GetColl, paging: true, returnType: EmployeeBase, autoImplement: EntityFramework,
        parameters: [
          { name: Args, type: EmployeeArgs, validator: EmployeeArgsValidator }
        ]
      },
      # Terminate operation
      # - Text is specified to override the default for an Update.
      # - OperationType is Update as it follows a similar pattern.
      # - ValueType is overridden with the TerminationDetail to use this instead of the default Employee.
      # - Validator is overridden to use the TerminationDetailValidator.
      # - WebApiMethod is overriden to use HttpPost (an Update otherwise defaults to an HttpPut).
      # - EventSubject is overridden so that the action component will be Terminated.
      # - AutoImplement is None as this will be implemented by the developer.
      # - An additional Id parameter is passed; in this instance we do not use the UniqueKey as we require the value to be passed down all the layers.
      { name: Terminate, text: 'Terminates an existing {{Employee}}', type: Update, valueType: TerminationDetail, validator: TerminationDetailValidator, webApiRoute: '{id}/terminate', webApiMethod: HttpPost, eventSubject: 'Hr.Employee:Terminated', autoImplement: None,
        parameters: [
          { name: Id, type: Guid, text: '{{Employee}} identifier' }
        ]
      }
    ]
  }

  # Creating a TerminationDetail with Date and Reason.
  # - ExcludeAll is used so only the entity (not other layers are generated); with the exception of ExcludeData of RequiresMapper where it is a special case to output a DataMapper.
  # - The EF AutoMapper mappings will have to be custom added to the EmployeBaseData logic.
- { name: TerminationDetail, excludeAll: true, excludeData: RequiresMapper, autoImplement: Database,
    properties: [
      { name: Date, type: DateTime, dateTimeTransform: DateOnly, dataName: TerminationDate },
      { name: Reason, type: ^TerminationReason, dataName: TerminationReasonCode }
    ]
  }

  # Creating an Address.
- { name: Address,
    properties: [
      { name: Street1 },
      { name: Street2 },
      { name: City },
      { name: State, type: ^USState },
      { name: PostCode }
    ]
  }

  # Creating a EmergencyContact and corresponding collection.
  # - ExcludeData of RequiresMapper is a special case to specifically output a DataMapper.
- { name: EmergencyContact, collection: true, excludeData: RequiresMapper, autoImplement: Database,
    properties: [
      { name: Id, type: Guid, uniqueKey: true, dataName: EmergencyContactId },
      { name: FirstName },
      { name: LastName },
      { name: PhoneNo },
      { name: Relationship, type: ^RelationshipType, dataName: RelationshipTypeCode }
    ]
  }

  # Creating an EmployeeArgs entity
  # - Genders will support a list (none or more) reference data values.
  # - StartFrom, StartTo and IncludeTerminated are all Nullable so we can tell whether a value was provided or not.
  # - The IsIncludeTerminated overrides the JsonName to meet the stated requirement name of includeTerminated.
- { name: EmployeeArgs, text: '{{Employee}} search arguments',
    properties: [
      { name: FirstName },
      { name: LastName },
      { name: Genders, type: ^Gender, refDataList: true },
      { name: StartFrom, type: 'DateTime?', dateTimeTransform: DateOnly },
      { name: StartTo, type: 'DateTime?', dateTimeTransform: DateOnly },
      { name: IsIncludeTerminated, jsonName: includeTerminated, type: 'bool?' }
    ]
  }

  # Creating a PerformanceReview entity
  # - Collection and CollectionResult required by GetByEmployeeId operation.
  # - WebApiRoutPrefix does not include entity as this will differ per operation (where more explicitly stated).
  # - Default is to AutoImplement using EntityFramework against the EfModel.PerformanceReview generated from the database.
  # - EmployeeId is made immutable within mapper by specifing DataOperationTypes as AnyExceptUpdate; i.e. the value will never map (override) on an update.
- { name: PerformanceReview, collection: true, collectionResult: true, validator: PerformanceReviewValidator, autoImplement: EntityFramework, entityFrameworkModel: EfModel.PerformanceReview,
    properties: [
      { name: Id, type: Guid, text: '{{Employee}} identifier', uniqueKey: true, dataName: PerformanceReviewId, dataAutoGenerated: true },
      { name: EmployeeId, text: '{{Employee.Id}} (value is immutable)', type: Guid, dataOperationTypes: AnyExceptUpdate },
      { name: Date, type: DateTime },
      { name: Outcome, type: ^PerformanceOutcome, dataName: PerformanceOutcomeCode },
      { name: Reviewer },
      { name: Notes },
      { name: ETag },
      { name: ChangeLog, type: ChangeLog, isEntity: true }
    ],
    operations: [
      # Operations
      # Get - this is a simple Get by unique key (being the Id) which will be automatically implemented.
      # GetByEmployeeId - this requires the EmployeeId to be passed in via the URI which is filtered within the developer extension.
      # Create - this requires the EmployeeId to be passed in via the URI which will override the value in the entity within the Manager layer (as defined by LayerPassing value of ToManagerSet).
      # Update/Patch/Delete - are all automatically implemented as they all simply follow the standard pattern.
      { name: Get, type: Get, uniqueKey: true, webApiRoute: 'reviews/{id}' },
      { name: GetByEmployeeId, type: GetColl, paging: true, webApiRoute: 'employees/{employeeId}/reviews',
        parameters: [
          { name: EmployeeId, text: '{{Employee.Id}}', type: Guid }
        ]
      },
      { name: Create, type: Create, webApiRoute: 'employees/{employeeId}/reviews',
        parameters: [
          { name: EmployeeId, text: '{{Employee.Id}}', type: Guid, layerPassing: ToManagerSet }
        ]
      },
      { name: Update, type: Update, uniqueKey: true, webApiRoute: 'reviews/{id}' },
      { name: Patch, type: Patch, uniqueKey: true, webApiRoute: 'reviews/{id}' },
      { name: Delete, type: Delete, uniqueKey: true, webApiRoute: 'reviews/{id}' }
    ]
  }
<?xml version="1.0" encoding="utf-8"?>
<CodeGeneration Schema="Demo" CdcSchema="DemoCdc" EventSubjectFormat="NameOnly" EventSourceKind="Relative" EventSourceRoot="/cdc" EventActionFormat="PastTense" EventOutbox="true" HasBeefDbo="false" CdcIdentifierMapping="true" AutoDotNetRename="SnakeKebabToPascalCase" CdcExcludeColumnsFromETag="legacy_system_code" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/Avanade/Beef/master/tools/Beef.CodeGen.Core/Schema/codegen.table.xsd">
  <!-- New "Query" configuration. -->
  <Query Name="Table" Schema="Test" View="true" ViewName="vwTestQuery" ExcludeColumns="CreatedBy, UpdatedBy" Permission="TestSec">
    <QueryJoin Name="Person" Schema="Demo" ExcludeColumns="CreatedDate, UpdatedDate" AliasColumns="RowVersion^RowVersionP">
      <QueryJoinOn Name="PersonId" ToColumn="TableId" />
    </QueryJoin>
  </Query>

  <!-- Override the OrgUnitId to bypass the automatic handling as already applied wihin the underlying view. -->
  <Table Name="vwTestQuery" Schema="Test" ColumnNameOrgUnitId="N/A">
    <StoredProcedure Name="GetByArgs" Type="GetAll" StoredProcedureName="spTestQueryGetByArgs">
      <Parameter Name="Name" IsNullable="true" Operator="LIKE" />
    </StoredProcedure>
  </Table>

  <Table Name="Table" Schema="Test" EfModel="true"/>
  <Table Name="Table2" Schema="Test" Get="true" Create="true" Update="true" Delete="true" Upsert="true" />
  <Table Name="Table3" Schema="Test" Get="true" Create="true" Update="true" Delete="true" Upsert="true" />

  <!-- Set up CDC for primary table Legacy.Contact. -->
  <Cdc Name="Contact" Schema="Legacy" EventSubject="Legacy.Contact" EventSubjectFormat="NameAndKey" IdentifierMapping="true" IdentifierMappingColumns="AlternateContactId^Contact" AliasColumns="ContactId^CID" ExcludeColumnsFromETag="legacy_system_code">
    <!-- Set up secondary One-To-One relationship from Legacy.Contact to Legacy.Address (1:1).
         Join on Address.Id = Contact.AddressId. -->
    <CdcJoin Name="Address" JoinCardinality="OneToOne" IdentifierMapping="true" IdentifierMappingColumns="AlternateAddressId^Address" AliasColumns="Id^AID">
      <CdcJoinOn Name="Id" ToColumn="AddressId" />
    </CdcJoin>
    
    <!-- Set up inner join relationship from Legacy.Contact to Legacy.ContactMapping.
         Left Outer Join (does not have to exist) on ContactMapping.ContactId = Contact.ContactId. 
         Only include the joined 'UniqueId' column. -->
    <CdcJoin Name="ContactMapping" Type="Left" IncludeColumns="UniqueId">
      <CdcJoinOn Name="ContactId" />
    </CdcJoin>
  </Cdc>

  <!-- Set up CDC for primary table Legacy.Posts. 
       Relational hierarchy: Legacy.Posts
                              - Legacy.Comments (1:n)
                                 - Legacy.Tags (1:n)
                              - Legacy.Tags (1:n). -->
  <Cdc Name="Posts" Schema="Legacy" EventSubject="Legacy.Post" EventSubjectFormat="NameOnly">
    <!-- Set up secondary One-To-Many relationship from Legacy.Posts to Legacy.Comments (1:n).
         Join on Comments.PostsId = Posts.PostsId. -->
    <CdcJoin Name="Comments" Schema="Legacy" JoinTo="Posts">
      <CdcJoinOn Name="PostsId" ToColumn="PostsId" />
    </CdcJoin>
    
    <!-- Set up secondary One-To-Many relationship from Legacy.Comments to Legacy.Tags (1:n).
         Name as 'CommentsTags' for uniqueness for join referencing.
         Exclude the 'ParentType' column as not necessary for publishing (i.e. internal to database).
         Rename 'ParentId' column to `CommentsId`.
         Join on Tags.ParentType = 'C' AND Tags.ParentId = Comments.CommentsId. -->
    <CdcJoin Name="CommentsTags" Schema="Legacy" TableName="Tags" JoinTo="Comments" ExcludeColumns="ParentType" AliasColumns="ParentId^CommentsId">
      <CdcJoinOn Name="ParentType" ToStatement="'C'" />
      <CdcJoinOn Name="ParentId" ToColumn="CommentsId" />
    </CdcJoin>
    
    <!-- Set up secondary One-To-Many relationship from Legacy.Posts to Legacy.Tags (1:n).
         Name as 'PostsTags' for uniqueness for join referencing.
         Exclude the 'ParentType' column as not necessary for publishing (i.e. internal to database).
         Rename 'ParentId' column to `PostsId`.
         Join on Tags.ParentType = 'P' AND Tags.ParentId = Posts.PostsId. -->
    <CdcJoin Name="PostsTags" Schema="Legacy" TableName="Tags" JoinTo="Posts" ExcludeColumns="ParentType" AliasColumns="ParentId^PostsId">
      <CdcJoinOn Name="ParentType" ToStatement="'P'" />
      <CdcJoinOn Name="ParentId" ToColumn="PostsId" />
    </CdcJoin>
  </Cdc>
  
  <!-- Set up CDC for primary table Demo.Person (this is a _non-legacy_ scenario).
       Relational hierarchy is not important as the primary table *is* (must be) updated always (ETag and Audit columns); therefore, they can be ignored.
       Will retrieve the Id column only as the Get Business-logic will be used to retrieve and publish (as this enables the required Entity DTO). -->
  <Cdc Name="Person" Schema="Demo" IncludeColumns="PersonId" EventSubject="Demo.Cdc.Person" DataCtorParams="Beef.Demo.Business.IPersonManager" />

  <!-- As above for Person2; validate logical delete. -->
  <Cdc Name="Person2" Schema="Demo" EventSubject="Demo.Cdc.Person2" IncludeColumnsOnDelete="UpdatedBy, UpdatedDate" ExcludeHostedService="true" />

  <!-- Special test to generate all variations. -->
  <Table Name="Table" Schema="Test" Create="true" Update="true" Upsert="true" Delete="true" Merge="true" Udt="true" GetAll="true" GetAllOrderBy="Name Des" ExcludeColumns="Other" OrgUnitImmutable="true" Permission="TestSec">
    <StoredProcedure Name="GetByArgs" Type="GetAll" ExcludeColumns="Count">
      <Parameter Name="Name" IsNullable="true" Operator="LIKE" />
      <Parameter Name="MinCount" Operator="GE" Column="Count" />
      <Parameter Name="MaxCount" Operator="LE" Column="Count" IsNullable="true" />
    </StoredProcedure>
    <StoredProcedure Name="Get" Type="Get" WithHints="NOLOCK">
      <Execute Statement="EXEC Demo.Before" Location="Before" />
      <Execute Statement="EXEC Demo.After" />
    </StoredProcedure>
    <StoredProcedure Name="Update" Type="Update" ExcludeColumns="" />
  </Table>

  <!-- Reference data stored procedures -->
  <Table Name="Gender" Schema="Ref" GetAll="true" Get="true" Create="true" Update="true" />
  <Table Name="Country" Schema="Ref" GetAll="true" />
  <Table Name="USState" Schema="Ref" GetAll="true" />

  <!-- Reference data entity framework -->
  <Table Name="EyeColor" Schema="Ref" EfModel="true" />
  <Table Name="Status" Schema="Ref" EfModel="true" />

  <!-- Master data stored procedures. -->
  <Table Name="Person" Schema="Demo" Get="true" Create="true" Update="true" Delete="true" EfModel="true">
    <StoredProcedure Name="GetAll" Paging="true">
      <OrderBy Name="LastName" Order="Asc"/>
      <OrderBy Name="FirstName" Order="Asc"/>
    </StoredProcedure>
    <StoredProcedure Name="GetByArgs" Paging="true">
      <Parameter Name="FirstName" IsNullable="true" IsCollection="false" Operator="LIKE" />
      <Parameter Name="LastName" IsNullable="true" IsCollection="false" Operator="LIKE" />
      <Parameter Name="GenderId" IsNullable="true" IsCollection="true" />
      <OrderBy Name="LastName" Order="Asc"/>
      <OrderBy Name="FirstName" Order="Asc"/>
    </StoredProcedure>
    <StoredProcedure Name="GetDetailByArgs" Paging="true" IntoTempTable="true">
      <Parameter Name="FirstName" IsNullable="true" IsCollection="false" Operator="LIKE" />
      <Parameter Name="LastName" IsNullable="true" IsCollection="false" Operator="LIKE" />
      <Parameter Name="GenderId" IsNullable="true" IsCollection="true" />
      <OrderBy Name="LastName" Order="Asc"/>
      <OrderBy Name="FirstName" Order="Asc"/>
      <Execute Statement="EXEC [Demo].[spWorkHistoryGetUsingTempTable]"/>
    </StoredProcedure>
    <StoredProcedure Name="GetDetail" Type="Get">
      <Execute Statement="EXEC [Demo].[spWorkHistoryGetByPersonId] @PersonId" />
    </StoredProcedure>
    <StoredProcedure Name="UpdateDetail" Type="Update" ReselectStatement="EXEC [Demo].[spPersonGetDetail] @PersonId">
      <Parameter Name="WorkHistoryList" SqlType="[Demo].[udtWorkHistoryList] READONLY" />
      <Execute Statement="EXEC [Demo].[spWorkHistoryMerge] @PersonId, @WorkHistoryList" Location="After" />
    </StoredProcedure>
  </Table>

  <Table Name="WorkHistory" Schema="Demo" Udt="true" Tvp="WorkHistory" UdtExcludeColumns="PersonId">
    <StoredProcedure Name="GetByPersonId" Type="GetAll">
      <Parameter Name="PersonId" />
      <OrderBy Name="StartDate" Order="Desc" />
    </StoredProcedure>
    <StoredProcedure Name="Merge" Type="Merge" MergeOverrideIdentityColumns="Name">
      <Parameter Name="PersonId" SqlType="UNIQUEIDENTIFIER"/>
    </StoredProcedure>
    <StoredProcedure Name="GetUsingTempTable" Type="GetAll">
      <Where Statement="[PersonId] IN (SELECT [PersonId] from #p)" />
      <OrderBy Name="PersonId" Order="Asc" />
      <OrderBy Name="StartDate" Order="Desc" />
    </StoredProcedure>
  </Table>

  <!-- Check the generated output for the IsDeleted. -->
  <Table Name="Person2" Schema="Demo" Create="true" Update="true" Upsert="true" Delete="true" Get="true" GetAll="true" />

  <!-- Basic table with no row version or change log. -->
  <Table Name="Contact" Schema="Demo" EfModel="true" />
</CodeGeneration>
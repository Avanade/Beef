/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Business.DataSvc
{
    /// <summary>
    /// Provides the <see cref="PostalInfo"/> data repository services.
    /// </summary>
    public partial class PostalInfoDataSvc : IPostalInfoDataSvc
    {
        private readonly IPostalInfoData _data;
        private readonly IEventPublisher _events;

        /// <summary>
        /// Initializes a new instance of the <see cref="PostalInfoDataSvc"/> class.
        /// </summary>
        /// <param name="data">The <see cref="IPostalInfoData"/>.</param>
        /// <param name="events">The <see cref="IEventPublisher"/>.</param>
        public PostalInfoDataSvc(IPostalInfoData data, IEventPublisher events)
            { _data = data ?? throw new ArgumentNullException(nameof(data)); _events = events ?? throw new ArgumentNullException(nameof(events)); PostalInfoDataSvcCtor(); }

        partial void PostalInfoDataSvcCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the specified <see cref="PostalInfo"/>.
        /// </summary>
        /// <param name="country">The Country.</param>
        /// <param name="state">The State.</param>
        /// <param name="city">The City.</param>
        /// <returns>The selected <see cref="PostalInfo"/> where found.</returns>
        public Task<PostalInfo?> GetPostCodesAsync(RefDataNamespace.Country? country, string? state, string? city) => _data.GetPostCodesAsync(country, state, city);

        /// <summary>
        /// Creates a new <see cref="PostalInfo"/>.
        /// </summary>
        /// <param name="value">The <see cref="PostalInfo"/>.</param>
        /// <param name="country">The Country.</param>
        /// <param name="state">The State.</param>
        /// <param name="city">The City.</param>
        /// <returns>The created <see cref="PostalInfo"/>.</returns>
        public Task<PostalInfo> CreatePostCodesAsync(PostalInfo value, RefDataNamespace.Country? country, string? state, string? city) => DataSvcInvoker.Current.InvokeAsync(this, async _ =>
        {
            var __result = await _data.CreatePostCodesAsync(value ?? throw new ArgumentNullException(nameof(value)), country, state, city).ConfigureAwait(false);
            _events.PublishValueEvent(__result, new Uri($"/postalinfo/", UriKind.Relative), $"Demo.PostalInfo", "Create");
            return __result;
        }, new InvokerArgs { EventPublisher = _events });

        /// <summary>
        /// Updates an existing <see cref="PostalInfo"/>.
        /// </summary>
        /// <param name="value">The <see cref="PostalInfo"/>.</param>
        /// <param name="country">The Country.</param>
        /// <param name="state">The State.</param>
        /// <param name="city">The City.</param>
        /// <returns>The updated <see cref="PostalInfo"/>.</returns>
        public Task<PostalInfo> UpdatePostCodesAsync(PostalInfo value, RefDataNamespace.Country? country, string? state, string? city) => DataSvcInvoker.Current.InvokeAsync(this, async _ =>
        {
            var __result = await _data.UpdatePostCodesAsync(value ?? throw new ArgumentNullException(nameof(value)), country, state, city).ConfigureAwait(false);
            _events.PublishValueEvent(__result, new Uri($"/postalinfo/", UriKind.Relative), $"Demo.PostalInfo", "Update");
            return __result;
        }, new InvokerArgs { EventPublisher = _events });
    }
}

#pragma warning restore
#nullable restore
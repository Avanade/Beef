/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Business.DataSvc;

/// <summary>
/// Provides the <see cref="PostalInfo"/> data repository services.
/// </summary>
public partial class PostalInfoDataSvc : IPostalInfoDataSvc
{
    private readonly IPostalInfoData _data;
    private readonly IEventPublisher _events;

    /// <summary>
    /// Initializes a new instance of the <see cref="PostalInfoDataSvc"/> class.
    /// </summary>
    /// <param name="data">The <see cref="IPostalInfoData"/>.</param>
    /// <param name="events">The <see cref="IEventPublisher"/>.</param>
    public PostalInfoDataSvc(IPostalInfoData data, IEventPublisher events)
        { _data = data.ThrowIfNull(); _events = events.ThrowIfNull(); PostalInfoDataSvcCtor(); }

    partial void PostalInfoDataSvcCtor(); // Enables additional functionality to be added to the constructor.

    /// <inheritdoc/>
    public Task<Result<PostalInfo?>> GetPostCodesAsync(RefDataNamespace.Country? country, string? state, string? city) => _data.GetPostCodesAsync(country, state, city);

    /// <inheritdoc/>
    public Task<Result<PostalInfo>> CreatePostCodesAsync(PostalInfo value, RefDataNamespace.Country? country, string? state, string? city) => DataSvcInvoker.Current.InvokeAsync(this, (_, __) =>
    {
        return Result.GoAsync(_data.CreatePostCodesAsync(value, country, state, city))
                     .Then(r => _events.PublishValueEvent(r, new Uri($"/postalinfo/", UriKind.Relative), $"Demo.PostalInfo", "Create"));
    }, new InvokerArgs { EventPublisher = _events });

    /// <inheritdoc/>
    public Task<Result<PostalInfo>> UpdatePostCodesAsync(PostalInfo value, RefDataNamespace.Country? country, string? state, string? city) => DataSvcInvoker.Current.InvokeAsync(this, (_, __) =>
    {
        return Result.GoAsync(_data.UpdatePostCodesAsync(value, country, state, city))
                     .Then(r => _events.PublishValueEvent(r, new Uri($"/postalinfo/", UriKind.Relative), $"Demo.PostalInfo", "Update"));
    }, new InvokerArgs { EventPublisher = _events });

    /// <inheritdoc/>
    public Task<Result> DeletePostCodesAsync(RefDataNamespace.Country? country, string? state, string? city) => DataSvcInvoker.Current.InvokeAsync(this, (_, __) =>
    {
        return Result.GoAsync(_data.DeletePostCodesAsync(country, state, city))
                     .Then(() => _events.PublishValueEvent(new { Country = country, State = state, City = city }, new Uri($"/postalinfo/", UriKind.Relative), $"Demo.PostalInfo", "Delete"));
    }, new InvokerArgs { EventPublisher = _events });
}

#pragma warning restore
#nullable restore
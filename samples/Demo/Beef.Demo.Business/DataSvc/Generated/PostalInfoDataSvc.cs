/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Caching;
using Beef.Entities;
using Beef.Demo.Business.Data;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Business.DataSvc
{
    /// <summary>
    /// Provides the <see cref="PostalInfo"/> data repository services.
    /// </summary>
    public partial class PostalInfoDataSvc : IPostalInfoDataSvc
    {
        private readonly IPostalInfoData _data;
        private readonly IRequestCache _cache;

        /// <summary>
        /// Initializes a new instance of the <see cref="PostalInfoDataSvc"/> class.
        /// </summary>
        /// <param name="data">The <see cref="IPostalInfoData"/>.</param>
        /// <param name="cache">The <see cref="IRequestCache"/>.</param>
        public PostalInfoDataSvc(IPostalInfoData data, IRequestCache cache)
            { _data = Check.NotNull(data, nameof(data)); _cache = Check.NotNull(cache, nameof(cache)); PostalInfoDataSvcCtor(); }

        partial void PostalInfoDataSvcCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the specified <see cref="PostalInfo"/>.
        /// </summary>
        /// <param name="country">The Country.</param>
        /// <param name="state">The State.</param>
        /// <param name="city">The City.</param>
        /// <returns>The selected <see cref="PostalInfo"/> where found.</returns>
        public Task<PostalInfo?> GetPostCodesAsync(RefDataNamespace.Country? country, string? state, string? city) => DataSvcInvoker.Current.InvokeAsync(this, async () =>
        {
            var __key = new UniqueKey(country, state, city);
            if (_cache.TryGetValue(__key, out PostalInfo? __val))
                return __val;

            var __result = await _data.GetPostCodesAsync(country, state, city).ConfigureAwait(false);
            return _cache.SetAndReturnValue(__key, __result);
        });
    }
}

#pragma warning restore
#nullable restore
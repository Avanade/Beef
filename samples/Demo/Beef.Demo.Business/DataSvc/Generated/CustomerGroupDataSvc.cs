/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using Beef.Demo.Business.Data;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Business.DataSvc
{
    /// <summary>
    /// Provides the Customer group data repository services.
    /// </summary>
    public static partial class CustomerGroupDataSvc
    {
        #region Private
        #pragma warning disable CS0649 // Defaults to null by design; can be overridden in constructor.

        private static readonly Func<CustomerGroup, string, RefDataNamespace.Company, Task> _getOnAfterAsync;
        private static readonly Func<CustomerGroupCollectionResult, CustomerGroupArgs, PagingArgs, Task> _getByArgsOnAfterAsync;
        private static readonly Func<CustomerGroup, Task> _createOnAfterAsync;
        private static readonly Func<CustomerGroup, Task> _updateOnAfterAsync;
        private static readonly Func<CustomerGroupCollection, Task> _updateBatchOnAfterAsync;
        private static readonly Func<string, RefDataNamespace.Company, Task> _deleteOnAfterAsync;

        #pragma warning restore CS0649
        #endregion

        /// <summary>
        /// Gets the <see cref="CustomerGroup"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="CustomerGroup"/> identifier.</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        /// <returns>The selected <see cref="CustomerGroup"/> object where found; otherwise, <c>null</c>.</returns>
        public static Task<CustomerGroup> GetAsync(string id, RefDataNamespace.Company company)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(CustomerGroupDataSvc), async () => 
            {
                var __key = new UniqueKey(id, company);
                if (ExecutionContext.Current.TryGetCacheValue<CustomerGroup>(__key, out CustomerGroup __val))
                    return __val;

                var __result = await Factory.Create<ICustomerGroupData>().GetAsync(id, company);
                ExecutionContext.Current.CacheSet<CustomerGroup>(__key, __result);
                if (_getOnAfterAsync != null) await _getOnAfterAsync(__result, id, company);
                return __result;
            });
        }      

        /// <summary>
        /// Gets the <see cref="CustomerGroup"/> collection object that matches the selection criteria.
        /// </summary>
        /// <param name="args">The Args (see <see cref="CustomerGroupArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>A <see cref="CustomerGroupCollectionResult"/>.</returns>
        public static Task<CustomerGroupCollectionResult> GetByArgsAsync(CustomerGroupArgs args, PagingArgs paging)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(CustomerGroupDataSvc), async () => 
            {
                var __result = await Factory.Create<ICustomerGroupData>().GetByArgsAsync(args, paging);
                if (_getByArgsOnAfterAsync != null) await _getByArgsOnAfterAsync(__result, args, paging);
                return __result;
            });
        }      

        /// <summary>
        /// Creates the <see cref="CustomerGroup"/> object.
        /// </summary>
        /// <param name="value">The <see cref="CustomerGroup"/> object.</param>
        /// <returns>A refreshed <see cref="CustomerGroup"/> object.</returns>
        public static Task<CustomerGroup> CreateAsync(CustomerGroup value)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(CustomerGroupDataSvc), async () => 
            {
                var __result = await Factory.Create<ICustomerGroupData>().CreateAsync(value);
                await Beef.Events.Event.PublishAsync(__result, "Demo.CustomerGroup.{id},{company}", "Create", new KeyValuePair<string, object>("id", __result.Id), new KeyValuePair<string, object>("company", __result.Company));
                ExecutionContext.Current.CacheSet<CustomerGroup>(__result?.UniqueKey ?? UniqueKey.Empty, __result);
                if (_createOnAfterAsync != null) await _createOnAfterAsync(__result);
                return __result;
            });
        }      

        /// <summary>
        /// Updates the <see cref="CustomerGroup"/> object.
        /// </summary>
        /// <param name="value">The <see cref="CustomerGroup"/> object.</param>
        /// <returns>A refreshed <see cref="CustomerGroup"/> object.</returns>
        public static Task<CustomerGroup> UpdateAsync(CustomerGroup value)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(CustomerGroupDataSvc), async () => 
            {
                var __result = await Factory.Create<ICustomerGroupData>().UpdateAsync(value);
                await Beef.Events.Event.PublishAsync(__result, "Demo.CustomerGroup.{id},{company}", "Update", new KeyValuePair<string, object>("id", __result.Id), new KeyValuePair<string, object>("company", __result.Company));
                ExecutionContext.Current.CacheSet<CustomerGroup>(__result?.UniqueKey ?? UniqueKey.Empty, __result);
                if (_updateOnAfterAsync != null) await _updateOnAfterAsync(__result);
                return __result;
            });
        }      

        /// <summary>
        /// Upserts a <see cref="CustomerGroupCollection"/> as a batch.
        /// </summary>
        /// <param name="value">The Value (see <see cref="CustomerGroupCollection"/>).</param>
        public static Task UpdateBatchAsync(CustomerGroupCollection value)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(CustomerGroupDataSvc), async () => 
            {
                await Factory.Create<ICustomerGroupData>().UpdateBatchAsync(value);
                if (_updateBatchOnAfterAsync != null) await _updateBatchOnAfterAsync(value);
            });
        }      

        /// <summary>
        /// Deletes the <see cref="CustomerGroup"/> object.
        /// </summary>
        /// <param name="id">The <see cref="CustomerGroup"/> identifier.</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        public static Task DeleteAsync(string id, RefDataNamespace.Company company)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(CustomerGroupDataSvc), async () => 
            {
                await Factory.Create<ICustomerGroupData>().DeleteAsync(id, company);
                await Beef.Events.Event.PublishAsync("Demo.CustomerGroup.{id},{company}", "Delete", new KeyValuePair<string, object>("id", id), new KeyValuePair<string, object>("company", company));
                ExecutionContext.Current.CacheRemove<CustomerGroup>(new UniqueKey(id, company));
                if (_deleteOnAfterAsync != null) await _deleteOnAfterAsync(id, company);
            });
        }      
    }
}
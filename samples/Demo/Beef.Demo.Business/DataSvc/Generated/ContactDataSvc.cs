/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Business.DataSvc;

/// <summary>
/// Provides the <see cref="Contact"/> data repository services.
/// </summary>
public partial class ContactDataSvc : IContactDataSvc
{
    private readonly IContactData _data;
    private readonly IRequestCache _cache;

    /// <summary>
    /// Initializes a new instance of the <see cref="ContactDataSvc"/> class.
    /// </summary>
    /// <param name="data">The <see cref="IContactData"/>.</param>
    /// <param name="cache">The <see cref="IRequestCache"/>.</param>
    public ContactDataSvc(IContactData data, IRequestCache cache)
        { _data = data.ThrowIfNull(); _cache = cache.ThrowIfNull(); ContactDataSvcCtor(); }

    partial void ContactDataSvcCtor(); // Enables additional functionality to be added to the constructor.

    /// <inheritdoc/>
    public Task<ContactCollectionResult> GetByQueryAsync(QueryArgs? query, PagingArgs? paging) => _data.GetByQueryAsync(query, paging);

    /// <inheritdoc/>
    public Task<ContactCollectionResult> GetAllAsync() => _data.GetAllAsync();

    /// <inheritdoc/>
    public Task<Contact?> GetAsync(Guid id) => _cache.GetOrAddAsync(id, () => _data.GetAsync(id));

    /// <inheritdoc/>
    public async Task<Contact> CreateAsync(Contact value)
    {
        var r = await _data.CreateAsync(value).ConfigureAwait(false);
        return _cache.SetValue(r);
    }

    /// <inheritdoc/>
    public async Task<Contact> UpdateAsync(Contact value)
    {
        var r = await _data.UpdateAsync(value).ConfigureAwait(false);
        return _cache.SetValue(r);
    }

    /// <inheritdoc/>
    public async Task DeleteAsync(Guid id)
    {
        _cache.Remove<Contact>(id);
        await _data.DeleteAsync(id).ConfigureAwait(false);
    }

    /// <inheritdoc/>
    public Task RaiseEventAsync(bool throwError) => _data.RaiseEventAsync(throwError);
}

#pragma warning restore
#nullable restore
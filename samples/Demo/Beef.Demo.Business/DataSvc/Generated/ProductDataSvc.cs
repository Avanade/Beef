/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005, IDE0044 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Caching;
using Beef.Entities;
using Beef.Demo.Business.Data;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Business.DataSvc
{
    /// <summary>
    /// Provides the Product data repository services.
    /// </summary>
    public partial class ProductDataSvc : IProductDataSvc
    {
        private readonly IProductData _data;
        private readonly IRequestCache _cache;

        /// <summary>
        /// Parameterless constructor is explictly not supported.
        /// </summary>
        private ProductDataSvc() => throw new NotSupportedException();

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductDataSvc"/> class.
        /// </summary>
        /// <param name="data">The <see cref="IProductData"/>.</param>
        /// <param name="cache">The <see cref="IRequestCache"/>.</param>
        public ProductDataSvc(IProductData data, IRequestCache cache) { _data = Check.NotNull(data, nameof(data)); _cache = Check.NotNull(cache, nameof(cache)); ProductDataSvcCtor(); }

        /// <summary>
        /// Enables additional functionality to be added to the constructor.
        /// </summary>
        partial void ProductDataSvcCtor();

        /// <summary>
        /// Gets the <see cref="Product"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="Product"/> identifier.</param>
        /// <returns>The selected <see cref="Product"/> object where found; otherwise, <c>null</c>.</returns>
        public Task<Product?> GetAsync(int id)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(ProductDataSvc), async () => 
            {
                var __key = new UniqueKey(id);
                if (_cache.TryGetValue(__key, out Product __val))
                    return __val;

                var __result = await _data.GetAsync(id).ConfigureAwait(false);
                _cache.SetValue(__key, __result!);
                return __result;
            });
        }

        /// <summary>
        /// Gets the <see cref="Product"/> collection object that matches the selection criteria.
        /// </summary>
        /// <param name="args">The Args (see <see cref="ProductArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>A <see cref="ProductCollectionResult"/>.</returns>
        public Task<ProductCollectionResult> GetByArgsAsync(ProductArgs? args, PagingArgs? paging)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(ProductDataSvc), async () => 
            {
                var __result = await _data.GetByArgsAsync(args, paging).ConfigureAwait(false);
                return __result;
            });
        }
    }
}

#pragma warning restore IDE0005, IDE0044
#nullable restore
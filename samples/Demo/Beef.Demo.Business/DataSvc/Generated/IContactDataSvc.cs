/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Business.DataSvc;

/// <summary>
/// Defines the <see cref="Contact"/> data repository services.
/// </summary>
public partial interface IContactDataSvc
{
    /// <summary>
    /// Gets the <see cref="ContactCollectionResult"/> that contains the items that match the selection criteria.
    /// </summary>
    /// <param name="query">The <see cref="QueryArgs"/>.</param>
    /// <param name="paging">The <see cref="PagingArgs"/>.</param>
    /// <returns>The <see cref="ContactCollectionResult"/>.</returns>
    Task<ContactCollectionResult> GetByQueryAsync(QueryArgs? query, PagingArgs? paging);

    /// <summary>
    /// Gets the <see cref="ContactCollectionResult"/> that contains the items that match the selection criteria.
    /// </summary>
    /// <returns>The <see cref="ContactCollectionResult"/>.</returns>
    Task<ContactCollectionResult> GetAllAsync();

    /// <summary>
    /// Gets the specified <see cref="Contact"/>.
    /// </summary>
    /// <param name="id">The <see cref="Contact"/> identifier.</param>
    /// <returns>The selected <see cref="Contact"/> where found.</returns>
    Task<Contact?> GetAsync(Guid id);

    /// <summary>
    /// Creates a new <see cref="Contact"/>.
    /// </summary>
    /// <param name="value">The <see cref="Contact"/>.</param>
    /// <returns>The created <see cref="Contact"/>.</returns>
    Task<Contact> CreateAsync(Contact value);

    /// <summary>
    /// Updates an existing <see cref="Contact"/>.
    /// </summary>
    /// <param name="value">The <see cref="Contact"/>.</param>
    /// <returns>The updated <see cref="Contact"/>.</returns>
    Task<Contact> UpdateAsync(Contact value);

    /// <summary>
    /// Deletes the specified <see cref="Contact"/>.
    /// </summary>
    /// <param name="id">The <see cref="Contact"/> identifier.</param>
    Task DeleteAsync(Guid id);

    /// <summary>
    /// Raise Event.
    /// </summary>
    /// <param name="throwError">Indicates whether throw a DivideByZero exception.</param>
    Task RaiseEventAsync(bool throwError);
}

#pragma warning restore
#nullable restore
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Business.DataSvc;

/// <summary>
/// Provides the <b>ReferenceData</b> data services.
/// </summary>
public partial class ReferenceDataDataSvc : IReferenceDataDataSvc
{
    private readonly IReferenceDataData _data;

    /// <summary>
    /// Initializes a new instance of the <see cref="ReferenceDataDataSvc" /> class.
    /// </summary>
    /// <param name="data">The <see cref="IReferenceDataData"/>.</param>
    public ReferenceDataDataSvc(IReferenceDataData data) { _data = data ?? throw new ArgumentNullException(nameof(data)); ReferenceDataDataSvcCtor(); }

    partial void ReferenceDataDataSvcCtor(); // Enables the ReferenceDataDataSvc constructor to be extended.

    /// <inheritdoc/>
    public Task<Result<IReferenceDataCollection>> GetAsync(Type type) => type switch
    {
        Type _ when type == typeof(RefDataNamespace.Country) => Result.GoAsync(_data.CountryGetAllAsync()).ThenAs(v => (IReferenceDataCollection)v),
        Type _ when type == typeof(RefDataNamespace.USState) => Result.GoAsync(_data.USStateGetAllAsync()).ThenAs(v => (IReferenceDataCollection)v),
        Type _ when type == typeof(RefDataNamespace.Gender) => Result.GoAsync(_data.GenderGetAllAsync()).ThenAs(v => (IReferenceDataCollection)v),
        Type _ when type == typeof(RefDataNamespace.EyeColor) => Result.GoAsync(_data.EyeColorGetAllAsync()).ThenAs(v => (IReferenceDataCollection)v),
        Type _ when type == typeof(RefDataNamespace.PowerSource) => Result.GoAsync(_data.PowerSourceGetAllAsync()).ThenAs(v => (IReferenceDataCollection)v),
        Type _ when type == typeof(RefDataNamespace.Company) => Result.GoAsync(_data.CompanyGetAllAsync()).ThenAs(v => (IReferenceDataCollection)v),
        Type _ when type == typeof(RefDataNamespace.Status) => Result.GoAsync(_data.StatusGetAllAsync()).ThenAs(v => (IReferenceDataCollection)v),
        Type _ when type == typeof(RefDataNamespace.CommunicationType) => Result.GoAsync(_data.CommunicationTypeGetAllAsync()).ThenAs(v => (IReferenceDataCollection)v),
        _ => throw new InvalidOperationException($"Type {type.FullName} is not a known {nameof(IReferenceData)}.")
    };
}

#pragma warning restore
#nullable restore
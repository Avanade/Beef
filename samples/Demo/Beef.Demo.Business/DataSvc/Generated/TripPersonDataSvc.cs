/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0001, IDE0005, IDE0044, IDE0079, CA1034, CA1052, CA1056, CA1819, CA2227, CS0649

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Caching;
using Beef.Entities;
using Beef.Events;
using Beef.Demo.Business.Data;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Business.DataSvc
{
    /// <summary>
    /// Provides the <see cref="TripPerson"/> data repository services.
    /// </summary>
    public partial class TripPersonDataSvc : ITripPersonDataSvc
    {
        private readonly ITripPersonData _data;
        private readonly IEventPublisher _evtPub;
        private readonly IRequestCache _cache;

        /// <summary>
        /// Initializes a new instance of the <see cref="TripPersonDataSvc"/> class.
        /// </summary>
        /// <param name="data">The <see cref="ITripPersonData"/>.</param>
        /// <param name="evtPub">The <see cref="IEventPublisher"/>.</param>
        /// <param name="cache">The <see cref="IRequestCache"/>.</param>
        public TripPersonDataSvc(ITripPersonData data, IEventPublisher evtPub, IRequestCache cache)
            { _data = Check.NotNull(data, nameof(data)); _evtPub = Check.NotNull(evtPub, nameof(evtPub)); _cache = Check.NotNull(cache, nameof(cache)); TripPersonDataSvcCtor(); }

        partial void TripPersonDataSvcCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the specified <see cref="TripPerson"/>.
        /// </summary>
        /// <param name="id">The <see cref="TripPerson"/> identifier (username).</param>
        /// <returns>The selected <see cref="TripPerson"/> where found.</returns>
        public Task<TripPerson?> GetAsync(string? id)
        {
            return DataSvcInvoker.Current.InvokeAsync(this, async () =>
            {
                var __key = new UniqueKey(id);
                if (_cache.TryGetValue(__key, out TripPerson? __val))
                    return __val;

                var __result = await _data.GetAsync(id).ConfigureAwait(false);
                _cache.SetValue(__key, __result);
                return __result;
            });
        }

        /// <summary>
        /// Creates a new <see cref="TripPerson"/>.
        /// </summary>
        /// <param name="value">The <see cref="TripPerson"/>.</param>
        /// <returns>The created <see cref="TripPerson"/>.</returns>
        public Task<TripPerson> CreateAsync(TripPerson value)
        {
            return DataSvcInvoker.Current.InvokeAsync(this, async () =>
            {
                var __result = await _data.CreateAsync(Check.NotNull(value, nameof(value))).ConfigureAwait(false);
                await _evtPub.PublishValueAsync(__result, $"Demo.TripPerson.{__result.Id}", "Create").ConfigureAwait(false);
                _cache.SetValue(__result.UniqueKey, __result);
                return __result;
            });
        }

        /// <summary>
        /// Updates an existing <see cref="TripPerson"/>.
        /// </summary>
        /// <param name="value">The <see cref="TripPerson"/>.</param>
        /// <returns>The updated <see cref="TripPerson"/>.</returns>
        public Task<TripPerson> UpdateAsync(TripPerson value)
        {
            return DataSvcInvoker.Current.InvokeAsync(this, async () =>
            {
                var __result = await _data.UpdateAsync(Check.NotNull(value, nameof(value))).ConfigureAwait(false);
                await _evtPub.PublishValueAsync(__result, $"Demo.TripPerson.{__result.Id}", "Update").ConfigureAwait(false);
                _cache.SetValue(__result.UniqueKey, __result);
                return __result;
            });
        }

        /// <summary>
        /// Deletes the specified <see cref="TripPerson"/>.
        /// </summary>
        /// <param name="id">The <see cref="TripPerson"/> identifier (username).</param>
        public Task DeleteAsync(string? id)
        {
            return DataSvcInvoker.Current.InvokeAsync(this, async () =>
            {
                await _data.DeleteAsync(id).ConfigureAwait(false);
                await _evtPub.PublishAsync($"Demo.TripPerson.{id}", "Delete", id).ConfigureAwait(false);
                _cache.Remove<TripPerson>(new UniqueKey(id));
            });
        }
    }
}

#pragma warning restore IDE0001, IDE0005, IDE0044, IDE0079, CA1034, CA1052, CA1056, CA1819, CA2227, CS0649
#nullable restore
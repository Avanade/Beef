/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Caching;
using Beef.Entities;
using Beef.Events;
using Beef.Demo.Business.Data;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Business.DataSvc
{
    /// <summary>
    /// Provides the <see cref="Gender"/> data repository services.
    /// </summary>
    public partial class GenderDataSvc : IGenderDataSvc
    {
        private readonly IGenderData _data;
        private readonly IEventPublisher _evtPub;
        private readonly IRequestCache _cache;

        /// <summary>
        /// Initializes a new instance of the <see cref="GenderDataSvc"/> class.
        /// </summary>
        /// <param name="data">The <see cref="IGenderData"/>.</param>
        /// <param name="evtPub">The <see cref="IEventPublisher"/>.</param>
        /// <param name="cache">The <see cref="IRequestCache"/>.</param>
        public GenderDataSvc(IGenderData data, IEventPublisher evtPub, IRequestCache cache)
            { _data = Check.NotNull(data, nameof(data)); _evtPub = Check.NotNull(evtPub, nameof(evtPub)); _cache = Check.NotNull(cache, nameof(cache)); GenderDataSvcCtor(); }

        partial void GenderDataSvcCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the specified <see cref="Gender"/>.
        /// </summary>
        /// <param name="id">The <see cref="Gender"/> identifier.</param>
        /// <returns>The selected <see cref="Gender"/> where found.</returns>
        public Task<Gender?> GetAsync(Guid id) => DataSvcInvoker.Current.InvokeAsync(this, async () =>
        {
            var __key = new UniqueKey(id);
            if (_cache.TryGetValue(__key, out Gender? __val))
                return __val;

            var __result = await _data.GetAsync(id).ConfigureAwait(false);
            return _cache.SetAndReturnValue(__key, __result);
        });

        /// <summary>
        /// Creates a new <see cref="Gender"/>.
        /// </summary>
        /// <param name="value">The <see cref="Gender"/>.</param>
        /// <returns>The created <see cref="Gender"/>.</returns>
        public Task<Gender> CreateAsync(Gender value) => DataSvcInvoker.Current.InvokeAsync(this, async () =>
        {
            var __result = await _data.CreateAsync(Check.NotNull(value, nameof(value))).ConfigureAwait(false);
            await _evtPub.PublishValue(__result, $"Demo.Gender.{_evtPub.FormatKey(__result)}", "Create").SendAsync().ConfigureAwait(false);
            return _cache.SetAndReturnValue(__result);
        });

        /// <summary>
        /// Updates an existing <see cref="Gender"/>.
        /// </summary>
        /// <param name="value">The <see cref="Gender"/>.</param>
        /// <returns>The updated <see cref="Gender"/>.</returns>
        public Task<Gender> UpdateAsync(Gender value) => DataSvcInvoker.Current.InvokeAsync(this, async () =>
        {
            var __result = await _data.UpdateAsync(Check.NotNull(value, nameof(value))).ConfigureAwait(false);
            await _evtPub.PublishValue(__result, $"Demo.Gender.{_evtPub.FormatKey(__result)}", "Update").SendAsync().ConfigureAwait(false);
            return _cache.SetAndReturnValue(__result);
        });
    }
}

#pragma warning restore
#nullable restore
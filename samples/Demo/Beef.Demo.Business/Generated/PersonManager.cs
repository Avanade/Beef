/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Business
{
    /// <summary>
    /// Provides the <see cref="Person"/> business functionality.
    /// </summary>
    public partial class PersonManager : IPersonManager
    {
        private readonly IPersonDataSvc _dataService;
        private readonly IGuidIdentifierGenerator _guidIdGen;

        #region Extensions

        private Func<Person, CancellationToken, Task>? _createOnPreValidateAsync;
        private Action<MultiValidator, Person>? _createOnValidate;
        private Func<Person, CancellationToken, Task>? _createOnBeforeAsync;
        private Func<Person, CancellationToken, Task>? _createOnAfterAsync;

        private Func<Guid, CancellationToken, Task>? _deleteOnPreValidateAsync;
        private Action<MultiValidator, Guid>? _deleteOnValidate;
        private Func<Guid, CancellationToken, Task>? _deleteOnBeforeAsync;
        private Func<Guid, CancellationToken, Task>? _deleteOnAfterAsync;

        private Func<Guid, CancellationToken, Task>? _getExOnPreValidateAsync;
        private Action<MultiValidator, Guid>? _getExOnValidate;
        private Func<Guid, CancellationToken, Task>? _getExOnBeforeAsync;
        private Func<Person?, Guid, CancellationToken, Task>? _getExOnAfterAsync;

        private Func<Person, Guid, CancellationToken, Task>? _updateOnPreValidateAsync;
        private Action<MultiValidator, Person, Guid>? _updateOnValidate;
        private Func<Person, Guid, CancellationToken, Task>? _updateOnBeforeAsync;
        private Func<Person, Guid, CancellationToken, Task>? _updateOnAfterAsync;

        private Func<Person, Guid, CancellationToken, Task>? _updateWithRollbackOnPreValidateAsync;
        private Action<MultiValidator, Person, Guid>? _updateWithRollbackOnValidate;
        private Func<Person, Guid, CancellationToken, Task>? _updateWithRollbackOnBeforeAsync;
        private Func<Person, Guid, CancellationToken, Task>? _updateWithRollbackOnAfterAsync;

        private Func<PagingArgs?, CancellationToken, Task>? _getAllOnPreValidateAsync;
        private Action<MultiValidator, PagingArgs?>? _getAllOnValidate;
        private Func<PagingArgs?, CancellationToken, Task>? _getAllOnBeforeAsync;
        private Func<PersonCollectionResult, PagingArgs?, CancellationToken, Task>? _getAllOnAfterAsync;

        private Func<CancellationToken, Task>? _getAll2OnPreValidateAsync;
        private Action<MultiValidator>? _getAll2OnValidate;
        private Func<CancellationToken, Task>? _getAll2OnBeforeAsync;
        private Func<PersonCollectionResult, CancellationToken, Task>? _getAll2OnAfterAsync;

        private Func<PersonArgs?, PagingArgs?, CancellationToken, Task>? _getByArgsOnPreValidateAsync;
        private Action<MultiValidator, PersonArgs?, PagingArgs?>? _getByArgsOnValidate;
        private Func<PersonArgs?, PagingArgs?, CancellationToken, Task>? _getByArgsOnBeforeAsync;
        private Func<PersonCollectionResult, PersonArgs?, PagingArgs?, CancellationToken, Task>? _getByArgsOnAfterAsync;

        private Func<PersonArgs?, PagingArgs?, CancellationToken, Task>? _getDetailByArgsOnPreValidateAsync;
        private Action<MultiValidator, PersonArgs?, PagingArgs?>? _getDetailByArgsOnValidate;
        private Func<PersonArgs?, PagingArgs?, CancellationToken, Task>? _getDetailByArgsOnBeforeAsync;
        private Func<PersonDetailCollectionResult, PersonArgs?, PagingArgs?, CancellationToken, Task>? _getDetailByArgsOnAfterAsync;

        private Func<Guid, Guid, CancellationToken, Task>? _mergeOnPreValidateAsync;
        private Action<MultiValidator, Guid, Guid>? _mergeOnValidate;
        private Func<Guid, Guid, CancellationToken, Task>? _mergeOnBeforeAsync;
        private Func<Person, Guid, Guid, CancellationToken, Task>? _mergeOnAfterAsync;

        private Func<CancellationToken, Task>? _markOnPreValidateAsync;
        private Action<MultiValidator>? _markOnValidate;
        private Func<CancellationToken, Task>? _markOnBeforeAsync;
        private Func<CancellationToken, Task>? _markOnAfterAsync;

        private Func<MapArgs?, CancellationToken, Task>? _mapOnPreValidateAsync;
        private Action<MultiValidator, MapArgs?>? _mapOnValidate;
        private Func<MapArgs?, CancellationToken, Task>? _mapOnBeforeAsync;
        private Func<MapCoordinates, MapArgs?, CancellationToken, Task>? _mapOnAfterAsync;

        private Func<CancellationToken, Task>? _getNoArgsOnPreValidateAsync;
        private Action<MultiValidator>? _getNoArgsOnValidate;
        private Func<CancellationToken, Task>? _getNoArgsOnBeforeAsync;
        private Func<Person?, CancellationToken, Task>? _getNoArgsOnAfterAsync;

        private Func<Guid, CancellationToken, Task>? _getDetailOnPreValidateAsync;
        private Action<MultiValidator, Guid>? _getDetailOnValidate;
        private Func<Guid, CancellationToken, Task>? _getDetailOnBeforeAsync;
        private Func<PersonDetail?, Guid, CancellationToken, Task>? _getDetailOnAfterAsync;

        private Func<PersonDetail, Guid, CancellationToken, Task>? _updateDetailOnPreValidateAsync;
        private Action<MultiValidator, PersonDetail, Guid>? _updateDetailOnValidate;
        private Func<PersonDetail, Guid, CancellationToken, Task>? _updateDetailOnBeforeAsync;
        private Func<PersonDetail, Guid, CancellationToken, Task>? _updateDetailOnAfterAsync;

        private Func<CancellationToken, Task>? _dataSvcCustomOnPreValidateAsync;
        private Action<MultiValidator>? _dataSvcCustomOnValidate;
        private Func<CancellationToken, Task>? _dataSvcCustomOnBeforeAsync;
        private Func<int, CancellationToken, Task>? _dataSvcCustomOnAfterAsync;

        private Func<string?, List<string>?, CancellationToken, Task>? _getNullOnPreValidateAsync;
        private Action<MultiValidator, string?, List<string>?>? _getNullOnValidate;
        private Func<string?, List<string>?, CancellationToken, Task>? _getNullOnBeforeAsync;
        private Func<Person?, string?, List<string>?, CancellationToken, Task>? _getNullOnAfterAsync;

        private Func<Person, CancellationToken, Task>? _eventPublishNoSendOnPreValidateAsync;
        private Action<MultiValidator, Person>? _eventPublishNoSendOnValidate;
        private Func<Person, CancellationToken, Task>? _eventPublishNoSendOnBeforeAsync;
        private Func<Person, CancellationToken, Task>? _eventPublishNoSendOnAfterAsync;

        private Func<PersonArgs?, PagingArgs?, CancellationToken, Task>? _getByArgsWithEfOnPreValidateAsync;
        private Action<MultiValidator, PersonArgs?, PagingArgs?>? _getByArgsWithEfOnValidate;
        private Func<PersonArgs?, PagingArgs?, CancellationToken, Task>? _getByArgsWithEfOnBeforeAsync;
        private Func<PersonCollectionResult, PersonArgs?, PagingArgs?, CancellationToken, Task>? _getByArgsWithEfOnAfterAsync;

        private Func<CancellationToken, Task>? _throwErrorOnPreValidateAsync;
        private Action<MultiValidator>? _throwErrorOnValidate;
        private Func<CancellationToken, Task>? _throwErrorOnBeforeAsync;
        private Func<CancellationToken, Task>? _throwErrorOnAfterAsync;

        private Func<Guid, CancellationToken, Task>? _invokeApiViaAgentOnPreValidateAsync;
        private Action<MultiValidator, Guid>? _invokeApiViaAgentOnValidate;
        private Func<Guid, CancellationToken, Task>? _invokeApiViaAgentOnBeforeAsync;
        private Func<string?, Guid, CancellationToken, Task>? _invokeApiViaAgentOnAfterAsync;

        private Func<AddressCollection?, CancellationToken, Task>? _paramCollOnPreValidateAsync;
        private Action<MultiValidator, AddressCollection?>? _paramCollOnValidate;
        private Func<AddressCollection?, CancellationToken, Task>? _paramCollOnBeforeAsync;
        private Func<AddressCollection?, CancellationToken, Task>? _paramCollOnAfterAsync;

        private Func<Guid, CancellationToken, Task>? _getWithEfOnPreValidateAsync;
        private Action<MultiValidator, Guid>? _getWithEfOnValidate;
        private Func<Guid, CancellationToken, Task>? _getWithEfOnBeforeAsync;
        private Func<Person?, Guid, CancellationToken, Task>? _getWithEfOnAfterAsync;

        private Func<Person, CancellationToken, Task>? _createWithEfOnPreValidateAsync;
        private Action<MultiValidator, Person>? _createWithEfOnValidate;
        private Func<Person, CancellationToken, Task>? _createWithEfOnBeforeAsync;
        private Func<Person, CancellationToken, Task>? _createWithEfOnAfterAsync;

        private Func<Person, Guid, CancellationToken, Task>? _updateWithEfOnPreValidateAsync;
        private Action<MultiValidator, Person, Guid>? _updateWithEfOnValidate;
        private Func<Person, Guid, CancellationToken, Task>? _updateWithEfOnBeforeAsync;
        private Func<Person, Guid, CancellationToken, Task>? _updateWithEfOnAfterAsync;

        private Func<Guid, CancellationToken, Task>? _deleteWithEfOnPreValidateAsync;
        private Action<MultiValidator, Guid>? _deleteWithEfOnValidate;
        private Func<Guid, CancellationToken, Task>? _deleteWithEfOnBeforeAsync;
        private Func<Guid, CancellationToken, Task>? _deleteWithEfOnAfterAsync;

        #endregion

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonManager"/> class.
        /// </summary>
        /// <param name="dataService">The <see cref="IPersonDataSvc"/>.</param>
        /// <param name="guidIdGen">The <see cref="IGuidIdentifierGenerator"/>.</param>
        public PersonManager(IPersonDataSvc dataService, IGuidIdentifierGenerator guidIdGen)
            { _dataService = dataService ?? throw new ArgumentNullException(nameof(dataService)); _guidIdGen = guidIdGen ?? throw new ArgumentNullException(nameof(guidIdGen)); PersonManagerCtor(); }

        partial void PersonManagerCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Creates a new <see cref="Person"/>.
        /// </summary>
        /// <param name="value">The <see cref="Person"/>.</param>
        /// <returns>The created <see cref="Person"/>.</returns>
        public Task<Person> CreateAsync(Person value) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            value.EnsureValue().Id = await _guidIdGen.GenerateIdentifierAsync<Person>().ConfigureAwait(false);
            Cleaner.CleanUp(value);
            await (_createOnPreValidateAsync?.Invoke(value, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(value.Validate(nameof(value)).Entity().With<IValidatorEx<Person>>())
                .Additional((__mv) => _createOnValidate?.Invoke(__mv, value))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_createOnBeforeAsync?.Invoke(value, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.CreateAsync(value, ct).ConfigureAwait(false);
            await (_createOnAfterAsync?.Invoke(__result, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Create);

        /// <summary>
        /// Deletes the specified <see cref="Person"/>.
        /// </summary>
        /// <param name="id">The <see cref="Person"/> identifier.</param>
        public Task DeleteAsync(Guid id) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            Cleaner.CleanUp(id);
            await (_deleteOnPreValidateAsync?.Invoke(id, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(id.Validate(nameof(id)).Mandatory())
                .Additional((__mv) => _deleteOnValidate?.Invoke(__mv, id))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_deleteOnBeforeAsync?.Invoke(id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            await _dataService.DeleteAsync(id, ct).ConfigureAwait(false);
            await (_deleteOnAfterAsync?.Invoke(id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
        }, BusinessInvokerArgs.Delete);

        /// <summary>
        /// Gets the specified <see cref="Person"/>.
        /// </summary>
        /// <param name="id">The <see cref="Person"/> identifier.</param>
        /// <returns>The selected <see cref="Person"/> where found.</returns>
        public Task<Person?> GetAsync(Guid id) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            Cleaner.CleanUp(id);
            await MultiValidator.Create()
                .Add(id.Validate(nameof(id)).Mandatory())
                .ValidateAsync(true, ).ConfigureAwait(false);

            return Cleaner.Clean(await _dataService.GetAsync(id).ConfigureAwait(false));
        }, BusinessInvokerArgs.Read);

        /// <summary>
        /// Gets the specified <see cref="Person"/>.
        /// </summary>
        /// <param name="id">The <see cref="Person"/> identifier.</param>
        /// <returns>The selected <see cref="Person"/> where found.</returns>
        public Task<Person?> GetExAsync(Guid id) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            Cleaner.CleanUp(id);
            await (_getExOnPreValidateAsync?.Invoke(id, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(id.Validate(nameof(id)).Mandatory())
                .Additional((__mv) => _getExOnValidate?.Invoke(__mv, id))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_getExOnBeforeAsync?.Invoke(id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.GetExAsync(id, ct).ConfigureAwait(false);
            await (_getExOnAfterAsync?.Invoke(__result, id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Read);

        /// <summary>
        /// Updates an existing <see cref="Person"/>.
        /// </summary>
        /// <param name="value">The <see cref="Person"/>.</param>
        /// <param name="id">The <see cref="Person"/> identifier.</param>
        /// <returns>The updated <see cref="Person"/>.</returns>
        public Task<Person> UpdateAsync(Person value, Guid id) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            value.EnsureValue().Id = id;
            Cleaner.CleanUp(value);
            await (_updateOnPreValidateAsync?.Invoke(value, id, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(value.Validate(nameof(value)).Entity().With<IValidatorEx<Person>>())
                .Additional((__mv) => _updateOnValidate?.Invoke(__mv, value, id))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_updateOnBeforeAsync?.Invoke(value, id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.UpdateAsync(value, ct).ConfigureAwait(false);
            await (_updateOnAfterAsync?.Invoke(__result, id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Update);

        /// <summary>
        /// Updates an existing <see cref="Person"/>.
        /// </summary>
        /// <param name="value">The <see cref="Person"/>.</param>
        /// <param name="id">The <see cref="Person"/> identifier.</param>
        /// <returns>The updated <see cref="Person"/>.</returns>
        public Task<Person> UpdateWithRollbackAsync(Person value, Guid id) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            value.EnsureValue().Id = id;
            Cleaner.CleanUp(value);
            await (_updateWithRollbackOnPreValidateAsync?.Invoke(value, id, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(value.Validate(nameof(value)).Entity().With<IValidatorEx<Person>>())
                .Additional((__mv) => _updateWithRollbackOnValidate?.Invoke(__mv, value, id))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_updateWithRollbackOnBeforeAsync?.Invoke(value, id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.UpdateWithRollbackAsync(value, ct).ConfigureAwait(false);
            await (_updateWithRollbackOnAfterAsync?.Invoke(__result, id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Update);

        /// <summary>
        /// Gets the <see cref="PersonCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>The <see cref="PersonCollectionResult"/>.</returns>
        public Task<PersonCollectionResult> GetAllAsync(PagingArgs? paging) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            await (_getAllOnPreValidateAsync?.Invoke(paging, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Additional((__mv) => _getAllOnValidate?.Invoke(__mv, paging))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_getAllOnBeforeAsync?.Invoke(paging, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.GetAllAsync(paging, ct).ConfigureAwait(false);
            await (_getAllOnAfterAsync?.Invoke(__result, paging, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Read);

        /// <summary>
        /// Gets the <see cref="PersonCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <returns>The <see cref="PersonCollectionResult"/>.</returns>
        public Task<PersonCollectionResult> GetAll2Async() => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            await (_getAll2OnPreValidateAsync?.Invoke(ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Additional((__mv) => _getAll2OnValidate?.Invoke(__mv))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_getAll2OnBeforeAsync?.Invoke(ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.GetAll2Async(ct).ConfigureAwait(false);
            await (_getAll2OnAfterAsync?.Invoke(__result, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Read);

        /// <summary>
        /// Gets the <see cref="PersonCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <param name="args">The Args (see <see cref="Entities.PersonArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>The <see cref="PersonCollectionResult"/>.</returns>
        public Task<PersonCollectionResult> GetByArgsAsync(PersonArgs? args, PagingArgs? paging) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            Cleaner.CleanUp(args);
            await (_getByArgsOnPreValidateAsync?.Invoke(args, paging, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(args.Validate(nameof(args)).Entity().With<IValidatorEx<PersonArgs>>())
                .Additional((__mv) => _getByArgsOnValidate?.Invoke(__mv, args, paging))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_getByArgsOnBeforeAsync?.Invoke(args, paging, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.GetByArgsAsync(args, paging, ct).ConfigureAwait(false);
            await (_getByArgsOnAfterAsync?.Invoke(__result, args, paging, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Read);

        /// <summary>
        /// Gets the <see cref="PersonDetailCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <param name="args">The Args (see <see cref="Entities.PersonArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>The <see cref="PersonDetailCollectionResult"/>.</returns>
        public Task<PersonDetailCollectionResult> GetDetailByArgsAsync(PersonArgs? args, PagingArgs? paging) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            Cleaner.CleanUp(args);
            await (_getDetailByArgsOnPreValidateAsync?.Invoke(args, paging, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(args.Validate(nameof(args)).Entity().With<IValidatorEx<PersonArgs>>())
                .Additional((__mv) => _getDetailByArgsOnValidate?.Invoke(__mv, args, paging))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_getDetailByArgsOnBeforeAsync?.Invoke(args, paging, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.GetDetailByArgsAsync(args, paging, ct).ConfigureAwait(false);
            await (_getDetailByArgsOnAfterAsync?.Invoke(__result, args, paging, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Read);

        /// <summary>
        /// Merge first <see cref="Person"/> into second.
        /// </summary>
        /// <param name="fromId">The from <see cref="Person"/> identifier.</param>
        /// <param name="toId">The to <see cref="Person"/> identifier.</param>
        /// <returns>A resultant <see cref="Person"/>.</returns>
        public Task<Person> MergeAsync(Guid fromId, Guid toId) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            Cleaner.CleanUp(fromId, toId);
            await (_mergeOnPreValidateAsync?.Invoke(fromId, toId, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(fromId.Validate(nameof(fromId)).Mandatory())
                .Add(toId.Validate(nameof(toId)).Mandatory().CompareValue(CompareOperator.NotEqual, fromId, nameof(fromId).ToSentenceCase()!))
                .Additional((__mv) => _mergeOnValidate?.Invoke(__mv, fromId, toId))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_mergeOnBeforeAsync?.Invoke(fromId, toId, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.MergeAsync(fromId, toId, ct).ConfigureAwait(false);
            await (_mergeOnAfterAsync?.Invoke(__result, fromId, toId, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Update);

        /// <summary>
        /// Mark <see cref="Person"/>.
        /// </summary>
        public Task MarkAsync() => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            await (_markOnPreValidateAsync?.Invoke(ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Additional((__mv) => _markOnValidate?.Invoke(__mv))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_markOnBeforeAsync?.Invoke(ct) ?? Task.CompletedTask).ConfigureAwait(false);
            await _dataService.MarkAsync(ct).ConfigureAwait(false);
            await (_markOnAfterAsync?.Invoke(ct) ?? Task.CompletedTask).ConfigureAwait(false);
        }, BusinessInvokerArgs.Update);

        /// <summary>
        /// Get <see cref="Person"/> at specified <see cref="MapCoordinates"/>.
        /// </summary>
        /// <param name="args">The Args (see <see cref="Entities.MapArgs"/>).</param>
        /// <returns>A resultant <see cref="MapCoordinates"/>.</returns>
        public Task<MapCoordinates> MapAsync(MapArgs? args) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            Cleaner.CleanUp(args);
            await (_mapOnPreValidateAsync?.Invoke(args, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Additional((__mv) => _mapOnValidate?.Invoke(__mv, args))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_mapOnBeforeAsync?.Invoke(args, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.MapAsync(args, ct).ConfigureAwait(false);
            await (_mapOnAfterAsync?.Invoke(__result, args, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Read);

        /// <summary>
        /// Get no arguments.
        /// </summary>
        /// <returns>The selected <see cref="Person"/> where found.</returns>
        public Task<Person?> GetNoArgsAsync() => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            await (_getNoArgsOnPreValidateAsync?.Invoke(ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Additional((__mv) => _getNoArgsOnValidate?.Invoke(__mv))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_getNoArgsOnBeforeAsync?.Invoke(ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.GetNoArgsAsync(ct).ConfigureAwait(false);
            await (_getNoArgsOnAfterAsync?.Invoke(__result, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Read);

        /// <summary>
        /// Gets the specified <see cref="PersonDetail"/>.
        /// </summary>
        /// <param name="id">The <see cref="Person"/> identifier.</param>
        /// <returns>The selected <see cref="PersonDetail"/> where found.</returns>
        public Task<PersonDetail?> GetDetailAsync(Guid id) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            Cleaner.CleanUp(id);
            await (_getDetailOnPreValidateAsync?.Invoke(id, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(id.Validate(nameof(id)).Mandatory())
                .Additional((__mv) => _getDetailOnValidate?.Invoke(__mv, id))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_getDetailOnBeforeAsync?.Invoke(id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.GetDetailAsync(id, ct).ConfigureAwait(false);
            await (_getDetailOnAfterAsync?.Invoke(__result, id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Read);

        /// <summary>
        /// Updates an existing <see cref="PersonDetail"/>.
        /// </summary>
        /// <param name="value">The <see cref="PersonDetail"/>.</param>
        /// <param name="id">The <see cref="Person"/> identifier.</param>
        /// <returns>The updated <see cref="PersonDetail"/>.</returns>
        public Task<PersonDetail> UpdateDetailAsync(PersonDetail value, Guid id) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            value.EnsureValue().Id = id;
            Cleaner.CleanUp(value);
            await (_updateDetailOnPreValidateAsync?.Invoke(value, id, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(value.Validate(nameof(value)).Entity().With<IValidatorEx<PersonDetail>>())
                .Additional((__mv) => _updateDetailOnValidate?.Invoke(__mv, value, id))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_updateDetailOnBeforeAsync?.Invoke(value, id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.UpdateDetailAsync(value, ct).ConfigureAwait(false);
            await (_updateDetailOnAfterAsync?.Invoke(__result, id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Update);

        /// <summary>
        /// Actually validating the FromBody parameter generation.
        /// </summary>
        /// <param name="person">The Person (see <see cref="Entities.Person"/>).</param>
        public Task AddAsync(Person person) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            await AddOnImplementationAsync(person, ct).ConfigureAwait(false);
        }, BusinessInvokerArgs.Unspecified);

        /// <summary>
        /// Validate a DataSvc Custom generation.
        /// </summary>
        /// <returns>A resultant <see cref="int"/>.</returns>
        public Task<int> DataSvcCustomAsync() => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            await (_dataSvcCustomOnPreValidateAsync?.Invoke(ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Additional((__mv) => _dataSvcCustomOnValidate?.Invoke(__mv))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_dataSvcCustomOnBeforeAsync?.Invoke(ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.DataSvcCustomAsync(ct).ConfigureAwait(false);
            await (_dataSvcCustomOnAfterAsync?.Invoke(__result, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Unspecified);

        /// <summary>
        /// Validate a Manager Custom generation.
        /// </summary>
        /// <returns>The selected <see cref="Person"/> where found.</returns>
        public Task<Person?> ManagerCustomAsync() => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            return Cleaner.Clean(await ManagerCustomOnImplementationAsync(ct).ConfigureAwait(false));
        }, BusinessInvokerArgs.Read);

        /// <summary>
        /// Get Null.
        /// </summary>
        /// <param name="name">The Name.</param>
        /// <param name="names">The Names.</param>
        /// <returns>A resultant <see cref="Person"/>.</returns>
        public Task<Person?> GetNullAsync(string? name, List<string>? names) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            Cleaner.CleanUp(name, names);
            await (_getNullOnPreValidateAsync?.Invoke(name, names, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Additional((__mv) => _getNullOnValidate?.Invoke(__mv, name, names))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_getNullOnBeforeAsync?.Invoke(name, names, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.GetNullAsync(name, names, ct).ConfigureAwait(false);
            await (_getNullOnAfterAsync?.Invoke(__result, name, names, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Unspecified);

        /// <summary>
        /// Validate when an Event is published but not sent.
        /// </summary>
        /// <param name="value">The <see cref="Person"/>.</param>
        /// <returns>The updated <see cref="Person"/>.</returns>
        public Task<Person> EventPublishNoSendAsync(Person value) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            Cleaner.CleanUp(value.EnsureValue());
            await (_eventPublishNoSendOnPreValidateAsync?.Invoke(value, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(value.Validate(nameof(value)).Entity().With<IValidatorEx<Person>>())
                .Additional((__mv) => _eventPublishNoSendOnValidate?.Invoke(__mv, value))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_eventPublishNoSendOnBeforeAsync?.Invoke(value, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.EventPublishNoSendAsync(value, ct).ConfigureAwait(false);
            await (_eventPublishNoSendOnAfterAsync?.Invoke(__result, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Update);

        /// <summary>
        /// Gets the <see cref="PersonCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <param name="args">The Args (see <see cref="Entities.PersonArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>The <see cref="PersonCollectionResult"/>.</returns>
        public Task<PersonCollectionResult> GetByArgsWithEfAsync(PersonArgs? args, PagingArgs? paging) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            Cleaner.CleanUp(args);
            await (_getByArgsWithEfOnPreValidateAsync?.Invoke(args, paging, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(args.Validate(nameof(args)).Entity().With<IValidatorEx<PersonArgs>>())
                .Additional((__mv) => _getByArgsWithEfOnValidate?.Invoke(__mv, args, paging))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_getByArgsWithEfOnBeforeAsync?.Invoke(args, paging, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.GetByArgsWithEfAsync(args, paging, ct).ConfigureAwait(false);
            await (_getByArgsWithEfOnAfterAsync?.Invoke(__result, args, paging, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Read);

        /// <summary>
        /// Throw Error.
        /// </summary>
        public Task ThrowErrorAsync() => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            await (_throwErrorOnPreValidateAsync?.Invoke(ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Additional((__mv) => _throwErrorOnValidate?.Invoke(__mv))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_throwErrorOnBeforeAsync?.Invoke(ct) ?? Task.CompletedTask).ConfigureAwait(false);
            await _dataService.ThrowErrorAsync(ct).ConfigureAwait(false);
            await (_throwErrorOnAfterAsync?.Invoke(ct) ?? Task.CompletedTask).ConfigureAwait(false);
        }, new BusinessInvokerArgs { IncludeTransactionScope = true, OperationType = OperationType.Unspecified });

        /// <summary>
        /// Invoke Api Via Agent.
        /// </summary>
        /// <param name="id">The <see cref="Person"/> identifier.</param>
        /// <returns>A resultant <see cref="string"/>.</returns>
        public Task<string?> InvokeApiViaAgentAsync(Guid id) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            Cleaner.CleanUp(id);
            await (_invokeApiViaAgentOnPreValidateAsync?.Invoke(id, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Additional((__mv) => _invokeApiViaAgentOnValidate?.Invoke(__mv, id))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_invokeApiViaAgentOnBeforeAsync?.Invoke(id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.InvokeApiViaAgentAsync(id, ct).ConfigureAwait(false);
            await (_invokeApiViaAgentOnAfterAsync?.Invoke(__result, id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Unspecified);

        /// <summary>
        /// Param Coll.
        /// </summary>
        /// <param name="addresses">The Addresses.</param>
        public Task ParamCollAsync(AddressCollection? addresses) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            Cleaner.CleanUp(addresses);
            await (_paramCollOnPreValidateAsync?.Invoke(addresses, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(addresses.Validate(nameof(addresses)).Entity().With<IValidatorEx<AddressCollection>>())
                .Additional((__mv) => _paramCollOnValidate?.Invoke(__mv, addresses))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_paramCollOnBeforeAsync?.Invoke(addresses, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            await _dataService.ParamCollAsync(addresses, ct).ConfigureAwait(false);
            await (_paramCollOnAfterAsync?.Invoke(addresses, ct) ?? Task.CompletedTask).ConfigureAwait(false);
        }, BusinessInvokerArgs.Unspecified);

        /// <summary>
        /// Gets the specified <see cref="Person"/>.
        /// </summary>
        /// <param name="id">The <see cref="Person"/> identifier.</param>
        /// <returns>The selected <see cref="Person"/> where found.</returns>
        public Task<Person?> GetWithEfAsync(Guid id) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            Cleaner.CleanUp(id);
            await (_getWithEfOnPreValidateAsync?.Invoke(id, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(id.Validate(nameof(id)).Mandatory())
                .Additional((__mv) => _getWithEfOnValidate?.Invoke(__mv, id))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_getWithEfOnBeforeAsync?.Invoke(id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.GetWithEfAsync(id, ct).ConfigureAwait(false);
            await (_getWithEfOnAfterAsync?.Invoke(__result, id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Read);

        /// <summary>
        /// Creates a new <see cref="Person"/>.
        /// </summary>
        /// <param name="value">The <see cref="Person"/>.</param>
        /// <returns>The created <see cref="Person"/>.</returns>
        public Task<Person> CreateWithEfAsync(Person value) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            value.EnsureValue().Id = await _guidIdGen.GenerateIdentifierAsync<Person>().ConfigureAwait(false);
            Cleaner.CleanUp(value);
            await (_createWithEfOnPreValidateAsync?.Invoke(value, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(value.Validate(nameof(value)).Entity().With<IValidatorEx<Person>>())
                .Additional((__mv) => _createWithEfOnValidate?.Invoke(__mv, value))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_createWithEfOnBeforeAsync?.Invoke(value, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.CreateWithEfAsync(value, ct).ConfigureAwait(false);
            await (_createWithEfOnAfterAsync?.Invoke(__result, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Create);

        /// <summary>
        /// Updates an existing <see cref="Person"/>.
        /// </summary>
        /// <param name="value">The <see cref="Person"/>.</param>
        /// <param name="id">The <see cref="Person"/> identifier.</param>
        /// <returns>The updated <see cref="Person"/>.</returns>
        public Task<Person> UpdateWithEfAsync(Person value, Guid id) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            value.EnsureValue().Id = id;
            Cleaner.CleanUp(value);
            await (_updateWithEfOnPreValidateAsync?.Invoke(value, id, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(value.Validate(nameof(value)).Entity().With<IValidatorEx<Person>>())
                .Additional((__mv) => _updateWithEfOnValidate?.Invoke(__mv, value, id))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_updateWithEfOnBeforeAsync?.Invoke(value, id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            var __result = await _dataService.UpdateWithEfAsync(value, ct).ConfigureAwait(false);
            await (_updateWithEfOnAfterAsync?.Invoke(__result, id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            return Cleaner.Clean(__result);
        }, BusinessInvokerArgs.Update);

        /// <summary>
        /// Deletes the specified <see cref="Person"/>.
        /// </summary>
        /// <param name="id">The <see cref="Person"/> identifier.</param>
        public Task DeleteWithEfAsync(Guid id) => ManagerInvoker.Current.InvokeAsync(this, async _ =>
        {
            Cleaner.CleanUp(id);
            await (_deleteWithEfOnPreValidateAsync?.Invoke(id, ct) ?? Task.CompletedTask).ConfigureAwait(false);

            await MultiValidator.Create()
                .Add(id.Validate(nameof(id)).Mandatory())
                .Additional((__mv) => _deleteWithEfOnValidate?.Invoke(__mv, id))
                .ValidateAsync(true, ).ConfigureAwait(false);

            await (_deleteWithEfOnBeforeAsync?.Invoke(id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
            await _dataService.DeleteWithEfAsync(id, ct).ConfigureAwait(false);
            await (_deleteWithEfOnAfterAsync?.Invoke(id, ct) ?? Task.CompletedTask).ConfigureAwait(false);
        }, BusinessInvokerArgs.Delete);
    }
}

#pragma warning restore
#nullable restore
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using Beef.Validation;
using Beef.Demo.Common.Entities;
using Beef.Demo.Business.DataSvc;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Business
{
    /// <summary>
    /// Provides the TripPerson business functionality.
    /// </summary>
    public partial class TripPersonManager : ITripPersonManager
    {
        /// <summary>
        /// Gets the <see cref="TripPerson"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="TripPerson"/> identifier (username).</param>
        /// <returns>The selected <see cref="TripPerson"/> object where found; otherwise, <c>null</c>.</returns>
        public Task<TripPerson?> GetAsync(string? id)
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Read;
                Cleaner.CleanUp(id);
                MultiValidator.Create()
                    .Add(id.Validate(nameof(id)).Mandatory())
                    .Run().ThrowOnError();

                return Cleaner.Clean(await TripPersonDataSvc.GetAsync(id).ConfigureAwait(false));
            });
        }

        /// <summary>
        /// Creates the <see cref="TripPerson"/> object.
        /// </summary>
        /// <param name="value">The <see cref="TripPerson"/> object.</param>
        /// <returns>A refreshed <see cref="TripPerson"/> object.</returns>
        public Task<TripPerson> CreateAsync(TripPerson value)
        {
            value.Validate(nameof(value)).Mandatory().Run().ThrowOnError();

            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Create;
                Cleaner.CleanUp(value);
                MultiValidator.Create()
                    .Add(value.Validate(nameof(value)))
                    .Run().ThrowOnError();

                return Cleaner.Clean(await TripPersonDataSvc.CreateAsync(value).ConfigureAwait(false));
            });
        }

        /// <summary>
        /// Updates the <see cref="TripPerson"/> object.
        /// </summary>
        /// <param name="value">The <see cref="TripPerson"/> object.</param>
        /// <param name="id">The <see cref="TripPerson"/> identifier (username).</param>
        /// <returns>A refreshed <see cref="TripPerson"/> object.</returns>
        public Task<TripPerson> UpdateAsync(TripPerson value, string? id)
        {
            value.Validate(nameof(value)).Mandatory().Run().ThrowOnError();

            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Update;
                value.Id = id;
                Cleaner.CleanUp(value);
                MultiValidator.Create()
                    .Add(value.Validate(nameof(value)))
                    .Run().ThrowOnError();

                return Cleaner.Clean(await TripPersonDataSvc.UpdateAsync(value).ConfigureAwait(false));
            });
        }

        /// <summary>
        /// Deletes the <see cref="TripPerson"/> object.
        /// </summary>
        /// <param name="id">The <see cref="TripPerson"/> identifier (username).</param>
        public Task DeleteAsync(string? id)
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Delete;
                Cleaner.CleanUp(id);
                MultiValidator.Create()
                    .Add(id.Validate(nameof(id)).Mandatory())
                    .Run().ThrowOnError();

                await TripPersonDataSvc.DeleteAsync(id).ConfigureAwait(false);
            });
        }
    }
}

#pragma warning restore IDE0005
#nullable restore
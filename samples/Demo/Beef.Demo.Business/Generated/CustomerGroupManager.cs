/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using Beef.Validation;
using Beef.Demo.Common.Entities;
using Beef.Demo.Business.Validation;
using Beef.Demo.Business.DataSvc;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Business
{
    /// <summary>
    /// Provides the CustomerGroup business functionality.
    /// </summary>
    public partial class CustomerGroupManager : ICustomerGroupManager
    {
        #region Private
        #pragma warning disable CS0649 // Defaults to null by design; can be overridden in constructor.

        private readonly Func<string, RefDataNamespace.Company, Task> _getOnPreValidateAsync;
        private readonly Action<MultiValidator, string, RefDataNamespace.Company> _getOnValidate;
        private readonly Func<string, RefDataNamespace.Company, Task> _getOnBeforeAsync;
        private readonly Func<CustomerGroup, string, RefDataNamespace.Company, Task> _getOnAfterAsync;

        private readonly Func<CustomerGroupArgs, PagingArgs, Task> _getByArgsOnPreValidateAsync;
        private readonly Action<MultiValidator, CustomerGroupArgs, PagingArgs> _getByArgsOnValidate;
        private readonly Func<CustomerGroupArgs, PagingArgs, Task> _getByArgsOnBeforeAsync;
        private readonly Func<CustomerGroupCollectionResult, CustomerGroupArgs, PagingArgs, Task> _getByArgsOnAfterAsync;

        private readonly Func<CustomerGroup, RefDataNamespace.Company, Task> _createOnPreValidateAsync;
        private readonly Action<MultiValidator, CustomerGroup, RefDataNamespace.Company> _createOnValidate;
        private readonly Func<CustomerGroup, RefDataNamespace.Company, Task> _createOnBeforeAsync;
        private readonly Func<CustomerGroup, RefDataNamespace.Company, Task> _createOnAfterAsync;

        private readonly Func<CustomerGroup, string, RefDataNamespace.Company, Task> _updateOnPreValidateAsync;
        private readonly Action<MultiValidator, CustomerGroup, string, RefDataNamespace.Company> _updateOnValidate;
        private readonly Func<CustomerGroup, string, RefDataNamespace.Company, Task> _updateOnBeforeAsync;
        private readonly Func<CustomerGroup, string, RefDataNamespace.Company, Task> _updateOnAfterAsync;

        private readonly Func<CustomerGroupCollection, RefDataNamespace.Company, Task> _updateBatchOnPreValidateAsync;
        private readonly Action<MultiValidator, CustomerGroupCollection, RefDataNamespace.Company> _updateBatchOnValidate;
        private readonly Func<CustomerGroupCollection, RefDataNamespace.Company, Task> _updateBatchOnBeforeAsync;
        private readonly Func<CustomerGroupCollection, RefDataNamespace.Company, Task> _updateBatchOnAfterAsync;

        private readonly Func<string, RefDataNamespace.Company, Task> _deleteOnPreValidateAsync;
        private readonly Action<MultiValidator, string, RefDataNamespace.Company> _deleteOnValidate;
        private readonly Func<string, RefDataNamespace.Company, Task> _deleteOnBeforeAsync;
        private readonly Func<string, RefDataNamespace.Company, Task> _deleteOnAfterAsync;

        #pragma warning restore CS0649
        #endregion

        /// <summary>
        /// Gets the <see cref="CustomerGroup"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="CustomerGroup"/> identifier.</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        /// <returns>The selected <see cref="CustomerGroup"/> object where found; otherwise, <c>null</c>.</returns>
        public Task<CustomerGroup> GetAsync(string id, RefDataNamespace.Company company)
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Read;
                EntityBase.CleanUp(id);
                if (_getOnPreValidateAsync != null) await _getOnPreValidateAsync(id, company).ConfigureAwait(false);

                MultiValidator.Create()
                    .Add(id.Validate(nameof(id)).Mandatory())
                    .Add(company.Validate(nameof(company)).Mandatory().IsValid())
                    .Additional((__mv) => _getOnValidate?.Invoke(__mv, id, company))
                    .Run().ThrowOnError();

                if (_getOnBeforeAsync != null) await _getOnBeforeAsync(id, company).ConfigureAwait(false);
                var __result = await CustomerGroupDataSvc.GetAsync(id, company).ConfigureAwait(false);
                if (_getOnAfterAsync != null) await _getOnAfterAsync(__result, id, company).ConfigureAwait(false);
                Cleaner.Clean(__result);
                return __result;
            });
        }

        /// <summary>
        /// Gets the <see cref="CustomerGroup"/> collection object that matches the selection criteria.
        /// </summary>
        /// <param name="args">The Args (see <see cref="CustomerGroupArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>A <see cref="CustomerGroupCollectionResult"/>.</returns>
        public Task<CustomerGroupCollectionResult> GetByArgsAsync(CustomerGroupArgs args, PagingArgs paging)
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Read;
                EntityBase.CleanUp(args);
                if (_getByArgsOnPreValidateAsync != null) await _getByArgsOnPreValidateAsync(args, paging).ConfigureAwait(false);

                MultiValidator.Create()
                    .Add(args.Validate(nameof(args)).Entity(CustomerGroupArgsValidator.Default))
                    .Additional((__mv) => _getByArgsOnValidate?.Invoke(__mv, args, paging))
                    .Run().ThrowOnError();

                if (_getByArgsOnBeforeAsync != null) await _getByArgsOnBeforeAsync(args, paging).ConfigureAwait(false);
                var __result = await CustomerGroupDataSvc.GetByArgsAsync(args, paging).ConfigureAwait(false);
                if (_getByArgsOnAfterAsync != null) await _getByArgsOnAfterAsync(__result, args, paging).ConfigureAwait(false);
                Cleaner.Clean(__result);
                return __result;
            });
        }

        /// <summary>
        /// Creates the <see cref="CustomerGroup"/> object.
        /// </summary>
        /// <param name="value">The <see cref="CustomerGroup"/> object.</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        /// <returns>A refreshed <see cref="CustomerGroup"/> object.</returns>
        public Task<CustomerGroup> CreateAsync(CustomerGroup value, RefDataNamespace.Company company)
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Create;
                if (value != null) { value.Company = company; }
                EntityBase.CleanUp(value);
                if (_createOnPreValidateAsync != null) await _createOnPreValidateAsync(value, company).ConfigureAwait(false);

                MultiValidator.Create()
                    .Add(value.Validate(nameof(value)).Mandatory().Entity(CustomerGroupValidator.Default))
                    .Add(company.Validate(nameof(company)).Mandatory().IsValid())
                    .Additional((__mv) => _createOnValidate?.Invoke(__mv, value, company))
                    .Run().ThrowOnError();

                if (_createOnBeforeAsync != null) await _createOnBeforeAsync(value, company).ConfigureAwait(false);
                var __result = await CustomerGroupDataSvc.CreateAsync(value).ConfigureAwait(false);
                if (_createOnAfterAsync != null) await _createOnAfterAsync(__result, company).ConfigureAwait(false);
                Cleaner.Clean(__result);
                return __result;
            });
        }

        /// <summary>
        /// Updates the <see cref="CustomerGroup"/> object.
        /// </summary>
        /// <param name="value">The <see cref="CustomerGroup"/> object.</param>
        /// <param name="id">The <see cref="CustomerGroup"/> identifier.</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        /// <returns>A refreshed <see cref="CustomerGroup"/> object.</returns>
        public Task<CustomerGroup> UpdateAsync(CustomerGroup value, string id, RefDataNamespace.Company company)
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Update;
                if (value != null) { value.Id = id; value.Company = company; }
                EntityBase.CleanUp(value, id);
                if (_updateOnPreValidateAsync != null) await _updateOnPreValidateAsync(value, id, company).ConfigureAwait(false);

                MultiValidator.Create()
                    .Add(value.Validate(nameof(value)).Mandatory().Entity(CustomerGroupValidator.Default))
                    .Add(company.Validate(nameof(company)).IsValid())
                    .Additional((__mv) => _updateOnValidate?.Invoke(__mv, value, id, company))
                    .Run().ThrowOnError();

                if (_updateOnBeforeAsync != null) await _updateOnBeforeAsync(value, id, company).ConfigureAwait(false);
                var __result = await CustomerGroupDataSvc.UpdateAsync(value).ConfigureAwait(false);
                if (_updateOnAfterAsync != null) await _updateOnAfterAsync(__result, id, company).ConfigureAwait(false);
                Cleaner.Clean(__result);
                return __result;
            });
        }

        /// <summary>
        /// Upserts a <see cref="CustomerGroupCollection"/> as a batch.
        /// </summary>
        /// <param name="value">The Value (see <see cref="CustomerGroupCollection"/>).</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        public Task UpdateBatchAsync(CustomerGroupCollection value, RefDataNamespace.Company company)
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Unspecified;
                if (value != null) { value?.ForEach(__item => __item.Company = company); }
                EntityBase.CleanUp(value);
                if (_updateBatchOnPreValidateAsync != null) await _updateBatchOnPreValidateAsync(value, company).ConfigureAwait(false);

                MultiValidator.Create()
                    .Add(value.Validate(nameof(value)).Mandatory().Collection(minCount: 1, maxCount:1, item: new Beef.Validation.Rules.CollectionRuleItem<CustomerGroup>(CustomerGroupValidator.Default)))
                    .Add(company.Validate(nameof(company)).Mandatory().IsValid())
                    .Additional((__mv) => _updateBatchOnValidate?.Invoke(__mv, value, company))
                    .Run().ThrowOnError();

                if (_updateBatchOnBeforeAsync != null) await _updateBatchOnBeforeAsync(value, company).ConfigureAwait(false);
                await CustomerGroupDataSvc.UpdateBatchAsync(value).ConfigureAwait(false);
                if (_updateBatchOnAfterAsync != null) await _updateBatchOnAfterAsync(value, company).ConfigureAwait(false);
            });
        }

        /// <summary>
        /// Deletes the <see cref="CustomerGroup"/> object.
        /// </summary>
        /// <param name="id">The <see cref="CustomerGroup"/> identifier.</param>
        /// <param name="company">The Company (see <see cref="RefDataNamespace.Company"/>).</param>
        public Task DeleteAsync(string id, RefDataNamespace.Company company)
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Delete;
                EntityBase.CleanUp(id);
                if (_deleteOnPreValidateAsync != null) await _deleteOnPreValidateAsync(id, company).ConfigureAwait(false);

                MultiValidator.Create()
                    .Add(id.Validate(nameof(id)).Mandatory())
                    .Add(company.Validate(nameof(company)).Mandatory().IsValid())
                    .Additional((__mv) => _deleteOnValidate?.Invoke(__mv, id, company))
                    .Run().ThrowOnError();

                if (_deleteOnBeforeAsync != null) await _deleteOnBeforeAsync(id, company).ConfigureAwait(false);
                await CustomerGroupDataSvc.DeleteAsync(id, company).ConfigureAwait(false);
                if (_deleteOnAfterAsync != null) await _deleteOnAfterAsync(id, company).ConfigureAwait(false);
            });
        }
    }
}

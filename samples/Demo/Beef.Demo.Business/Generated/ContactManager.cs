/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Business;

/// <summary>
/// Provides the <see cref="Contact"/> business functionality.
/// </summary>
public partial class ContactManager : IContactManager
{
    private readonly IContactDataSvc _dataService;

    /// <summary>
    /// Initializes a new instance of the <see cref="ContactManager"/> class.
    /// </summary>
    /// <param name="dataService">The <see cref="IContactDataSvc"/>.</param>
    public ContactManager(IContactDataSvc dataService)
        { _dataService = dataService.ThrowIfNull(); ContactManagerCtor(); }

    partial void ContactManagerCtor(); // Enables additional functionality to be added to the constructor.

    /// <inheritdoc/>
    public Task<ContactCollectionResult> GetByQueryAsync(QueryArgs? query, PagingArgs? paging) => ManagerInvoker.Current.InvokeAsync(this, async (_, ct) =>
    {
        return await _dataService.GetByQueryAsync(query, paging).ConfigureAwait(false);
    }, InvokerArgs.Read);

    /// <inheritdoc/>
    public Task<ContactCollectionResult> GetAllAsync() => ManagerInvoker.Current.InvokeAsync(this, async (_, ct) =>
    {
        return await _dataService.GetAllAsync().ConfigureAwait(false);
    }, InvokerArgs.Read);

    /// <inheritdoc/>
    public Task<Contact?> GetAsync(Guid id) => ManagerInvoker.Current.InvokeAsync(this, async (_, ct) =>
    {
        await id.Validate().Configure(vc => vc.Mandatory()).ValidateAsync(true).ConfigureAwait(false);
        return await _dataService.GetAsync(id).ConfigureAwait(false);
    }, InvokerArgs.Read);

    /// <inheritdoc/>
    public Task<Contact> CreateAsync(Contact value) => ManagerInvoker.Current.InvokeAsync(this, async (_, ct) =>
    {
        await value.Validate().Configure(vc => vc.Mandatory().Entity().With<ContactValidator>()).ValidateAsync(true).ConfigureAwait(false);
        return await _dataService.CreateAsync(value).ConfigureAwait(false);
    }, InvokerArgs.Create);

    /// <inheritdoc/>
    public Task<Contact> UpdateAsync(Contact value, Guid id) => ManagerInvoker.Current.InvokeAsync(this, async (_, ct) =>
    {
        value.Required().Id = id;
        await MultiValidator.Create()
            .Add(id.Validate().Configure(vc => vc.Mandatory()))
            .Add(value.Validate().Configure(vc => vc.Mandatory().Entity().With<ContactValidator>()))
            .ValidateAsync(true).ConfigureAwait(false);

        return await _dataService.UpdateAsync(value).ConfigureAwait(false);
    }, InvokerArgs.Update);

    /// <inheritdoc/>
    public Task DeleteAsync(Guid id) => ManagerInvoker.Current.InvokeAsync(this, async (_, ct) =>
    {
        await id.Validate().Configure(vc => vc.Mandatory()).ValidateAsync(true).ConfigureAwait(false);
        await _dataService.DeleteAsync(id).ConfigureAwait(false);
    }, InvokerArgs.Delete);

    /// <inheritdoc/>
    public Task RaiseEventAsync(bool throwError) => ManagerInvoker.Current.InvokeAsync(this, async (_, ct) =>
    {
        await _dataService.RaiseEventAsync(throwError).ConfigureAwait(false);
    }, InvokerArgs.Unspecified);
}

#pragma warning restore
#nullable restore
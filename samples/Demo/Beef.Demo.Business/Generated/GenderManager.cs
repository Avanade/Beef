/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using Beef.Validation;
using Beef.Demo.Common.Entities;
using Beef.Demo.Business.DataSvc;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Business
{
    /// <summary>
    /// Provides the <see cref="Gender"/> business functionality.
    /// </summary>
    public partial class GenderManager : IGenderManager
    {
        private readonly IGenderDataSvc _dataService;

        /// <summary>
        /// Initializes a new instance of the <see cref="GenderManager"/> class.
        /// </summary>
        /// <param name="dataService">The <see cref="IGenderDataSvc"/>.</param>
        public GenderManager(IGenderDataSvc dataService)
            { _dataService = Check.NotNull(dataService, nameof(dataService)); GenderManagerCtor(); }

        partial void GenderManagerCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the specified <see cref="Gender"/>.
        /// </summary>
        /// <param name="id">The <see cref="Gender"/> identifier.</param>
        /// <returns>The selected <see cref="Gender"/> where found.</returns>
        public async Task<Gender?> GetAsync(Guid id) => await ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
            Cleaner.CleanUp(id);
            await id.Validate(nameof(id)).Mandatory().RunAsync(throwOnError: true).ConfigureAwait(false);
            return Cleaner.Clean(await _dataService.GetAsync(id).ConfigureAwait(false));
        }, BusinessInvokerArgs.Read).ConfigureAwait(false);

        /// <summary>
        /// Creates a new <see cref="Gender"/>.
        /// </summary>
        /// <param name="value">The <see cref="Gender"/>.</param>
        /// <returns>The created <see cref="Gender"/>.</returns>
        public async Task<Gender> CreateAsync(Gender value) => await ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
            await value.Validate().Mandatory().RunAsync(throwOnError: true).ConfigureAwait(false);

            Cleaner.CleanUp(value);
            return Cleaner.Clean(await _dataService.CreateAsync(value).ConfigureAwait(false));
        }, BusinessInvokerArgs.Create).ConfigureAwait(false);

        /// <summary>
        /// Updates an existing <see cref="Gender"/>.
        /// </summary>
        /// <param name="value">The <see cref="Gender"/>.</param>
        /// <param name="id">The <see cref="Gender"/> identifier.</param>
        /// <returns>The updated <see cref="Gender"/>.</returns>
        public async Task<Gender> UpdateAsync(Gender value, Guid id) => await ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
            await value.Validate().Mandatory().RunAsync(throwOnError: true).ConfigureAwait(false);

            value.Id = id;
            Cleaner.CleanUp(value);
            return Cleaner.Clean(await _dataService.UpdateAsync(value).ConfigureAwait(false));
        }, BusinessInvokerArgs.Update).ConfigureAwait(false);
    }
}

#pragma warning restore
#nullable restore
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Business;

/// <summary>
/// Provides the <see cref="Gender"/> business functionality.
/// </summary>
public partial class GenderManager : IGenderManager
{
    private readonly IGenderDataSvc _dataService;

    /// <summary>
    /// Initializes a new instance of the <see cref="GenderManager"/> class.
    /// </summary>
    /// <param name="dataService">The <see cref="IGenderDataSvc"/>.</param>
    public GenderManager(IGenderDataSvc dataService)
        { _dataService = dataService.ThrowIfNull(); GenderManagerCtor(); }

    partial void GenderManagerCtor(); // Enables additional functionality to be added to the constructor.

    /// <inheritdoc/>
    public Task<Result<Gender?>> GetAsync(Guid id) => ManagerInvoker.Current.InvokeAsync(this, ct =>
    {
        return Result.Go().Requires(id)
                     .ThenAsAsync(() => _dataService.GetAsync(id));
    }, InvokerArgs.Read);

    /// <inheritdoc/>
    public Task<Result<Gender>> CreateAsync(Gender value) => ManagerInvoker.Current.InvokeAsync(this, ct =>
    {
        return Result.Go(value).Required()
                     .ThenAsAsync(v => _dataService.CreateAsync(value));
    }, InvokerArgs.Create);

    /// <inheritdoc/>
    public Task<Result<Gender>> UpdateAsync(Gender value, Guid id) => ManagerInvoker.Current.InvokeAsync(this, ct =>
    {
        return Result.Go(value).Required().Requires(id).Then(v => v.Id = id)
                     .ThenAsAsync(v => _dataService.UpdateAsync(value));
    }, InvokerArgs.Update);
}

#pragma warning restore
#nullable restore
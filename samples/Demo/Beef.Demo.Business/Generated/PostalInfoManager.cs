/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Business
{
    /// <summary>
    /// Provides the <see cref="PostalInfo"/> business functionality.
    /// </summary>
    public partial class PostalInfoManager : IPostalInfoManager
    {
        private readonly IPostalInfoDataSvc _dataService;

        /// <summary>
        /// Initializes a new instance of the <see cref="PostalInfoManager"/> class.
        /// </summary>
        /// <param name="dataService">The <see cref="IPostalInfoDataSvc"/>.</param>
        public PostalInfoManager(IPostalInfoDataSvc dataService)
            { _dataService = dataService.ThrowIfNull(); PostalInfoManagerCtor(); }

        partial void PostalInfoManagerCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the specified <see cref="PostalInfo"/>.
        /// </summary>
        /// <param name="country">The Country.</param>
        /// <param name="state">The State.</param>
        /// <param name="city">The City.</param>
        /// <returns>The selected <see cref="PostalInfo"/> where found.</returns>
        public Task<Result<PostalInfo?>> GetPostCodesAsync(RefDataNamespace.Country? country, string? state, string? city) => ManagerInvoker.Current.InvokeAsync(this, _ =>
        {
            return Result.Go().Requires(country).Requires(state).Requires(city)
                         .Then(() => Cleaner.CleanUp(country, state, city))
                         .ValidatesAsync(country, v => v.IsValid())
                         .ThenAsAsync(() => _dataService.GetPostCodesAsync(country, state, city));
        }, InvokerArgs.Read);

        /// <summary>
        /// Creates a new <see cref="PostalInfo"/>.
        /// </summary>
        /// <param name="value">The <see cref="PostalInfo"/>.</param>
        /// <param name="country">The Country.</param>
        /// <param name="state">The State.</param>
        /// <param name="city">The City.</param>
        /// <returns>The created <see cref="PostalInfo"/>.</returns>
        public Task<Result<PostalInfo>> CreatePostCodesAsync(PostalInfo value, RefDataNamespace.Country? country, string? state, string? city) => ManagerInvoker.Current.InvokeAsync(this, _ =>
        {
            return Result.Go(value).Required().Requires(country).Requires(state).Requires(city)
                         .Then(v => Cleaner.CleanUp(v, country, state, city))
                         .ValidatesAsync(country, v => v.IsValid())
                         .ThenAsAsync(v => _dataService.CreatePostCodesAsync(value, country, state, city));
        }, InvokerArgs.Create);

        /// <summary>
        /// Updates an existing <see cref="PostalInfo"/>.
        /// </summary>
        /// <param name="value">The <see cref="PostalInfo"/>.</param>
        /// <param name="country">The Country.</param>
        /// <param name="state">The State.</param>
        /// <param name="city">The City.</param>
        /// <returns>The updated <see cref="PostalInfo"/>.</returns>
        public Task<Result<PostalInfo>> UpdatePostCodesAsync(PostalInfo value, RefDataNamespace.Country? country, string? state, string? city) => ManagerInvoker.Current.InvokeAsync(this, _ =>
        {
            return Result.Go(value).Required().Requires(country).Requires(state).Requires(city)
                         .Then(v => Cleaner.CleanUp(v, country, state, city))
                         .ValidatesAsync(country, v => v.IsValid())
                         .ThenAsAsync(v => _dataService.UpdatePostCodesAsync(value, country, state, city));
        }, InvokerArgs.Update);

        /// <summary>
        /// Deletes the specified <see cref="PostalInfo"/>.
        /// </summary>
        /// <param name="country">The Country.</param>
        /// <param name="state">The State.</param>
        /// <param name="city">The City.</param>
        public Task<Result> DeletePostCodesAsync(RefDataNamespace.Country? country, string? state, string? city) => ManagerInvoker.Current.InvokeAsync(this, _ =>
        {
            return Result.Go().Requires(country).Requires(state).Requires(city)
                         .Then(() => Cleaner.CleanUp(country, state, city))
                         .ValidatesAsync(country, v => v.IsValid())
                         .ThenAsync(() => _dataService.DeletePostCodesAsync(country, state, city));
        }, InvokerArgs.Delete);
    }
}

#pragma warning restore
#nullable restore
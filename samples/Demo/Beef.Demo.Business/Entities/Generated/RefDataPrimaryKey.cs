/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Business.Entities;

/// <summary>
/// Represents the Ref Data Primary Key entity.
/// </summary>
public partial class RefDataPrimaryKey : EntityBase, IPrimaryKey
{
    private string? _key1Sid;
    private string? _other;

    /// <summary>
    /// Gets or sets the <see cref="Key1"/> using the underlying Serialization Identifier (SID).
    /// </summary>
    [JsonPropertyName("key1")]
    public string? Key1Sid { get => _key1Sid; set => SetValue(ref _key1Sid, value, propertyName: nameof(Key1)); }

    /// <summary>
    /// Gets the corresponding <see cref="Key1"/> text (read-only where selected).
    /// </summary>
    public string? Key1Text => RefDataNamespace.Gender.GetRefDataText(_key1Sid);

    /// <summary>
    /// Gets or sets the Key1 (see <see cref="RefDataNamespace.Gender"/>).
    /// </summary>
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    [JsonIgnore]
    public RefDataNamespace.Gender? Key1 { get => _key1Sid; set => SetValue(ref _key1Sid, value); }

    /// <summary>
    /// Gets or sets the Other.
    /// </summary>
    public string? Other { get => _other; set => SetValue(ref _other, value); }

    /// <summary>
    /// Creates the primary <see cref="CompositeKey"/>.
    /// </summary>
    /// <param name="key1">The <see cref="Key1"/>.</param>
    /// <returns>The <see cref="CompositeKey"/>.</returns>
    public static CompositeKey CreatePrimaryKey(string? key1) => CompositeKey.Create(key1);

    /// <summary>
    /// Gets the primary <see cref="CompositeKey"/> (consists of the following property(s): <see cref="Key1"/>).
    /// </summary>
    [JsonIgnore]
    public CompositeKey PrimaryKey => CreatePrimaryKey(Key1Sid);

    /// <inheritdoc/>
    protected override IEnumerable<IPropertyValue> GetPropertyValues()
    {
        yield return CreateProperty(nameof(Key1Sid), Key1Sid, v => Key1Sid = v);
        yield return CreateProperty(nameof(Other), Other, v => Other = v);
    }
}

#pragma warning restore
#nullable restore
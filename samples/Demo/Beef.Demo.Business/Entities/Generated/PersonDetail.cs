/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Business.Entities
{
    /// <summary>
    /// Represents the <see cref="Person"/> detail entity.
    /// </summary>
    public partial class PersonDetail : Person, IEquatable<PersonDetail>
    {
        private WorkHistoryCollection? _history;

        /// <summary>
        /// Gets or sets the History.
        /// </summary>
        public WorkHistoryCollection? History { get => _history; set => SetValue(ref _history, value); }

        /// <inheritdoc/>
        protected override IEnumerable<IPropertyValue> GetPropertyValues()
        {
            foreach (var pv in base.GetPropertyValues())
                yield return pv;

            yield return CreateProperty(History, v => History = v);
        }

        /// <inheritdoc/>
        public bool Equals(PersonDetail? other) => base.Equals(other);

        /// <summary>
        /// Compares two values for equality.
        /// </summary>
        /// <param name="a"><see cref="PersonDetail"/> A.</param>
        /// <param name="b"><see cref="PersonDetail"/> B.</param>
        /// <returns><c>true</c> indicates equal; otherwise, <c>false</c> for not equal.</returns>
        public static bool operator ==(PersonDetail? a, PersonDetail? b) => Equals(a, b);
    
        /// <summary>
        /// Compares two values for non-equality.
        /// </summary>
        /// <param name="a"><see cref="PersonDetail"/> A.</param>
        /// <param name="b"><see cref="PersonDetail"/> B.</param>
        /// <returns><c>true</c> indicates not equal; otherwise, <c>false</c> for equal.</returns>
        public static bool operator !=(PersonDetail? a, PersonDetail? b) => !Equals(a, b);
 
        /// <inheritdoc/>
        public override int GetHashCode() => base.GetHashCode();

        /// <inheritdoc/>
        public override object Clone() => CreateClone<PersonDetail>(this);
    }

    /// <summary>
    /// Represents the <see cref="PersonDetail"/> collection.
    /// </summary>
    public partial class PersonDetailCollection : EntityBaseCollection<PersonDetail, PersonDetailCollection>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonDetailCollection"/> class.
        /// </summary>
        public PersonDetailCollection() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonDetailCollection"/> class with a <paramref name="collection"/> of items to add.
        /// </summary>
        /// <param name="collection">A collection containing items to add.</param>
        public PersonDetailCollection(IEnumerable<PersonDetail> collection) => AddRange(collection);
    }

    /// <summary>
    /// Represents the <see cref="PersonDetail"/> collection result.
    /// </summary>
    public class PersonDetailCollectionResult : EntityCollectionResult<PersonDetailCollection, PersonDetail, PersonDetailCollectionResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonDetailCollectionResult"/> class.
        /// </summary>
        public PersonDetailCollectionResult() { }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonDetailCollectionResult"/> class with <paramref name="paging"/>.
        /// </summary>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        public PersonDetailCollectionResult(PagingArgs? paging) : base(paging) { }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonDetailCollectionResult"/> class with a <paramref name="collection"/> of items to add.
        /// </summary>
        /// <param name="collection">A collection containing items to add.</param>
        /// <param name="paging">The optional <see cref="PagingArgs"/>.</param>
        public PersonDetailCollectionResult(IEnumerable<PersonDetail> collection, PagingArgs? paging = null) : base(paging) => Collection.AddRange(collection);
    }
}

#pragma warning restore
#nullable restore
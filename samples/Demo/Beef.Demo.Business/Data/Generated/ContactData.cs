/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Business.Data;

/// <summary>
/// Provides the <see cref="Contact"/> data access.
/// </summary>
public partial class ContactData : IContactData
{
    private readonly IEfDb _sqlEf;
    private readonly IEventPublisher _events;
    private Func<IQueryable<EfModel.Contact>, QueryArgs?, IQueryable<EfModel.Contact>>? _getByQueryOnQuery;
    private Func<IQueryable<EfModel.Contact>, IQueryable<EfModel.Contact>>? _getAllOnQuery;

    /// <summary>
    /// Initializes a new instance of the <see cref="ContactData"/> class.
    /// </summary>
    /// <param name="sqlEf">The <see cref="IEfDb"/>.</param>
    /// <param name="events">The <see cref="IEventPublisher"/>.</param>
    public ContactData(IEfDb sqlEf, IEventPublisher events)
        { _sqlEf = sqlEf.ThrowIfNull(); _events = events.ThrowIfNull(); ContactDataCtor(); }

    partial void ContactDataCtor(); // Enables additional functionality to be added to the constructor.

    /// <inheritdoc/>
    public Task<ContactCollectionResult> GetByQueryAsync(QueryArgs? query, PagingArgs? paging)
        => _sqlEf.Query<Contact, EfModel.Contact>(q => _getByQueryOnQuery?.Invoke(q, query) ?? q).WithPaging(paging).SelectResultAsync<ContactCollectionResult, ContactCollection>();

    /// <inheritdoc/>
    public Task<ContactCollectionResult> GetAllAsync()
        => _sqlEf.Query<Contact, EfModel.Contact>(q => _getAllOnQuery?.Invoke(q) ?? q).SelectResultAsync<ContactCollectionResult, ContactCollection>();

    /// <inheritdoc/>
    public Task<Contact?> GetAsync(Guid id)
        => _sqlEf.GetAsync<Contact, EfModel.Contact>(id);

    /// <inheritdoc/>
    public Task<Contact> CreateAsync(Contact value) => DataInvoker.Current.InvokeAsync(this, async (_, __) => 
    {
        var r = await _sqlEf.CreateAsync<Contact, EfModel.Contact>(value).ConfigureAwait(false);
        _events.PublishValueEvent(r, new Uri($"/contact/{r.Id}", UriKind.Relative), $"Demo.Contact", "Create");
        return r;
    }, new InvokerArgs { EventPublisher = _events });

    /// <inheritdoc/>
    public Task<Contact> UpdateAsync(Contact value) => DataInvoker.Current.InvokeAsync(this, async (_, __) => 
    {
        var r = await _sqlEf.UpdateAsync<Contact, EfModel.Contact>(value).ConfigureAwait(false);
        _events.PublishValueEvent(r, new Uri($"/contact/{r.Id}", UriKind.Relative), $"Demo.Contact", "Update");
        return r;
    }, new InvokerArgs { EventPublisher = _events });

    /// <inheritdoc/>
    public Task DeleteAsync(Guid id) => DataInvoker.Current.InvokeAsync(this, async (_, __) => 
    {
        await _sqlEf.DeleteAsync<Contact, EfModel.Contact>(id).ConfigureAwait(false);
        _events.PublishValueEvent(new Contact { Id = id }, new Uri($"/contact/{id}", UriKind.Relative), $"Demo.Contact", "Delete");
    }, new InvokerArgs { EventPublisher = _events });

    /// <inheritdoc/>
    public Task RaiseEventAsync(bool throwError) => DataInvoker.Current.InvokeAsync(this, async (_, __) => 
    {
        await RaiseEventOnImplementationAsync(throwError);
    }, new InvokerArgs { EventPublisher = _events });

    /// <summary>
    /// Provides the <see cref="Contact"/> to Entity Framework <see cref="EfModel.Contact"/> mapping.
    /// </summary>
    public partial class EntityToModelEfMapper : Mapper<Contact, EfModel.Contact>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityToModelEfMapper"/> class.
        /// </summary>
        public EntityToModelEfMapper()
        {
            Map((s, d) => d.ContactId = s.Id, OperationTypes.Any, s => s.Id == default, d => d.ContactId = default);
            Map((s, d) => d.FirstName = s.FirstName, OperationTypes.Any, s => s.FirstName == default, d => d.FirstName = default);
            Map((s, d) => d.LastName = s.LastName, OperationTypes.Any, s => s.LastName == default, d => d.LastName = default);
            Map((s, d) => d.StatusCode = s.StatusSid, OperationTypes.Any, s => s.StatusSid == default, d => d.StatusCode = default);
            Map((s, d) => d.Comms = ObjectToJsonConverter<ContactCommCollection>.Default.ConvertToDestination(s.Communications), OperationTypes.Any, s => s.Communications == default, d => d.Comms = default);
            EntityToModelEfMapperCtor();
        }

        partial void EntityToModelEfMapperCtor(); // Enables the constructor to be extended.
    }

    /// <summary>
    /// Provides the Entity Framework <see cref="EfModel.Contact"/> to <see cref="Contact"/> mapping.
    /// </summary>
    public partial class ModelToEntityEfMapper : Mapper<EfModel.Contact, Contact>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelToEntityEfMapper"/> class.
        /// </summary>
        public ModelToEntityEfMapper()
        {
            Map((s, d) => d.Id = (Guid)s.ContactId!, OperationTypes.Any, s => s.ContactId == default, d => d.Id = default);
            Map((s, d) => d.FirstName = (string?)s.FirstName!, OperationTypes.Any, s => s.FirstName == default, d => d.FirstName = default);
            Map((s, d) => d.LastName = (string?)s.LastName!, OperationTypes.Any, s => s.LastName == default, d => d.LastName = default);
            Map((s, d) => d.StatusSid = (string?)s.StatusCode!, OperationTypes.Any, s => s.StatusCode == default, d => d.StatusSid = default);
            Map((s, d) => d.Communications = (ContactCommCollection?)ObjectToJsonConverter<ContactCommCollection>.Default.ConvertToSource(s.Comms!), OperationTypes.Any, s => s.Comms == default, d => d.Communications = default);
            ModelToEntityEfMapperCtor();
        }

        partial void ModelToEntityEfMapperCtor(); // Enables the constructor to be extended.
    }
}

#pragma warning restore
#nullable restore
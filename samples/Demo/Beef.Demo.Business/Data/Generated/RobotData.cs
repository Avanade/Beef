/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Business.Data
{
    /// <summary>
    /// Provides the <see cref="Robot"/> data access.
    /// </summary>
    public partial class RobotData : IRobotData
    {
        private readonly DemoCosmosDb _cosmos;
        private Func<IQueryable<Model.Robot>, RobotArgs?, IQueryable<Model.Robot>>? _getByArgsOnQuery;

        /// <summary>
        /// Initializes a new instance of the <see cref="RobotData"/> class.
        /// </summary>
        /// <param name="cosmos">The <see cref="DemoCosmosDb"/>.</param>
        public RobotData(DemoCosmosDb cosmos)
            { _cosmos = cosmos ?? throw new ArgumentNullException(nameof(cosmos)); RobotDataCtor(); }

        partial void RobotDataCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the specified <see cref="Robot"/>.
        /// </summary>
        /// <param name="id">The <see cref="Robot"/> identifier.</param>
        /// <returns>The selected <see cref="Robot"/> where found.</returns>
        public Task<Robot?> GetAsync(Guid id)
        {
            return _cosmos.Items.GetAsync(TypeToStringConverter<Guid>.Default.ToDestination.Convert(id));
        }

        /// <summary>
        /// Creates a new <see cref="Robot"/>.
        /// </summary>
        /// <param name="value">The <see cref="Robot"/>.</param>
        /// <returns>The created <see cref="Robot"/>.</returns>
        public Task<Robot> CreateAsync(Robot value)
        {
            return _cosmos.Items.CreateAsync(value ?? throw new ArgumentNullException(nameof(value)));
        }

        /// <summary>
        /// Updates an existing <see cref="Robot"/>.
        /// </summary>
        /// <param name="value">The <see cref="Robot"/>.</param>
        /// <returns>The updated <see cref="Robot"/>.</returns>
        public Task<Robot> UpdateAsync(Robot value)
        {
            return _cosmos.Items.UpdateAsync(value ?? throw new ArgumentNullException(nameof(value)));
        }

        /// <summary>
        /// Deletes the specified <see cref="Robot"/>.
        /// </summary>
        /// <param name="id">The <see cref="Robot"/> identifier.</param>
        public Task DeleteAsync(Guid id)
        {
            return _cosmos.Items.DeleteAsync(TypeToStringConverter<Guid>.Default.ToDestination.Convert(id));
        }

        /// <summary>
        /// Gets the <see cref="RobotCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <param name="args">The Args (see <see cref="Entities.RobotArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>The <see cref="RobotCollectionResult"/>.</returns>
        public Task<RobotCollectionResult> GetByArgsAsync(RobotArgs? args, PagingArgs? paging)
        {
            return _cosmos.Items.Query(q => _getByArgsOnQuery?.Invoke(q, args) ?? q).WithPaging(paging).SelectResultAsync<RobotCollectionResult, RobotCollection>();
        }

        /// <summary>
        /// Provides the <see cref="Robot"/> to Entity Framework <see cref="Model.Robot"/> mapping.
        /// </summary>
        public partial class EntityToModelCosmosMapper : Mapper<Robot, Model.Robot>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="EntityToModelCosmosMapper"/> class.
            /// </summary>
            public EntityToModelCosmosMapper()
            {
                Map((s, d) => d.Id = TypeToStringConverter<Guid>.Default.ToDestination.Convert(s.Id));
                Map((s, d) => d.ModelNo = s.ModelNo);
                Map((s, d) => d.SerialNo = s.SerialNo);
                Map((s, d) => d.EyeColor = s.EyeColorSid);
                Map((s, d) => d.PowerSource = s.PowerSourceSid);
                Map((s, d) => d.ETag = s.ETag);
                Map((o, s, d) => d.ChangeLog = o.Map(s.ChangeLog, d.ChangeLog));
                EntityToModelCosmosMapperCtor();
            }

            partial void EntityToModelCosmosMapperCtor(); // Enables the constructor to be extended.

            /// <inheritdoc/>
            public override bool IsSourceInitial(Robot s)
                => s.Id == default
                && s.ModelNo == default
                && s.SerialNo == default
                && s.EyeColorSid == default
                && s.PowerSourceSid == default
                && s.ETag == default
                && s.ChangeLog == default;
        }

        /// <summary>
        /// Provides the Entity Framework <see cref="Model.Robot"/> to <see cref="Robot"/> mapping.
        /// </summary>
        public partial class ModelToEntityCosmosMapper : Mapper<Model.Robot, Robot>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ModelToEntityCosmosMapper"/> class.
            /// </summary>
            public ModelToEntityCosmosMapper()
            {
                Map((s, d) => d.Id = (Guid)TypeToStringConverter<Guid>.Default.ToSource.Convert(s.Id));
                Map((s, d) => d.ModelNo = (string?)s.ModelNo);
                Map((s, d) => d.SerialNo = (string?)s.SerialNo);
                Map((s, d) => d.EyeColorSid = (string?)s.EyeColor);
                Map((s, d) => d.PowerSourceSid = (string?)s.PowerSource);
                Map((s, d) => d.ETag = (string?)s.ETag);
                Map((o, s, d) => d.ChangeLog = o.Map(s.ChangeLog, d.ChangeLog));
                ModelToEntityCosmosMapperCtor();
            }

            partial void ModelToEntityCosmosMapperCtor(); // Enables the constructor to be extended.

            /// <inheritdoc/>
            public override bool IsSourceInitial(Model.Robot s)
                => s.Id == default
                && s.ModelNo == default
                && s.SerialNo == default
                && s.EyeColor == default
                && s.PowerSource == default
                && s.ETag == default
                && s.ChangeLog == default;
        }
    }
}

#pragma warning restore
#nullable restore
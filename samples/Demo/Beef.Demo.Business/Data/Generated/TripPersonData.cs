/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Data.OData;
using Beef.Entities;
using Beef.Mapper;
using Beef.Mapper.Converters;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;
using Soc = Simple.OData.Client;

namespace Beef.Demo.Business.Data
{
    /// <summary>
    /// Provides the <see cref="TripPerson"/> data access.
    /// </summary>
    public partial class TripPersonData : ITripPersonData
    {
        private readonly ITripOData _odata;

        /// <summary>
        /// Initializes a new instance of the <see cref="TripPersonData"/> class.
        /// </summary>
        /// <param name="odata">The <see cref="ITripOData"/>.</param>
        public TripPersonData(ITripOData odata)
            { _odata = Check.NotNull(odata, nameof(odata)); TripPersonDataCtor(); }

        partial void TripPersonDataCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the specified <see cref="TripPerson"/>.
        /// </summary>
        /// <param name="id">The <see cref="TripPerson"/> identifier (username).</param>
        /// <returns>The selected <see cref="TripPerson"/> where found.</returns>
        public Task<TripPerson?> GetAsync(string? id)
        {
            return DataInvoker.Current.InvokeAsync(this, async () =>
            {
                var __dataArgs = ODataMapper.Default.CreateArgs();
                return await _odata.GetAsync(__dataArgs, id).ConfigureAwait(false);
            });
        }

        /// <summary>
        /// Creates a new <see cref="TripPerson"/>.
        /// </summary>
        /// <param name="value">The <see cref="TripPerson"/>.</param>
        /// <returns>The created <see cref="TripPerson"/>.</returns>
        public Task<TripPerson> CreateAsync(TripPerson value)
        {
            return DataInvoker.Current.InvokeAsync(this, async () =>
            {
                var __dataArgs = ODataMapper.Default.CreateArgs();
                return await _odata.CreateAsync(__dataArgs, Check.NotNull(value, nameof(value))).ConfigureAwait(false);
            });
        }

        /// <summary>
        /// Updates an existing <see cref="TripPerson"/>.
        /// </summary>
        /// <param name="value">The <see cref="TripPerson"/>.</param>
        /// <returns>The updated <see cref="TripPerson"/>.</returns>
        public Task<TripPerson> UpdateAsync(TripPerson value)
        {
            return DataInvoker.Current.InvokeAsync(this, async () =>
            {
                var __dataArgs = ODataMapper.Default.CreateArgs();
                return await _odata.UpdateAsync(__dataArgs, Check.NotNull(value, nameof(value))).ConfigureAwait(false);
            });
        }

        /// <summary>
        /// Deletes the specified <see cref="TripPerson"/>.
        /// </summary>
        /// <param name="id">The <see cref="TripPerson"/> identifier (username).</param>
        public Task DeleteAsync(string? id)
        {
            return DataInvoker.Current.InvokeAsync(this, async () =>
            {
                var __dataArgs = ODataMapper.Default.CreateArgs();
                await _odata.DeleteAsync(__dataArgs, id).ConfigureAwait(false);
            });
        }

        /// <summary>
        /// Provides the <see cref="TripPerson"/> and OData  property mapping.
        /// </summary>
        public partial class ODataMapper : ODataMapper<TripPerson, Model.Person, ODataMapper>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ODataMapper"/> class.
            /// </summary>
            public ODataMapper()
            {
                Property(s => s.Id, d => d.UserName).SetUniqueKey(false);
                Property(s => s.FirstName, d => d.FirstName);
                Property(s => s.LastName, d => d.LastName);
                AddStandardProperties();
                ODataMapperCtor();
            }
            
            partial void ODataMapperCtor(); // Enables the ODataMapper constructor to be extended.
        }
    }
}

#pragma warning restore
#nullable restore
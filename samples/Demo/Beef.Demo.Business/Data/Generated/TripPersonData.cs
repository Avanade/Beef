/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Data.OData;
using Soc = Simple.OData.Client;
using Beef.Entities;
using Beef.Mapper;
using Beef.Mapper.Converters;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Business.Data
{
    /// <summary>
    /// Provides the Trip Person data access.
    /// </summary>
    public partial class TripPersonData : ITripPersonData
    {
        #region Private
        #pragma warning disable CS0649 // Defaults to null by design; can be overridden in constructor.

        private readonly Func<string?, IODataArgs, Task>? _getOnBeforeAsync;
        private readonly Func<TripPerson?, string?, Task>? _getOnAfterAsync;
        private readonly Action<Exception>? _getOnException;

        private readonly Func<TripPerson, IODataArgs, Task>? _createOnBeforeAsync;
        private readonly Func<TripPerson, Task>? _createOnAfterAsync;
        private readonly Action<Exception>? _createOnException;

        private readonly Func<TripPerson, IODataArgs, Task>? _updateOnBeforeAsync;
        private readonly Func<TripPerson, Task>? _updateOnAfterAsync;
        private readonly Action<Exception>? _updateOnException;

        private readonly Func<string?, IODataArgs, Task>? _deleteOnBeforeAsync;
        private readonly Func<string?, Task>? _deleteOnAfterAsync;
        private readonly Action<Exception>? _deleteOnException;

        #pragma warning restore CS0649
        #endregion

        /// <summary>
        /// Gets the <see cref="TripPerson"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="TripPerson"/> identifier (username).</param>
        /// <returns>The selected <see cref="TripPerson"/> object where found; otherwise, <c>null</c>.</returns>
        public Task<TripPerson?> GetAsync(string? id)
        {
            return DataInvoker.Default.InvokeAsync(this, async () =>
            {
                TripPerson? __result;
                var __dataArgs = ODataMapper.Default.CreateArgs();
                if (_getOnBeforeAsync != null) await _getOnBeforeAsync(id, __dataArgs).ConfigureAwait(false);
                __result = await TripOData.Default.GetAsync(__dataArgs, id).ConfigureAwait(false);
                if (_getOnAfterAsync != null) await _getOnAfterAsync(__result, id).ConfigureAwait(false);
                return __result;
            }, new BusinessInvokerArgs { ExceptionHandler = _getOnException });
        }

        /// <summary>
        /// Creates the <see cref="TripPerson"/> object.
        /// </summary>
        /// <param name="value">The <see cref="TripPerson"/> object.</param>
        /// <returns>A refreshed <see cref="TripPerson"/> object.</returns>
        public Task<TripPerson> CreateAsync(TripPerson value)
        {
            if (value == null)
                throw new ArgumentNullException(nameof(value));

            return DataInvoker.Default.InvokeAsync(this, async () =>
            {
                TripPerson __result;
                var __dataArgs = ODataMapper.Default.CreateArgs();
                if (_createOnBeforeAsync != null) await _createOnBeforeAsync(value, __dataArgs).ConfigureAwait(false);
                __result = await TripOData.Default.CreateAsync(__dataArgs, value).ConfigureAwait(false);
                if (_createOnAfterAsync != null) await _createOnAfterAsync(__result).ConfigureAwait(false);
                return __result;
            }, new BusinessInvokerArgs { ExceptionHandler = _createOnException });
        }

        /// <summary>
        /// Updates the <see cref="TripPerson"/> object.
        /// </summary>
        /// <param name="value">The <see cref="TripPerson"/> object.</param>
        /// <returns>A refreshed <see cref="TripPerson"/> object.</returns>
        public Task<TripPerson> UpdateAsync(TripPerson value)
        {
            if (value == null)
                throw new ArgumentNullException(nameof(value));

            return DataInvoker.Default.InvokeAsync(this, async () =>
            {
                TripPerson __result;
                var __dataArgs = ODataMapper.Default.CreateArgs();
                if (_updateOnBeforeAsync != null) await _updateOnBeforeAsync(value, __dataArgs).ConfigureAwait(false);
                __result = await TripOData.Default.UpdateAsync(__dataArgs, value).ConfigureAwait(false);
                if (_updateOnAfterAsync != null) await _updateOnAfterAsync(__result).ConfigureAwait(false);
                return __result;
            }, new BusinessInvokerArgs { ExceptionHandler = _updateOnException });
        }

        /// <summary>
        /// Deletes the <see cref="TripPerson"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="TripPerson"/> identifier (username).</param>
        public Task DeleteAsync(string? id)
        {
            return DataInvoker.Default.InvokeAsync(this, async () =>
            {
                var __dataArgs = ODataMapper.Default.CreateArgs();
                if (_deleteOnBeforeAsync != null) await _deleteOnBeforeAsync(id, __dataArgs).ConfigureAwait(false);
                await TripOData.Default.DeleteAsync(__dataArgs, id).ConfigureAwait(false);
                if (_deleteOnAfterAsync != null) await _deleteOnAfterAsync(id).ConfigureAwait(false);
            }, new BusinessInvokerArgs { ExceptionHandler = _deleteOnException });
        }

        /// <summary>
        /// Provides the <see cref="TripPerson"/> entity and OData property mapping.
        /// </summary>
        public partial class ODataMapper : ODataMapper<TripPerson, Model.Person, ODataMapper>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ODataMapper"/> class.
            /// </summary>
            public ODataMapper()
            {
                Property(s => s.Id, d => d.UserName).SetUniqueKey(false);
                Property(s => s.FirstName, d => d.FirstName);
                Property(s => s.LastName, d => d.LastName);
                ODataMapperCtor();
            }
            
            /// <summary>
            /// Enables the <see cref="ODataMapper"/> constructor to be extended.
            /// </summary>
            partial void ODataMapperCtor();
        }
    }
}

#nullable restore
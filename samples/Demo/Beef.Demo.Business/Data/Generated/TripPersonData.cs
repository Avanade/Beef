/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Data.OData;
using Beef.Entities;
using Beef.Mapper;
using Beef.Mapper.Converters;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;
using Soc = Simple.OData.Client;

namespace Beef.Demo.Business.Data
{
    /// <summary>
    /// Provides the <see cref="TripPerson"/> data access.
    /// </summary>
    public partial class TripPersonData : ITripPersonData
    {
        private readonly ITripOData _odata;
        private readonly AutoMapper.IMapper _mapper;

        /// <summary>
        /// Initializes a new instance of the <see cref="TripPersonData"/> class.
        /// </summary>
        /// <param name="odata">The <see cref="ITripOData"/>.</param>
        /// <param name="mapper">The <see cref="AutoMapper.IMapper"/>.</param>
        public TripPersonData(ITripOData odata, AutoMapper.IMapper mapper)
            { _odata = Check.NotNull(odata, nameof(odata)); _mapper = Check.NotNull(mapper, nameof(mapper)); TripPersonDataCtor(); }

        partial void TripPersonDataCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the specified <see cref="TripPerson"/>.
        /// </summary>
        /// <param name="id">The <see cref="TripPerson"/> identifier (username).</param>
        /// <returns>The selected <see cref="TripPerson"/> where found.</returns>
        public Task<TripPerson?> GetAsync(string? id) => DataInvoker.Current.InvokeAsync(this, async () =>
        {
            var __dataArgs = ODataArgs.Create(_mapper);
            return await _odata.GetAsync<TripPerson, Model.Person>(__dataArgs, id).ConfigureAwait(false);
        });

        /// <summary>
        /// Creates a new <see cref="TripPerson"/>.
        /// </summary>
        /// <param name="value">The <see cref="TripPerson"/>.</param>
        /// <returns>The created <see cref="TripPerson"/>.</returns>
        public Task<TripPerson> CreateAsync(TripPerson value) => DataInvoker.Current.InvokeAsync(this, async () =>
        {
            var __dataArgs = ODataArgs.Create(_mapper);
            return await _odata.CreateAsync<TripPerson, Model.Person>(__dataArgs, Check.NotNull(value, nameof(value))).ConfigureAwait(false);
        });

        /// <summary>
        /// Updates an existing <see cref="TripPerson"/>.
        /// </summary>
        /// <param name="value">The <see cref="TripPerson"/>.</param>
        /// <returns>The updated <see cref="TripPerson"/>.</returns>
        public Task<TripPerson> UpdateAsync(TripPerson value) => DataInvoker.Current.InvokeAsync(this, async () =>
        {
            var __dataArgs = ODataArgs.Create(_mapper);
            return await _odata.UpdateAsync<TripPerson, Model.Person>(__dataArgs, Check.NotNull(value, nameof(value))).ConfigureAwait(false);
        });

        /// <summary>
        /// Deletes the specified <see cref="TripPerson"/>.
        /// </summary>
        /// <param name="id">The <see cref="TripPerson"/> identifier (username).</param>
        public Task DeleteAsync(string? id) => DataInvoker.Current.InvokeAsync(this, async () =>
        {
            var __dataArgs = ODataArgs.Create(_mapper);
            await _odata.DeleteAsync<TripPerson, Model.Person>(__dataArgs, id).ConfigureAwait(false);
        });

        /// <summary>
        /// Provides the <see cref="TripPerson"/> and OData <see cref="Model.Person"/> <i>AutoMapper</i> mapping.
        /// </summary>
        public partial class ODataMapperProfile : AutoMapper.Profile
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ODataMapperProfile"/> class.
            /// </summary>
            public ODataMapperProfile()
            {
                var s2d = CreateMap<TripPerson, Model.Person>();
                s2d.ForMember(d => d.UserName, o => o.MapFrom(s => s.Id));
                s2d.ForMember(d => d.FirstName, o => o.MapFrom(s => s.FirstName));
                s2d.ForMember(d => d.LastName, o => o.MapFrom(s => s.LastName));

                var d2s = CreateMap<Model.Person, TripPerson>();
                d2s.ForMember(s => s.Id, o => o.MapFrom(d => d.UserName));
                d2s.ForMember(s => s.FirstName, o => o.MapFrom(d => d.FirstName));
                d2s.ForMember(s => s.LastName, o => o.MapFrom(d => d.LastName));

                ODataMapperProfileCtor(s2d, d2s);
            }

            partial void ODataMapperProfileCtor(AutoMapper.IMappingExpression<TripPerson, Model.Person> s2d, AutoMapper.IMappingExpression<Model.Person, TripPerson> d2s); // Enables the constructor to be extended.
        }
    }
}

#pragma warning restore
#nullable restore
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Business.Data
{
    /// <summary>
    /// Provides the <see cref="PostalInfo"/> data access.
    /// </summary>
    public partial class PostalInfoData : IPostalInfoData
    {
        private readonly ZippoAgent _httpAgent;

        /// <summary>
        /// Initializes a new instance of the <see cref="PostalInfoData"/> class.
        /// </summary>
        /// <param name="httpAgent">The <see cref="ZippoAgent"/>.</param>
        public PostalInfoData(ZippoAgent httpAgent)
            { _httpAgent = httpAgent ?? throw new ArgumentNullException(nameof(httpAgent)); PostalInfoDataCtor(); }

        partial void PostalInfoDataCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the specified <see cref="PostalInfo"/>.
        /// </summary>
        /// <param name="country">The Country.</param>
        /// <param name="state">The State.</param>
        /// <param name="city">The City.</param>
        /// <returns>The selected <see cref="PostalInfo"/> where found.</returns>
        public async Task<PostalInfo?> GetPostCodesAsync(RefDataNamespace.Country? country, string? state, string? city)
        {
            return (await _httpAgent.WithRetry().Reset().GetMappedAsync<PostalInfo?, Model.PostalInfo?>($"{country.Code}/{state}/{city}").ConfigureAwait(false)).Value;
        }

        /// <summary>
        /// Creates a new <see cref="PostalInfo"/>.
        /// </summary>
        /// <param name="value">The <see cref="PostalInfo"/>.</param>
        /// <param name="country">The Country.</param>
        /// <param name="state">The State.</param>
        /// <param name="city">The City.</param>
        /// <returns>The created <see cref="PostalInfo"/>.</returns>
        public async Task<PostalInfo> CreatePostCodesAsync(PostalInfo value, RefDataNamespace.Country? country, string? state, string? city)
        {
            return (await _httpAgent.WithRetry().PostMappedAsync<PostalInfo, Model.PostalInfo, PostalInfo, Model.PostalInfo>($"{country.Code}/{state}/{city}", value).ConfigureAwait(false)).Value;
        }

        /// <summary>
        /// Updates an existing <see cref="PostalInfo"/>.
        /// </summary>
        /// <param name="value">The <see cref="PostalInfo"/>.</param>
        /// <param name="country">The Country.</param>
        /// <param name="state">The State.</param>
        /// <param name="city">The City.</param>
        /// <returns>The updated <see cref="PostalInfo"/>.</returns>
        public async Task<PostalInfo> UpdatePostCodesAsync(PostalInfo value, RefDataNamespace.Country? country, string? state, string? city)
        {
            return (await _httpAgent.WithRetry().PutMappedAsync<PostalInfo, Model.PostalInfo, PostalInfo, Model.PostalInfo>($"{country.Code}/{state}/{city}", value).ConfigureAwait(false)).Value;
        }

        /// <summary>
        /// Provides the <see cref="PostalInfo"/> and HttpAgent <see cref="Model.PostalInfo"/> <i>AutoMapper</i> mapping.
        /// </summary>
        public partial class HttpAgentMapperProfile : AutoMapper.Profile
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="HttpAgentMapperProfile"/> class.
            /// </summary>
            public HttpAgentMapperProfile()
            {
                var s2d = CreateMap<PostalInfo, Model.PostalInfo>();
                s2d.ForMember(d => d.Country, o => o.MapFrom(s => s.CountrySid));
                s2d.ForMember(d => d.City, o => o.MapFrom(s => s.City));
                s2d.ForMember(d => d.State, o => o.MapFrom(s => s.State));
                s2d.ForMember(d => d.Places, o => o.MapFrom(s => s.Places));
                s2d.ForMember(d => d.ETag, o => o.MapFrom(s => s.ETag));

                var d2s = CreateMap<Model.PostalInfo, PostalInfo>();
                d2s.ForMember(s => s.CountrySid, o => o.MapFrom(d => d.Country));
                d2s.ForMember(s => s.City, o => o.MapFrom(d => d.City));
                d2s.ForMember(s => s.State, o => o.MapFrom(d => d.State));
                d2s.ForMember(s => s.Places, o => o.MapFrom(d => d.Places));
                d2s.ForMember(s => s.ETag, o => o.MapFrom(d => d.ETag));

                HttpAgentMapperProfileCtor(s2d, d2s);
            }

            partial void HttpAgentMapperProfileCtor(AutoMapper.IMappingExpression<PostalInfo, Model.PostalInfo> s2d, AutoMapper.IMappingExpression<Model.PostalInfo, PostalInfo> d2s); // Enables the constructor to be extended.
        }
    }
}

#pragma warning restore
#nullable restore
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Business.Data
{
    /// <summary>
    /// Provides the <b>ReferenceData</b> data access.
    /// </summary>
    public partial class ReferenceDataData : IReferenceDataData
    {
        private readonly IDatabase _db;
        private readonly IEfDb _ef;
        private readonly ICosmos _cosmos;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataData"/> class.
        /// </summary>
        /// <param name="db">The <see cref="IDatabase"/>.</param>
        /// <param name="ef">The <see cref="IEfDb"/>.</param>
        /// <param name="cosmos">The <see cref="ICosmos"/>.</param>
        public ReferenceDataData(IDatabase db, IEfDb ef, ICosmos cosmos)
            { _db = db ?? throw new ArgumentNullException(nameof(db)); _ef = ef ?? throw new ArgumentNullException(nameof(ef)); _cosmos = cosmos ?? throw new ArgumentNullException(nameof(cosmos)); ReferenceDataDataCtor(); }

        partial void ReferenceDataDataCtor(); // Enables additional functionality to be added to the constructor.

        /// <inheritdoc/>
        public Task<RefDataNamespace.CountryCollection> CountryGetAllAsync()
            => DataInvoker.Current.InvokeAsync(this, _ => _db.ReferenceData<RefDataNamespace.CountryCollection, RefDataNamespace.Country, Guid>("[Ref].[spCountryGetAll]").LoadAsync("CountryId"), BusinessInvokerArgs.TransactionSuppress);

        /// <inheritdoc/>
        public Task<RefDataNamespace.USStateCollection> USStateGetAllAsync()
            => DataInvoker.Current.InvokeAsync(this, _ => _db.ReferenceData<RefDataNamespace.USStateCollection, RefDataNamespace.USState, Guid>("[Ref].[spUSStateGetAll]").LoadAsync("USStateId"), BusinessInvokerArgs.TransactionSuppress);

        /// <inheritdoc/>
        public Task<RefDataNamespace.GenderCollection> GenderGetAllAsync()
            => DataInvoker.Current.InvokeAsync(this, _ => 
            {
                return _db.ReferenceData<RefDataNamespace.GenderCollection, RefDataNamespace.Gender, Guid>("[Ref].[spGenderGetAll]").LoadAsync("GenderId", additionalProperties: (dr, item) =>
                {
                    item.AlternateName = dr.GetValue<string>("AlternateName");
                    item.TripCode = dr.GetValue<string>("TripCode");
                    item.Country = ReferenceDataIdConverter<RefDataNamespace.Country, Guid?>.Default.ToSource.Convert(dr.GetValue<Guid?>("CountryId"));
                });
            }, BusinessInvokerArgs.TransactionSuppress);

        /// <inheritdoc/>
        public Task<RefDataNamespace.EyeColorCollection> EyeColorGetAllAsync()
            => DataInvoker.Current.InvokeAsync(this, _ =>_ef.Query<RefDataNamespace.EyeColor, EfModel.EyeColor>().SelectQueryAsync<RefDataNamespace.EyeColorCollection>(), BusinessInvokerArgs.TransactionSuppress);

        /// <inheritdoc/>
        public Task<RefDataNamespace.PowerSourceCollection> PowerSourceGetAllAsync()
            => DataInvoker.Current.InvokeAsync(this, _ => _cosmos.ValueContainer<RefDataNamespace.PowerSource, Model.PowerSource>("RefData").Query().SelectQueryAsync<RefDataNamespace.PowerSourceCollection>());

        /// <inheritdoc/>
        public Task<RefDataNamespace.CompanyCollection> CompanyGetAllAsync()
            => DataInvoker.Current.InvokeAsync(this, _ => CompanyGetAll_OnImplementationAsync());

        /// <inheritdoc/>
        public Task<RefDataNamespace.StatusCollection> StatusGetAllAsync()
            => DataInvoker.Current.InvokeAsync(this, _ =>_ef.Query<RefDataNamespace.Status, EfModel.Status>().SelectQueryAsync<RefDataNamespace.StatusCollection>(), BusinessInvokerArgs.TransactionSuppress);

        /// <summary>
        /// Provides the <see cref="RefDataNamespace.EyeColor"/> and Entity Framework <see cref="EfModel.EyeColor"/> <i>AutoMapper</i> mapping.
        /// </summary>
        public partial class EyeColorMapperProfile : AutoMapper.Profile
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="EyeColorMapperProfile"/> class.
            /// </summary>
            public EyeColorMapperProfile()
            {
                var d2s = CreateMap<EfModel.EyeColor, RefDataNamespace.EyeColor>();
                d2s.ForMember(s => s.Id, o => o.MapFrom(d => d.EyeColorId));
                d2s.ForMember(s => s.ETag, o => o.ConvertUsing(AutoMapperStringToBase64Converter.Default.ToSource, d => d.RowVersion));

                EyeColorMapperProfileCtor(d2s);
            }

            partial void EyeColorMapperProfileCtor(AutoMapper.IMappingExpression<EfModel.EyeColor, RefDataNamespace.EyeColor> d2s); // Enables the constructor to be extended.
        }

        /// <summary>
        /// Provides the <see cref="RefDataNamespace.PowerSource"/> and Entity Framework <see cref="Model.PowerSource"/> <i>AutoMapper</i> mapping.
        /// </summary>
        public partial class PowerSourceMapperProfile : AutoMapper.Profile
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="PowerSourceMapperProfile"/> class.
            /// </summary>
            public PowerSourceMapperProfile()
            {
                var d2s = CreateMap<Model.PowerSource, RefDataNamespace.PowerSource>();
                d2s.ForMember(s => s.AdditionalInfo, o => o.MapFrom(d => d.AdditionalInfo));

                PowerSourceMapperProfileCtor(d2s);
            }

            partial void PowerSourceMapperProfileCtor(AutoMapper.IMappingExpression<Model.PowerSource, RefDataNamespace.PowerSource> d2s); // Enables the constructor to be extended.
        }

        /// <summary>
        /// Provides the <see cref="RefDataNamespace.Status"/> and Entity Framework <see cref="EfModel.Status"/> <i>AutoMapper</i> mapping.
        /// </summary>
        public partial class StatusMapperProfile : AutoMapper.Profile
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="StatusMapperProfile"/> class.
            /// </summary>
            public StatusMapperProfile()
            {
                var d2s = CreateMap<EfModel.Status, RefDataNamespace.Status>();
                d2s.ForMember(s => s.Id, o => o.MapFrom(d => d.StatusId));
                d2s.ForMember(s => s.ETag, o => o.ConvertUsing(AutoMapperStringToBase64Converter.Default.ToSource, d => d.RowVersion));

                StatusMapperProfileCtor(d2s);
            }

            partial void StatusMapperProfileCtor(AutoMapper.IMappingExpression<EfModel.Status, RefDataNamespace.Status> d2s); // Enables the constructor to be extended.
        }
    }
}

#pragma warning restore
#nullable restore
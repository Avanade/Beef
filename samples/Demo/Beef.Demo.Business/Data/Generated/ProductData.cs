/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Data.OData;
using Beef.Entities;
using Beef.Mapper;
using Beef.Mapper.Converters;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Business.Data
{
    /// <summary>
    /// Provides the Product data access.
    /// </summary>
    public partial class ProductData : IProductData
    {
        #region Private
        #pragma warning disable CS0649 // Defaults to null by design; can be overridden in constructor.

        private readonly Func<int, IODataArgs, Task> _getOnBeforeAsync;
        private readonly Func<Product, int, Task> _getOnAfterAsync;
        private readonly Action<Exception> _getOnException;

        private readonly Func<IQueryable<Product>, ProductArgs, IODataArgs, IQueryable<Product>> _getByArgsOnQuery;
        private readonly Func<ProductArgs, IODataArgs, Task> _getByArgsOnBeforeAsync;
        private readonly Func<ProductCollectionResult, ProductArgs, Task> _getByArgsOnAfterAsync;
        private readonly Action<Exception> _getByArgsOnException;

        #pragma warning restore CS0649
        #endregion

        /// <summary>
        /// Gets the <see cref="Product"/> object that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="Product"/> identifier.</param>
        /// <returns>The selected <see cref="Product"/> object where found; otherwise, <c>null</c>.</returns>
        public Task<Product> GetAsync(int id)
        {
            return DataInvoker.Default.InvokeAsync(this, async () =>
            {
                Product __result = null;
                var __dataArgs = ODataMapper.Default.CreateArgs();
                if (_getOnBeforeAsync != null) await _getOnBeforeAsync(id, __dataArgs);
                __result = await TestOData.Default.GetAsync<Product>(__dataArgs, id);
                if (_getOnAfterAsync != null) await _getOnAfterAsync(__result, id);
                return __result;
            }, new BusinessInvokerArgs { ExceptionHandler = _getOnException });
        }

        /// <summary>
        /// Gets the <see cref="Product"/> collection object that matches the selection criteria.
        /// </summary>
        /// <param name="args">The Args (see <see cref="ProductArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>A <see cref="ProductCollectionResult"/>.</returns>
        public Task<ProductCollectionResult> GetByArgsAsync(ProductArgs args, PagingArgs paging)
        {
            return DataInvoker.Default.InvokeAsync(this, async () =>
            {
                ProductCollectionResult __result = new ProductCollectionResult(paging);
                var __dataArgs = ODataMapper.Default.CreateArgs(__result.Paging);
                if (_getByArgsOnBeforeAsync != null) await _getByArgsOnBeforeAsync(args, __dataArgs);
                __result.Result = await TestOData.Default.SelectQueryAsync<ProductCollection, Product>(__dataArgs,
                    q => _getByArgsOnQuery == null ? q : _getByArgsOnQuery(q, args, __dataArgs));

                if (_getByArgsOnAfterAsync != null) await _getByArgsOnAfterAsync(__result, args);
                return __result;
            }, new BusinessInvokerArgs { ExceptionHandler = _getByArgsOnException });
        }

        /// <summary>
        /// Provides the <see cref="Product"/> entity and OData property mapping.
        /// </summary>
        public partial class ODataMapper : ODataMapper<Product, ODataMapper>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ODataMapper"/> class.
            /// </summary>
            public ODataMapper() : base("Products")
            {
                Property(s => s.Id, "ID").SetUniqueKey(false);
                Property(s => s.Name);
                Property(s => s.Description);
                ODataMapperCtor();
            }
            
            /// <summary>
            /// Enables the <see cref="ODataMapper"/> constructor to be extended.
            /// </summary>
            partial void ODataMapperCtor();
        }
    }
}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Api.Controllers;

/// <summary>
/// Provides the <see cref="PostalInfo"/> Web API functionality.
/// </summary>
[Consumes(System.Net.Mime.MediaTypeNames.Application.Json)]
[Produces(System.Net.Mime.MediaTypeNames.Application.Json)]
public partial class PostalInfoController : ControllerBase
{
    private readonly WebApi _webApi;
    private readonly IPostalInfoManager _manager;

    /// <summary>
    /// Initializes a new instance of the <see cref="PostalInfoController"/> class.
    /// </summary>
    /// <param name="webApi">The <see cref="WebApi"/>.</param>
    /// <param name="manager">The <see cref="IPostalInfoManager"/>.</param>
    public PostalInfoController(WebApi webApi, IPostalInfoManager manager)
        { _webApi = webApi.ThrowIfNull(); _manager = manager.ThrowIfNull(); PostalInfoControllerCtor(); }

    partial void PostalInfoControllerCtor(); // Enables additional functionality to be added to the constructor.

    /// <summary>
    /// Gets the specified <c>PostalInfo</c>.
    /// </summary>
    /// <param name="country">The Country.</param>
    /// <param name="state">The State.</param>
    /// <param name="city">The City.</param>
    /// <returns>The selected <c>PostalInfo</c> where found.</returns>
    [HttpGet("api/v1/postal/{country}/{state}/{city}", Name="PostalInfo_GetPostCodes")]
    [ProducesResponseType(typeof(Common.Entities.PostalInfo), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> GetPostCodes(string? country, string? state, string? city)
        => _webApi.GetWithResultAsync<PostalInfo?>(Request, p => _manager.GetPostCodesAsync(country, state, city));

    /// <summary>
    /// Creates a new <c>PostalInfo</c>.
    /// </summary>
    /// <param name="country">The Country.</param>
    /// <param name="state">The State.</param>
    /// <param name="city">The City.</param>
    /// <returns>The created <c>PostalInfo</c>.</returns>
    [HttpPost("api/v1/postal/{country}/{state}/{city}", Name="PostalInfo_CreatePostCodes")]
    [AcceptsBody(typeof(Common.Entities.PostalInfo))]
    [ProducesResponseType(typeof(Common.Entities.PostalInfo), (int)HttpStatusCode.Created)]
    public Task<IActionResult> CreatePostCodes(string? country, string? state, string? city)
        => _webApi.PostWithResultAsync<PostalInfo, PostalInfo>(Request, p => _manager.CreatePostCodesAsync(p.Value!, country, state, city), statusCode: HttpStatusCode.Created);

    /// <summary>
    /// Updates an existing <c>PostalInfo</c>.
    /// </summary>
    /// <param name="country">The Country.</param>
    /// <param name="state">The State.</param>
    /// <param name="city">The City.</param>
    /// <returns>The updated <c>PostalInfo</c>.</returns>
    [HttpPut("api/v1/postal/{country}/{state}/{city}", Name="PostalInfo_UpdatePostCodes")]
    [AcceptsBody(typeof(Common.Entities.PostalInfo))]
    [ProducesResponseType(typeof(Common.Entities.PostalInfo), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> UpdatePostCodes(string? country, string? state, string? city)
        => _webApi.PutWithResultAsync<PostalInfo>(Request, get: _ => _manager.GetPostCodesAsync(country, state, city), put: p => _manager.UpdatePostCodesAsync(p.Value!, country, state, city), simulatedConcurrency: true);

    /// <summary>
    /// Patches an existing <c>PostalInfo</c>.
    /// </summary>
    /// <param name="country">The Country.</param>
    /// <param name="state">The State.</param>
    /// <param name="city">The City.</param>
    /// <returns>The patched <c>PostalInfo</c>.</returns>
    [HttpPatch("api/v1/postal/{country}/{state}/{city}", Name="PostalInfo_PatchPostCodes")]
    [AcceptsBody(typeof(Common.Entities.PostalInfo), HttpConsts.MergePatchMediaTypeName)]
    [ProducesResponseType(typeof(Common.Entities.PostalInfo), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> PatchPostCodes(string? country, string? state, string? city)
        => _webApi.PatchWithResultAsync<PostalInfo>(Request, get: _ => _manager.GetPostCodesAsync(country, state, city), put: p => _manager.UpdatePostCodesAsync(p.Value!, country, state, city), simulatedConcurrency: true);

    /// <summary>
    /// Deletes the specified <c>PostalInfo</c>.
    /// </summary>
    /// <param name="country">The Country.</param>
    /// <param name="state">The State.</param>
    /// <param name="city">The City.</param>
    [HttpDelete("api/v1/postal/{country}/{state}/{city}", Name="PostalInfo_DeletePostCodes")]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> DeletePostCodes(string? country, string? state, string? city)
        => _webApi.DeleteWithResultAsync(Request, p => _manager.DeletePostCodesAsync(country, state, city));
}

#pragma warning restore
#nullable restore
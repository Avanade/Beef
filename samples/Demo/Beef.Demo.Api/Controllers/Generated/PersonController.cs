/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Api.Controllers;

/// <summary>
/// Provides the <see cref="Person"/> Web API functionality.
/// </summary>
[Tags("person", "bananas")]
[AllowAnonymous]
[Consumes(System.Net.Mime.MediaTypeNames.Application.Json)]
[Produces(System.Net.Mime.MediaTypeNames.Application.Json)]
public partial class PersonController : ControllerBase
{
    private readonly WebApi _webApi;
    private readonly IPersonManager _manager;
    private readonly IPersonManager _personManager;

    /// <summary>
    /// Initializes a new instance of the <see cref="PersonController"/> class.
    /// </summary>
    /// <param name="webApi">The <see cref="WebApi"/>.</param>
    /// <param name="manager">The <see cref="IPersonManager"/>.</param>
    /// <param name="personManager">The <see cref="IPersonManager"/>.</param>
    public PersonController(WebApi webApi, IPersonManager manager, IPersonManager personManager)
        { _webApi = webApi.ThrowIfNull(); _manager = manager.ThrowIfNull(); _personManager = personManager.ThrowIfNull(); PersonControllerCtor(); }

    partial void PersonControllerCtor(); // Enables additional functionality to be added to the constructor.

    /// <summary>
    /// Creates a new <c>Person</c>.
    /// </summary>
    /// <returns>The created <c>Person</c>.</returns>
    [HttpPost("api/v1/persons", Name="Person_Create")]
    [AcceptsBody(typeof(Common.Entities.Person))]
    [ProducesResponseType(typeof(Common.Entities.Person), (int)HttpStatusCode.Created)]
    public Task<IActionResult> Create()
        => _webApi.PostAsync<Person, Person>(Request, p => _manager.CreateAsync(p.Value!), statusCode: HttpStatusCode.Created, locationUri: r => new Uri($"/api/v1/persons/{r.Id}", UriKind.Relative));

    /// <summary>
    /// Deletes the specified <c>Person</c>.
    /// </summary>
    /// <param name="id">The <c>Person</c> identifier.</param>
    [HttpDelete("api/v1/persons/{id}", Name="Person_Delete")]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> Delete(Guid id)
        => _webApi.DeleteAsync(Request, p => _manager.DeleteAsync(id));

    /// <summary>
    /// Gets the specified <c>Person</c>.
    /// </summary>
    /// <param name="id">The <c>Person</c> identifier.</param>
    /// <returns>The selected <c>Person</c> where found.</returns>
    [HttpGet("api/v1/persons/{id}", Name="Person_Get")]
    [ProducesResponseType(typeof(Common.Entities.Person), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> Get(Guid id)
        => _webApi.GetAsync<Person?>(Request, p => _manager.GetAsync(id));

    /// <summary>
    /// Gets the specified <c>Person</c>.
    /// </summary>
    /// <param name="id">The <c>Person</c> identifier.</param>
    /// <returns>The selected <c>Person</c> where found.</returns>
    [HttpGet("api/v1/persons/ex/{id}", Name="Person_GetEx")]
    [ProducesResponseType(typeof(Common.Entities.Person), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> GetEx(Guid id)
        => _webApi.GetAsync<Person?>(Request, p => _manager.GetExAsync(id));

    /// <summary>
    /// Updates an existing <c>Person</c>.
    /// </summary>
    /// <param name="id">The <c>Person</c> identifier.</param>
    /// <returns>The updated <c>Person</c>.</returns>
    [HttpPut("api/v1/persons/{id}", Name="Person_Update")]
    [AcceptsBody(typeof(Common.Entities.Person))]
    [ProducesResponseType(typeof(Common.Entities.Person), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> Update(Guid id)
        => _webApi.PutAsync<Person, Person>(Request, p => _manager.UpdateAsync(p.Value!, id));

    /// <summary>
    /// Updates an existing <c>Person</c>.
    /// </summary>
    /// <param name="id">The <c>Person</c> identifier.</param>
    /// <returns>The updated <c>Person</c>.</returns>
    [HttpPut("api/v1/persons/withRollback/{id}", Name="Person_UpdateWithRollback")]
    [AcceptsBody(typeof(Common.Entities.Person))]
    [ProducesResponseType(typeof(Common.Entities.Person), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> UpdateWithRollback(Guid id)
        => _webApi.PutAsync<Person, Person>(Request, p => _manager.UpdateWithRollbackAsync(p.Value!, id));

    /// <summary>
    /// Patches an existing <c>Person</c>.
    /// </summary>
    /// <param name="id">The <c>Person</c> identifier.</param>
    /// <returns>The patched <c>Person</c>.</returns>
    [HttpPatch("api/v1/persons/{id}", Name="Person_Patch")]
    [AcceptsBody(typeof(Common.Entities.Person), HttpConsts.MergePatchMediaTypeName)]
    [ProducesResponseType(typeof(Common.Entities.Person), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> Patch(Guid id)
        => _webApi.PatchAsync<Person>(Request, get: _ => _manager.GetAsync(id), put: p => _manager.UpdateAsync(p.Value!, id));

    /// <summary>
    /// Gets the <c>Person</c> array that contains the items that match the selection criteria.
    /// </summary>
    /// <returns>The <c>Person</c> array</returns>
    [Tags("apples", "oranges")]
    [HttpGet("api/v1/persons/all", Name="Person_GetAll")]
    [Paging]
    [ProducesResponseType(typeof(Common.Entities.PersonCollection), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> GetAll()
        => _webApi.GetAsync<PersonCollectionResult>(Request, p => _manager.GetAllAsync(p.RequestOptions.Paging), alternateStatusCode: HttpStatusCode.NoContent);

    /// <summary>
    /// Gets the <c>Person</c> array that contains the items that match the selection criteria.
    /// </summary>
    /// <returns>The <c>Person</c> array</returns>
    [HttpGet("api/v1/persons/allnopaging", Name="Person_GetAll2")]
    [ProducesResponseType(typeof(Common.Entities.PersonCollection), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> GetAll2()
        => _webApi.GetAsync<PersonCollectionResult>(Request, p => _manager.GetAll2Async(), alternateStatusCode: HttpStatusCode.NoContent);

    /// <summary>
    /// Gets the <c>Person</c> array that contains the items that match the selection criteria.
    /// </summary>
    /// <param name="firstName">The First Name.</param>
    /// <param name="lastName">The Last Name.</param>
    /// <param name="genders">The Genders.</param>
    /// <param name="orderBy">The Order By.</param>
    /// <returns>The <c>Person</c> array</returns>
    [HttpGet("api/v1/persons", Name="Person_GetByArgs")]
    [Paging]
    [ProducesResponseType(typeof(Common.Entities.PersonCollection), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> GetByArgs(string? firstName = default, string? lastName = default, List<string?>? genders = default, Common.Entities.OrderBy? orderBy = default)
    {
        var args = new PersonArgs { FirstName = firstName, LastName = lastName, GendersSids = genders, OrderBy = orderBy };
        return _webApi.GetAsync<PersonCollectionResult>(Request, p => _manager.GetByArgsAsync(args, p.RequestOptions.Paging), alternateStatusCode: HttpStatusCode.NoContent);
    }

    /// <summary>
    /// Gets the <c>PersonDetail</c> array that contains the items that match the selection criteria.
    /// </summary>
    /// <param name="firstName">The First Name.</param>
    /// <param name="lastName">The Last Name.</param>
    /// <param name="genders">The Genders.</param>
    /// <param name="orderBy">The Order By.</param>
    /// <returns>The <c>PersonDetail</c> array</returns>
    [HttpGet("api/v1/persons/argsdetail", Name="Person_GetDetailByArgs")]
    [Paging]
    [ProducesResponseType(typeof(Common.Entities.PersonDetailCollection), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> GetDetailByArgs(string? firstName = default, string? lastName = default, List<string?>? genders = default, Common.Entities.OrderBy? orderBy = default)
    {
        var args = new PersonArgs { FirstName = firstName, LastName = lastName, GendersSids = genders, OrderBy = orderBy };
        return _webApi.GetAsync<PersonDetailCollectionResult>(Request, p => _manager.GetDetailByArgsAsync(args, p.RequestOptions.Paging), alternateStatusCode: HttpStatusCode.NoContent);
    }

    /// <summary>
    /// Merge first <c>Person</c> into second.
    /// </summary>
    /// <param name="fromId">The from <c>Person</c> identifier.</param>
    /// <param name="toId">The to <c>Person</c> identifier.</param>
    /// <returns>A resultant <c>Person</c>.</returns>
    [HttpPost("api/v1/persons/merge", Name="Person_Merge")]
    [ProducesResponseType(typeof(Common.Entities.Person), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> Merge(Guid fromId, Guid toId)
        => _webApi.PostAsync<Person>(Request, p => _manager.MergeAsync(fromId, toId), alternateStatusCode: HttpStatusCode.NoContent, operationType: CoreEx.OperationType.Update);

    /// <summary>
    /// Mark <c>Person</c>.
    /// </summary>
    [HttpPost("api/v1/persons/mark", Name="Person_Mark")]
    [ProducesResponseType((int)HttpStatusCode.Accepted)]
    public Task<IActionResult> Mark()
        => _webApi.PostAsync(Request, p => _manager.MarkAsync(), statusCode: HttpStatusCode.Accepted, operationType: CoreEx.OperationType.Update);

    /// <summary>
    /// Get <c>Person</c> at specified <c>MapCoordinates</c>.
    /// </summary>
    /// <param name="coordinates">The Coordinates.</param>
    /// <returns>A resultant <c>MapCoordinates</c>.</returns>
    [HttpPost("api/v1/persons/map", Name="Person_Map")]
    [ProducesResponseType(typeof(Common.Entities.MapCoordinates), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> Map(MapCoordinates? coordinates = default)
    {
        var args = new MapArgs { Coordinates = coordinates };
        return _webApi.PostAsync<MapCoordinates>(Request, p => _manager.MapAsync(args), alternateStatusCode: HttpStatusCode.NoContent, operationType: CoreEx.OperationType.Read);
    }

    /// <summary>
    /// Get no arguments.
    /// </summary>
    /// <returns>The selected <c>Person</c> where found.</returns>
    [HttpGet("api/v1/persons/noargsforme", Name="Person_GetNoArgs")]
    [ProducesResponseType(typeof(Common.Entities.Person), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> GetNoArgs()
        => _webApi.GetAsync<Person?>(Request, p => _manager.GetNoArgsAsync());

    /// <summary>
    /// Gets the specified <c>PersonDetail</c>.
    /// </summary>
    /// <param name="id">The <c>Person</c> identifier.</param>
    /// <returns>The selected <c>PersonDetail</c> where found.</returns>
    [HttpGet("api/v1/persons/{id}/detail", Name="Person_GetDetail")]
    [ProducesResponseType(typeof(Common.Entities.PersonDetail), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> GetDetail(Guid id)
        => _webApi.GetAsync<PersonDetail?>(Request, p => _manager.GetDetailAsync(id));

    /// <summary>
    /// Updates an existing <c>PersonDetail</c>.
    /// </summary>
    /// <param name="id">The <c>Person</c> identifier.</param>
    /// <returns>The updated <c>PersonDetail</c>.</returns>
    [HttpPut("api/v1/persons/{id}/detail", Name="Person_UpdateDetail")]
    [AcceptsBody(typeof(Common.Entities.PersonDetail))]
    [ProducesResponseType(typeof(Common.Entities.PersonDetail), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> UpdateDetail(Guid id)
        => _webApi.PutAsync<PersonDetail, PersonDetail>(Request, p => _manager.UpdateDetailAsync(p.Value!, id));

    /// <summary>
    /// Patches an existing <c>PersonDetail</c>.
    /// </summary>
    /// <param name="id">The <c>Person</c> identifier.</param>
    /// <returns>The patched <c>PersonDetail</c>.</returns>
    [HttpPatch("api/v1/persons/{id}/detail", Name="Person_PatchDetail")]
    [AcceptsBody(typeof(Common.Entities.PersonDetail), HttpConsts.MergePatchMediaTypeName)]
    [ProducesResponseType(typeof(Common.Entities.PersonDetail), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> PatchDetail(Guid id)
        => _webApi.PatchAsync<PersonDetail>(Request, get: _ => _manager.GetDetailAsync(id), put: p => _personManager.UpdateDetailAsync(p.Value!, id));

    /// <summary>
    /// Actually validating the FromBody parameter generation.
    /// </summary>
    /// <param name="person">The Person.</param>
    [HttpPost("api/v1/persons/fromBody", Name="Person_Add")]
    [ProducesResponseType((int)HttpStatusCode.Created)]
    public Task<IActionResult> Add([FromBody] Person person)
        => _webApi.PostAsync(Request, p => _manager.AddAsync(person), statusCode: HttpStatusCode.Created, operationType: CoreEx.OperationType.Unspecified);

    /// <summary>
    /// Actually validating the AcceptBody parameter generation.
    /// </summary>
    [HttpPost("api/v1/persons/acceptsBody", Name="Person_Add2")]
    [AcceptsBody(typeof(Common.Entities.Person))]
    [ProducesResponseType((int)HttpStatusCode.Created)]
    public Task<IActionResult> Add2()
        => _webApi.PostAsync<Person>(Request, p => _manager.Add2Async(p.Value!), statusCode: HttpStatusCode.Created, operationType: CoreEx.OperationType.Unspecified);

    /// <summary>
    /// Actually validating the Custom with Value parameter generation.
    /// </summary>
    [HttpPost("api/v1/persons/acceptsBodyValue", Name="Person_Add3")]
    [AcceptsBody(typeof(Common.Entities.Person))]
    [ProducesResponseType((int)HttpStatusCode.Created)]
    public Task<IActionResult> Add3()
        => _webApi.PostAsync<Person>(Request, p => _manager.Add3Async(p.Value!), statusCode: HttpStatusCode.Created, operationType: CoreEx.OperationType.Unspecified);

    /// <summary>
    /// Validate CustomManagerOnly.
    /// </summary>
    [HttpPost("api/v1/persons/cmo", Name="Person_CustomManagerOnly")]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> CustomManagerOnly()
        => _webApi.PostAsync(Request, p => _manager.CustomManagerOnlyAsync(), statusCode: HttpStatusCode.NoContent, operationType: CoreEx.OperationType.Unspecified);

    /// <summary>
    /// Get Null.
    /// </summary>
    /// <param name="name">The Name.</param>
    /// <param name="names">The Names.</param>
    /// <returns>A resultant <c>Person</c>.</returns>
    [HttpGet("api/v1/persons/null", Name="Person_GetNull")]
    [ProducesResponseType(typeof(Common.Entities.Person), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> GetNull(string? name, List<string>? names = default)
        => _webApi.GetAsync<Person?>(Request, p => _manager.GetNullAsync(name, names), operationType: CoreEx.OperationType.Unspecified);

    /// <summary>
    /// Validate when an Event is published but not sent.
    /// </summary>
    /// <returns>The updated <c>Person</c>.</returns>
    [HttpPut("api/v1/persons/publishnosend", Name="Person_EventPublishNoSend")]
    [AcceptsBody(typeof(Common.Entities.Person))]
    [ProducesResponseType(typeof(Common.Entities.Person), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> EventPublishNoSend()
        => _webApi.PutAsync<Person, Person>(Request, p => _manager.EventPublishNoSendAsync(p.Value!));

    /// <summary>
    /// Gets the <c>Person</c> array that contains the items that match the selection criteria.
    /// </summary>
    /// <param name="firstName">The First Name.</param>
    /// <param name="lastName">The Last Name.</param>
    /// <param name="genders">The Genders.</param>
    /// <param name="orderBy">The Order By.</param>
    /// <returns>The <c>Person</c> array</returns>
    [HttpGet("api/v1/persons/args", Name="Person_GetByArgsWithEf")]
    [Paging]
    [ProducesResponseType(typeof(Common.Entities.PersonCollection), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> GetByArgsWithEf(string? firstName = default, string? lastName = default, List<string?>? genders = default, Common.Entities.OrderBy? orderBy = default)
    {
        var args = new PersonArgs { FirstName = firstName, LastName = lastName, GendersSids = genders, OrderBy = orderBy };
        return _webApi.GetAsync<PersonCollectionResult>(Request, p => _manager.GetByArgsWithEfAsync(args, p.RequestOptions.Paging), alternateStatusCode: HttpStatusCode.NoContent);
    }

    /// <summary>
    /// Throw Error.
    /// </summary>
    [HttpPost("api/v1/persons/error", Name="Person_ThrowError")]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> ThrowError()
        => _webApi.PostAsync(Request, p => _manager.ThrowErrorAsync(), statusCode: HttpStatusCode.NoContent, operationType: CoreEx.OperationType.Unspecified);

    /// <summary>
    /// Invoke Api Via Agent.
    /// </summary>
    /// <param name="id">The <c>Person</c> identifier.</param>
    /// <returns>A resultant <c>string</c>.</returns>
    [HttpPost("api/v1/persons/invokeApi", Name="Person_InvokeApiViaAgent")]
    [ProducesResponseType(typeof(string), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> InvokeApiViaAgent(Guid id)
        => _webApi.PostAsync<string>(Request, p => _manager.InvokeApiViaAgentAsync(id), alternateStatusCode: HttpStatusCode.NotFound, operationType: CoreEx.OperationType.Unspecified);

    /// <summary>
    /// Param Coll.
    /// </summary>
    /// <param name="addresses">The Addresses.</param>
    [HttpPost("api/v1/persons/paramcoll", Name="Person_ParamColl")]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> ParamColl([FromBody] AddressCollection? addresses)
        => _webApi.PostAsync(Request, p => _manager.ParamCollAsync(addresses), statusCode: HttpStatusCode.NoContent, operationType: CoreEx.OperationType.Unspecified);

    /// <summary>
    /// Gets the specified <c>Person</c>.
    /// </summary>
    /// <param name="id">The <c>Person</c> identifier.</param>
    /// <returns>The selected <c>Person</c> where found.</returns>
    [HttpGet("api/v1/persons/ef/{id}", Name="Person_GetWithEf")]
    [ProducesResponseType(typeof(Common.Entities.Person), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> GetWithEf(Guid id)
        => _webApi.GetAsync<Person?>(Request, p => _manager.GetWithEfAsync(id));

    /// <summary>
    /// Creates a new <c>Person</c>.
    /// </summary>
    /// <returns>The created <c>Person</c>.</returns>
    [HttpPost("api/v1/persons/ef", Name="Person_CreateWithEf")]
    [AcceptsBody(typeof(Common.Entities.Person))]
    [ProducesResponseType(typeof(Common.Entities.Person), (int)HttpStatusCode.Created)]
    public Task<IActionResult> CreateWithEf()
        => _webApi.PostAsync<Person, Person>(Request, p => _manager.CreateWithEfAsync(p.Value!), statusCode: HttpStatusCode.Created, locationUri: r => new Uri($"/api/v1/persons/ef/{r.Id}", UriKind.Relative));

    /// <summary>
    /// Updates an existing <c>Person</c>.
    /// </summary>
    /// <param name="id">The <c>Person</c> identifier.</param>
    /// <returns>The updated <c>Person</c>.</returns>
    [HttpPut("api/v1/persons/ef/{id}", Name="Person_UpdateWithEf")]
    [AcceptsBody(typeof(Common.Entities.Person))]
    [ProducesResponseType(typeof(Common.Entities.Person), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> UpdateWithEf(Guid id)
        => _webApi.PutAsync<Person, Person>(Request, p => _manager.UpdateWithEfAsync(p.Value!, id));

    /// <summary>
    /// Deletes the specified <c>Person</c>.
    /// </summary>
    /// <param name="id">The <c>Person</c> identifier.</param>
    [HttpDelete("api/v1/persons/ef/{id}", Name="Person_DeleteWithEf")]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> DeleteWithEf(Guid id)
        => _webApi.DeleteAsync(Request, p => _manager.DeleteWithEfAsync(id));

    /// <summary>
    /// Patches an existing <c>Person</c>.
    /// </summary>
    /// <param name="id">The <c>Person</c> identifier.</param>
    /// <returns>The patched <c>Person</c>.</returns>
    [HttpPatch("api/v1/persons/ef/{id}", Name="Person_PatchWithEf")]
    [AcceptsBody(typeof(Common.Entities.Person), HttpConsts.MergePatchMediaTypeName)]
    [ProducesResponseType(typeof(Common.Entities.Person), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> PatchWithEf(Guid id)
        => _webApi.PatchAsync<Person>(Request, get: _ => _manager.GetAsync(id), put: p => _manager.UpdateAsync(p.Value!, id));

    /// <summary>
    /// Get Documentation.
    /// </summary>
    /// <param name="id">The <c>Person</c> identifier.</param>
    /// <returns>A resultant <c>FileContentResult</c>.</returns>
    [HttpGet("api/v1/persons/{id}/documentation", Name="Person_GetDocumentation")]
    [Produces("text/plain")]
    [ProducesResponseType((int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> GetDocumentation(Guid id)
        => _webApi.GetAsync<FileContentResult>(Request, p => _manager.GetDocumentationAsync(id), alternateStatusCode: HttpStatusCode.NoContent, operationType: CoreEx.OperationType.Unspecified);

    /// <summary>
    /// Simulate Work.
    /// </summary>
    /// <param name="id">The <c>Person</c> identifier.</param>
    /// <returns>A resultant <c>string</c>.</returns>
    [HttpGet("api/v1/persons/simulate", Name="Person_SimulateWork")]
    [ProducesResponseType(typeof(string), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> SimulateWork(Guid id)
        => _webApi.GetWithResultAsync<string?>(Request, p => _manager.SimulateWorkAsync(id), alternateStatusCode: HttpStatusCode.NoContent, operationType: CoreEx.OperationType.Unspecified);
}

#pragma warning restore
#nullable restore
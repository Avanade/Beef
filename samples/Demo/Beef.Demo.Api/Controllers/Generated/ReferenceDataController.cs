/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Beef;
using Beef.AspNetCore.WebApi;
using Beef.Entities;
using Beef.RefData;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Api.Controllers
{
    /// <summary>
    /// Provides the <b>ReferenceData</b> Web API functionality.
    /// </summary>
    public partial class ReferenceDataController : ControllerBase
    {
        /// <summary>
        /// Determines whether get named all names is supported.
        /// </summary>
        public static bool IsGetNamedAllNamesSupported { get; set; } = false;

        /// <summary> 
        /// Gets all of the <see cref="RefDataNamespace.Gender"/> reference data entities that match the specified criteria.
        /// </summary>
        /// <param name="codes">The reference data code list.</param>
        /// <param name="text">The reference data text (including wildcards).</param>
        /// <returns>A <see cref="RefDataNamespace.GenderCollection"/>.</returns>
        [HttpGet()]
        [Route("api/v1/demo/ref/genders")]
        [ProducesResponseType(typeof(RefDataNamespace.GenderCollection), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult GenderGetAll(List<string> codes = default, string text = default)
        {
            return new WebApiGet<RefDataNamespace.GenderCollection>(this, () => Task.FromResult(ReferenceDataFilter.ApplyFilter<RefDataNamespace.GenderCollection, RefDataNamespace.Gender>(ReferenceData.Current.Gender, codes, text)),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NoContent);
        }

        /// <summary> 
        /// Gets all of the <see cref="RefDataNamespace.EyeColor"/> reference data entities that match the specified criteria.
        /// </summary>
        /// <param name="codes">The reference data code list.</param>
        /// <param name="text">The reference data text (including wildcards).</param>
        /// <returns>A <see cref="RefDataNamespace.EyeColorCollection"/>.</returns>
        [HttpGet()]
        [Route("api/v1/demo/ref/eyeColors")]
        [ProducesResponseType(typeof(RefDataNamespace.EyeColorCollection), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult EyeColorGetAll(List<string> codes = default, string text = default)
        {
            return new WebApiGet<RefDataNamespace.EyeColorCollection>(this, () => Task.FromResult(ReferenceDataFilter.ApplyFilter<RefDataNamespace.EyeColorCollection, RefDataNamespace.EyeColor>(ReferenceData.Current.EyeColor, codes, text)),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NoContent);
        }

        /// <summary> 
        /// Gets all of the <see cref="RefDataNamespace.PowerSource"/> reference data entities that match the specified criteria.
        /// </summary>
        /// <param name="codes">The reference data code list.</param>
        /// <param name="text">The reference data text (including wildcards).</param>
        /// <returns>A <see cref="RefDataNamespace.PowerSourceCollection"/>.</returns>
        [HttpGet()]
        [Route("api/v1/demo/ref/powerSources")]
        [ProducesResponseType(typeof(RefDataNamespace.PowerSourceCollection), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult PowerSourceGetAll(List<string> codes = default, string text = default)
        {
            return new WebApiGet<RefDataNamespace.PowerSourceCollection>(this, () => Task.FromResult(ReferenceDataFilter.ApplyFilter<RefDataNamespace.PowerSourceCollection, RefDataNamespace.PowerSource>(ReferenceData.Current.PowerSource, codes, text)),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NoContent);
        }

        /// <summary> 
        /// Gets all of the <see cref="RefDataNamespace.Company"/> reference data entities that match the specified criteria.
        /// </summary>
        /// <param name="codes">The reference data code list.</param>
        /// <param name="text">The reference data text (including wildcards).</param>
        /// <returns>A <see cref="RefDataNamespace.CompanyCollection"/>.</returns>
        [HttpGet()]
        [Route("api/v1/demo/ref/companies")]
        [ProducesResponseType(typeof(RefDataNamespace.CompanyCollection), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult CompanyGetAll(List<string> codes = default, string text = default)
        {
            return new WebApiGet<RefDataNamespace.CompanyCollection>(this, () => Task.FromResult(ReferenceDataFilter.ApplyFilter<RefDataNamespace.CompanyCollection, RefDataNamespace.Company>(ReferenceData.Current.Company, codes, text)),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NoContent);
        }

        /// <summary>
        /// Gets the named reference data entities.
        /// </summary>
        /// <param name="names">The list of reference data names; to retrieve all pass a single name of <see cref="ReferenceDataAgent.GetNamedAllNames"/>.</param>
        /// <returns>A <see cref="ReferenceDataMultiCollection"/>.</returns>
        [HttpGet()]
        [Route("api/v1/ref")]
        [ProducesResponseType(typeof(ReferenceDataMultiCollection), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult GetNamed(string[] names)
        {
            return new WebApiGet<ReferenceDataMultiCollection>(this, () =>
            {
                if (names == null || names.Length == 0)
                    return Task.FromResult<ReferenceDataMultiCollection>(null);
                            
                List<string> allNames = null;
                if (IsGetNamedAllNamesSupported && names.Length == 1 && names[0] == Common.Agents.ReferenceDataAgent.GetNamedAllNames)
                {
                    allNames = new List<string>
                    {
                        ReferenceData.Property_Gender,
                        ReferenceData.Property_EyeColor,
                        ReferenceData.Property_PowerSource,
                        ReferenceData.Property_Company,
                    };
                }

                var coll = new ReferenceDataMultiCollection();
                foreach (string name in allNames == null ? names : allNames.ToArray())
                {
                    switch (name)
                    {
                        case ReferenceData.Property_Gender: coll.Add(new ReferenceDataMultiItem { Name = ReferenceData.Property_Gender, Items = ReferenceData.Current[typeof(RefDataNamespace.Gender)] }); break;
                        case ReferenceData.Property_EyeColor: coll.Add(new ReferenceDataMultiItem { Name = ReferenceData.Property_EyeColor, Items = ReferenceData.Current[typeof(RefDataNamespace.EyeColor)] }); break;
                        case ReferenceData.Property_PowerSource: coll.Add(new ReferenceDataMultiItem { Name = ReferenceData.Property_PowerSource, Items = ReferenceData.Current[typeof(RefDataNamespace.PowerSource)] }); break;
                        case ReferenceData.Property_Company: coll.Add(new ReferenceDataMultiItem { Name = ReferenceData.Property_Company, Items = ReferenceData.Current[typeof(RefDataNamespace.Company)] }); break;
                    }
                }

                return Task.FromResult(coll);
            }, operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NoContent);
        }
    }
}

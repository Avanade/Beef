/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Collections.Generic;
using System.Net;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json.Linq;
using Beef;
using Beef.AspNetCore.WebApi;
using Beef.Entities;
using Beef.Demo.Business;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Api.Controllers
{
    /// <summary>
    /// Provides the <b>Robot</b> API functionality.
    /// </summary>
    [Route("api/v1/robots")]
    public partial class RobotController : ControllerBase
    {
        /// <summary>
        /// Gets the <see cref="Robot"/> entity that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="Robot"/> identifier.</param>
        /// <returns>The selected <see cref="Robot"/> entity where found.</returns>
        [HttpGet()]
        [Route("{id}")]
        [ProducesResponseType(typeof(Robot), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NotFound)]
        public IActionResult Get(Guid id)
        {
            return new WebApiGet<Robot>(this, () => Factory.Create<IRobotManager>().GetAsync(id),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NotFound);
        }

        /// <summary>
        /// Creates the <see cref="Robot"/> entity.
        /// </summary>
        /// <param name="value">The <see cref="Robot"/> entity.</param>
        /// <returns>The created <see cref="Robot"/> entity.</returns>
        [HttpPost()]
        [Route("")]
        [ProducesResponseType(typeof(Robot), (int)HttpStatusCode.Created)]
        public IActionResult Create([FromBody] Robot value)
        {
            return new WebApiPost<Robot>(this, () => Factory.Create<IRobotManager>().CreateAsync(WebApiActionBase.Value(value)),
                operationType: OperationType.Create, statusCode: HttpStatusCode.Created, alternateStatusCode: null);
        }

        /// <summary>
        /// Updates the <see cref="Robot"/> entity.
        /// </summary>
        /// <param name="value">The <see cref="Robot"/> entity.</param>
        /// <param name="id">The <see cref="Robot"/> identifier.</param>
        /// <returns>The updated <see cref="Robot"/> entity.</returns>
        [HttpPut()]
        [Route("{id}")]
        [ProducesResponseType(typeof(Robot), (int)HttpStatusCode.OK)]
        public IActionResult Update([FromBody] Robot value, Guid id)
        {
            return new WebApiPut<Robot>(this, () => Factory.Create<IRobotManager>().UpdateAsync(WebApiActionBase.Value(value), id),
                operationType: OperationType.Update, statusCode: HttpStatusCode.OK, alternateStatusCode: null);
        }

        /// <summary>
        /// Patches the <see cref="Robot"/> entity.
        /// </summary>
        /// <param name="value">The <see cref="JToken"/> value that contains the patch content for the entity.</param>
        /// <param name="id">The <see cref="Robot"/> identifier.</param>
        /// <returns>The patched <see cref="Robot"/> entity.</returns>
        [HttpPatch()]
        [Route("{id}")]
        [ProducesResponseType(typeof(Robot), (int)HttpStatusCode.OK)]
        public IActionResult Patch([FromBody] JToken value, Guid id)
        {
            return new WebApiPatch<Robot>(this, value, () => Factory.Create<IRobotManager>().GetAsync(id), (__value) => Factory.Create<IRobotManager>().UpdateAsync(__value, id),
                operationType: OperationType.Update, statusCode: HttpStatusCode.OK, alternateStatusCode: null);
        }

        /// <summary>
        /// Deletes the <see cref="Robot"/> entity that matches the selection criteria.
        /// </summary>
        /// <param name="id">The <see cref="Robot"/> identifier.</param>
        [HttpDelete()]
        [Route("{id}")]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult Delete(Guid id)
        {
            return new WebApiDelete(this, () => Factory.Create<IRobotManager>().DeleteAsync(id),
                operationType: OperationType.Delete, statusCode: HttpStatusCode.NoContent);
        }

        /// <summary>
        /// Gets the <see cref="Robot"/> collection entity that matches the selection criteria.
        /// </summary>
        /// <param name="modelNo">The Model number.</param>
        /// <param name="serialNo">The Unique serial number.</param>
        /// <param name="powerSources">The Power Sources (see <see cref="RefDataNamespace.PowerSource"/>).</param>
        /// <returns>A <see cref="RobotCollection"/>.</returns>
        [HttpGet()]
        [Route("")]
        [ProducesResponseType(typeof(RobotCollection), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult GetByArgs(string modelNo = default(string), string serialNo = default(string), List<string> powerSources = default(List<string>))
        {
            var args = new RobotArgs { ModelNo = modelNo, SerialNo = serialNo, PowerSourcesSids = powerSources };
            return new WebApiGet<RobotCollectionResult, RobotCollection, Robot>(this, () => Factory.Create<IRobotManager>().GetByArgsAsync(args, WebApiQueryString.CreatePagingArgs(this)),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NoContent);
        }

        /// <summary>
        /// Raises a <see cref="Robot.PowerSource"/> change event.
        /// </summary>
        /// <param name="id">The <see cref="Robot"/> identifier.</param>
        /// <param name="powerSource">The Power Source (see <see cref="RefDataNamespace.PowerSource"/>).</param>
        [HttpPost]
        [Route("{id}/powerSource/{powerSource}")]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult RaisePowerSourceChange(Guid id, string powerSource)
        {
            return new WebApiPost(this, () => Factory.Create<IRobotManager>().RaisePowerSourceChangeAsync(id, powerSource),
                operationType: OperationType.Unspecified, statusCode: HttpStatusCode.NoContent);
        }
    }
}
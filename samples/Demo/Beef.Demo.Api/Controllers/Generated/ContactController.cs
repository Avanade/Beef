/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Net;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json.Linq;
using Beef;
using Beef.AspNetCore.WebApi;
using Beef.Entities;
using Beef.Demo.Business;
using Beef.Demo.Business.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Api.Controllers
{
    /// <summary>
    /// Provides the <see cref="Contact"/> Web API functionality.
    /// </summary>
    [AllowAnonymous]
    [Route("api/v1/contacts")]
    public partial class ContactController : ControllerBase
    {
        private readonly IContactManager _manager;
        private readonly Microsoft.Extensions.Configuration.IConfiguration _config;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactController"/> class.
        /// </summary>
        /// <param name="manager">The <see cref="IContactManager"/>.</param>
        /// <param name="config">The <see cref="Microsoft.Extensions.Configuration.IConfiguration"/>.</param>
        public ContactController(IContactManager manager, Microsoft.Extensions.Configuration.IConfiguration config)
            { _manager = Check.NotNull(manager, nameof(manager)); _config = Check.NotNull(config, nameof(config)); ContactControllerCtor(); }

        partial void ContactControllerCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the <see cref="ContactCollectionResult"/> that contains the items that match the selection criteria.
        /// </summary>
        /// <returns>The <see cref="ContactCollection"/></returns>
        [HttpGet("")]
        [ProducesResponseType(typeof(ContactCollection), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult GetAll() =>
            new WebApiGet<ContactCollectionResult, ContactCollection, Contact>(this, () => _manager.GetAllAsync(),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NoContent);

        /// <summary>
        /// Gets the specified <see cref="Contact"/>.
        /// </summary>
        /// <param name="id">The <see cref="Contact"/> identifier.</param>
        /// <returns>The selected <see cref="Contact"/> where found.</returns>
        [HttpGet("{id}")]
        [ProducesResponseType(typeof(Contact), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NotFound)]
        public IActionResult Get(Guid id) =>
            new WebApiGet<Contact?>(this, () => _manager.GetAsync(id),
                operationType: OperationType.Read, statusCode: HttpStatusCode.OK, alternateStatusCode: HttpStatusCode.NotFound);

        /// <summary>
        /// Creates a new <see cref="Contact"/>.
        /// </summary>
        /// <param name="value">The <see cref="Contact"/>.</param>
        /// <returns>The created <see cref="Contact"/>.</returns>
        [HttpPost("")]
        [ProducesResponseType(typeof(Contact), (int)HttpStatusCode.Created)]
        public IActionResult Create([FromBody] Contact value) =>
            new WebApiPost<Contact>(this, () => _manager.CreateAsync(WebApiActionBase.Value(value)),
                operationType: OperationType.Create, statusCode: HttpStatusCode.Created, alternateStatusCode: null);

        /// <summary>
        /// Updates an existing <see cref="Contact"/>.
        /// </summary>
        /// <param name="value">The <see cref="Contact"/>.</param>
        /// <param name="id">The <see cref="Contact"/> identifier.</param>
        /// <returns>The updated <see cref="Contact"/>.</returns>
        [HttpPut("{id}")]
        [ProducesResponseType(typeof(Contact), (int)HttpStatusCode.OK)]
        public IActionResult Update([FromBody] Contact value, Guid id) =>
            new WebApiPut<Contact>(this, () => _manager.UpdateAsync(WebApiActionBase.Value(value), id),
                operationType: OperationType.Update, statusCode: HttpStatusCode.OK, alternateStatusCode: null);

        /// <summary>
        /// Deletes the specified <see cref="Contact"/>.
        /// </summary>
        /// <param name="id">The <see cref="Contact"/> identifier.</param>
        [HttpDelete("{id}")]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult Delete(Guid id) =>
            new WebApiDelete(this, () => _manager.DeleteAsync(id),
                operationType: OperationType.Delete, statusCode: HttpStatusCode.NoContent);

        /// <summary>
        /// Raise Event.
        /// </summary>
        /// <param name="throwError">Indicates whether throw a DivideByZero exception.</param>
        [HttpPost("raise")]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public IActionResult RaiseEvent(bool throwError) =>
            new WebApiPost(this, () => _manager.RaiseEventAsync(throwError),
                operationType: OperationType.Unspecified, statusCode: HttpStatusCode.NoContent);
    }
}

#pragma warning restore
#nullable restore
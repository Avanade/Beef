/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Api.Controllers
{
    /// <summary>
    /// Provides the <see cref="TripPerson"/> Web API functionality.
    /// </summary>
    [Route("api/v1/tripPeople")]
    [Produces(System.Net.Mime.MediaTypeNames.Application.Json)]
    public partial class TripPersonController : ControllerBase
    {
        private readonly WebApi _webApi;
        private readonly ITripPersonManager _manager;

        /// <summary>
        /// Initializes a new instance of the <see cref="TripPersonController"/> class.
        /// </summary>
        /// <param name="webApi">The <see cref="WebApi"/>.</param>
        /// <param name="manager">The <see cref="ITripPersonManager"/>.</param>
        public TripPersonController(WebApi webApi, ITripPersonManager manager)
            { _webApi = webApi ?? throw new ArgumentNullException(nameof(webApi)); _manager = manager ?? throw new ArgumentNullException(nameof(manager)); TripPersonControllerCtor(); }

        partial void TripPersonControllerCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the specified <see cref="TripPerson"/>.
        /// </summary>
        /// <param name="id">The <see cref="TripPerson"/> identifier (username).</param>
        /// <returns>The selected <see cref="TripPerson"/> where found.</returns>
        [HttpGet("{id}")]
        [ProducesResponseType(typeof(TripPerson), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NotFound)]
        public Task<IActionResult> Get(string? id) =>
            _webApi.GetAsync<TripPerson?>(Request, p => _manager.GetAsync(id));

        /// <summary>
        /// Creates a new <see cref="TripPerson"/>.
        /// </summary>
        /// <returns>The created <see cref="TripPerson"/>.</returns>
        [HttpPost("")]
        [AcceptsBody(typeof(TripPerson))]
        [ProducesResponseType(typeof(TripPerson), (int)HttpStatusCode.Created)]
        public Task<IActionResult> Create() =>
            _webApi.PostAsync<TripPerson, TripPerson>(Request, p => _manager.CreateAsync(p.Value!));

        /// <summary>
        /// Updates an existing <see cref="TripPerson"/>.
        /// </summary>
        /// <param name="id">The <see cref="TripPerson"/> identifier (username).</param>
        /// <returns>The updated <see cref="TripPerson"/>.</returns>
        [HttpPut("{id}")]
        [AcceptsBody(typeof(TripPerson))]
        [ProducesResponseType(typeof(TripPerson), (int)HttpStatusCode.OK)]
        public Task<IActionResult> Update(string? id) =>
            _webApi.PutAsync<TripPerson, TripPerson>(Request, p => _manager.UpdateAsync(p.Value!, id));

        /// <summary>
        /// Deletes the specified <see cref="TripPerson"/>.
        /// </summary>
        /// <param name="id">The <see cref="TripPerson"/> identifier (username).</param>
        [HttpDelete("{id}")]
        [ProducesResponseType((int)HttpStatusCode.NoContent)]
        public Task<IActionResult> Delete(string? id) =>
            _webApi.DeleteAsync(Request, p => _manager.DeleteAsync(id));
    }
}

#pragma warning restore
#nullable restore
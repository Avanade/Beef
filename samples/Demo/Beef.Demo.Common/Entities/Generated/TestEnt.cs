/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Beef.Entities;
using Beef.RefData;
using Newtonsoft.Json;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Common.Entities
{
    /// <summary>
    /// Represents the Test Ent entity.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class TestEnt : EntityBase, IEquatable<TestEnt>
    {
        #region Privates

        private bool _isSomeSome = false;
        private bool _isSomeSome2 = true;
        private int _count = 8;
        private string? _text = "XXXXX";

        #endregion

        #region Properties

        /// <summary>
        /// Indicates whether Is Some Some.
        /// </summary>
        [JsonProperty("isSomeSome", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Is Some Some")]
        public bool IsSomeSome
        {
            get => _isSomeSome;
            set => SetValue(ref _isSomeSome, value, false, false, nameof(IsSomeSome));
        }

        /// <summary>
        /// Indicates whether Is Some Some2.
        /// </summary>
        [JsonProperty("isSomeSome2", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Is Some Some2")]
        public bool IsSomeSome2
        {
            get => _isSomeSome2;
            set => SetValue(ref _isSomeSome2, value, false, false, nameof(IsSomeSome2));
        }

        /// <summary>
        /// Gets or sets the Count.
        /// </summary>
        [JsonProperty("count", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Count")]
        public int Count
        {
            get => _count;
            set => SetValue(ref _count, value, false, false, nameof(Count));
        }

        /// <summary>
        /// Gets or sets the Text.
        /// </summary>
        [JsonProperty("text", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Text")]
        public string? Text
        {
            get => _text;
            set => SetValue(ref _text, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(Text));
        }

        #endregion

        #region IEquatable

        /// <summary>
        /// Determines whether the specified object is equal to the current object by comparing the values of all the properties.
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public override bool Equals(object? obj) => obj is TestEnt val && Equals(val);

        /// <summary>
        /// Determines whether the specified <see cref="TestEnt"/> is equal to the current <see cref="TestEnt"/> by comparing the values of all the properties.
        /// </summary>
        /// <param name="value">The <see cref="TestEnt"/> to compare with the current <see cref="TestEnt"/>.</param>
        /// <returns><c>true</c> if the specified <see cref="TestEnt"/> is equal to the current <see cref="TestEnt"/>; otherwise, <c>false</c>.</returns>
        public bool Equals(TestEnt? value)
        {
            if (value == null)
                return false;
            else if (ReferenceEquals(value, this))
                return true;

            return base.Equals((object)value)
                && Equals(IsSomeSome, value.IsSomeSome)
                && Equals(IsSomeSome2, value.IsSomeSome2)
                && Equals(Count, value.Count)
                && Equals(Text, value.Text);
        }

        /// <summary>
        /// Compares two <see cref="TestEnt"/> types for equality.
        /// </summary>
        /// <param name="a"><see cref="TestEnt"/> A.</param>
        /// <param name="b"><see cref="TestEnt"/> B.</param>
        /// <returns><c>true</c> indicates equal; otherwise, <c>false</c> for not equal.</returns>
        public static bool operator == (TestEnt? a, TestEnt? b) => Equals(a, b);

        /// <summary>
        /// Compares two <see cref="TestEnt"/> types for non-equality.
        /// </summary>
        /// <param name="a"><see cref="TestEnt"/> A.</param>
        /// <param name="b"><see cref="TestEnt"/> B.</param>
        /// <returns><c>true</c> indicates not equal; otherwise, <c>false</c> for equal.</returns>
        public static bool operator != (TestEnt? a, TestEnt? b) => !Equals(a, b);

        /// <summary>
        /// Returns the hash code for the <see cref="TestEnt"/>.
        /// </summary>
        /// <returns>The hash code for the <see cref="TestEnt"/>.</returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(IsSomeSome);
            hash.Add(IsSomeSome2);
            hash.Add(Count);
            hash.Add(Text);
            return base.GetHashCode() ^ hash.ToHashCode();
        }
    
        #endregion

        #region ICopyFrom
    
        /// <summary>
        /// Performs a copy from another <see cref="TestEnt"/> updating this instance.
        /// </summary>
        /// <param name="from">The <see cref="TestEnt"/> to copy from.</param>
        public override void CopyFrom(object from)
        {
            var fval = ValidateCopyFromType<TestEnt>(from);
            CopyFrom(fval);
        }
        
        /// <summary>
        /// Performs a copy from another <see cref="TestEnt"/> updating this instance.
        /// </summary>
        /// <param name="from">The <see cref="TestEnt"/> to copy from.</param>
        public void CopyFrom(TestEnt from)
        {
            if (from == null)
                throw new ArgumentNullException(nameof(from));

            CopyFrom((EntityBase)from);
            IsSomeSome = from.IsSomeSome;
            IsSomeSome2 = from.IsSomeSome2;
            Count = from.Count;
            Text = from.Text;

            OnAfterCopyFrom(from);
        }

        #endregion

        #region ICloneable
        
        /// <summary>
        /// Creates a deep copy of the <see cref="TestEnt"/>.
        /// </summary>
        /// <returns>A deep copy of the <see cref="TestEnt"/>.</returns>
        public override object Clone()
        {
            var clone = new TestEnt();
            clone.CopyFrom(this);
            return clone;
        }
        
        #endregion
        
        #region ICleanUp

        /// <summary>
        /// Performs a clean-up of the <see cref="TestEnt"/> resetting property values as appropriate to ensure a basic level of data consistency.
        /// </summary>
        public override void CleanUp()
        {
            base.CleanUp();
            IsSomeSome = Cleaner.Clean(IsSomeSome);
            IsSomeSome2 = Cleaner.Clean(IsSomeSome2);
            Count = Cleaner.Clean(Count);
            Text = Cleaner.Clean(Text, StringTrim.UseDefault, StringTransform.UseDefault);

            OnAfterCleanUp();
        }

        /// <summary>
        /// Indicates whether considered initial; i.e. all properties have their initial value.
        /// </summary>
        /// <returns><c>true</c> indicates is initial; otherwise, <c>false</c>.</returns>
        public override bool IsInitial
        {
            get
            {
                return Cleaner.IsInitial(IsSomeSome)
                    && Cleaner.IsInitial(IsSomeSome2)
                    && Cleaner.IsInitial(Count)
                    && Cleaner.IsInitial(Text);
            }
        }

        #endregion

        #region PartialMethods
      
        partial void OnAfterCleanUp();

        partial void OnAfterCopyFrom(TestEnt from);

        #endregion
    }
}

#pragma warning restore
#nullable restore
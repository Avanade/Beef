/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Beef.Entities;
using Beef.RefData;
using Newtonsoft.Json;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Common.Entities
{
    /// <summary>
    /// Represents the Postal Info entity.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class PostalInfo : EntityBase, IEquatable<PostalInfo>
    {
        #region Privates

        private string? _countrySid;
        private string? _countryText;
        private string? _city;
        private string? _state;
        private PlaceInfoCollection? _places;

        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the <see cref="Country"/> using the underlying Serialization Identifier (SID).
        /// </summary>
        [JsonProperty("country", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Country")]
        public string? CountrySid
        {
            get => _countrySid;
            set => SetValue(ref _countrySid, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(Country));
        }

        /// <summary>
        /// Gets the corresponding <see cref="Country"/> text (read-only where selected).
        /// </summary>
        [JsonProperty("countryText", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string? CountryText { get => _countryText ?? GetRefDataText(() => Country); set => _countryText = value; }

        /// <summary>
        /// Gets or sets the Country (see <see cref="RefDataNamespace.Country"/>).
        /// </summary>
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [Display(Name="Country")]
        public RefDataNamespace.Country? Country
        {
            get => _countrySid;
            set => SetValue(ref _countrySid, value, false, false, nameof(Country)); 
        }

        /// <summary>
        /// Gets or sets the City.
        /// </summary>
        [JsonProperty("city", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="City")]
        public string? City
        {
            get => _city;
            set => SetValue(ref _city, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(City));
        }

        /// <summary>
        /// Gets or sets the State.
        /// </summary>
        [JsonProperty("state", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="State")]
        public string? State
        {
            get => _state;
            set => SetValue(ref _state, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(State));
        }

        /// <summary>
        /// Gets or sets the Places.
        /// </summary>
        [JsonProperty("places", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Places")]
        public PlaceInfoCollection? Places
        {
            get => _places;
            set => SetValue(ref _places, value, false, false, nameof(Places));
        }

        #endregion

        #region IEquatable

        /// <summary>
        /// Determines whether the specified object is equal to the current object by comparing the values of all the properties.
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public override bool Equals(object? obj) => obj is PostalInfo val && Equals(val);

        /// <summary>
        /// Determines whether the specified <see cref="PostalInfo"/> is equal to the current <see cref="PostalInfo"/> by comparing the values of all the properties.
        /// </summary>
        /// <param name="value">The <see cref="PostalInfo"/> to compare with the current <see cref="PostalInfo"/>.</param>
        /// <returns><c>true</c> if the specified <see cref="PostalInfo"/> is equal to the current <see cref="PostalInfo"/>; otherwise, <c>false</c>.</returns>
        public bool Equals(PostalInfo? value)
        {
            if (value == null)
                return false;
            else if (ReferenceEquals(value, this))
                return true;

            return base.Equals((object)value)
                && Equals(CountrySid, value.CountrySid)
                && Equals(City, value.City)
                && Equals(State, value.State)
                && Equals(Places, value.Places);
        }

        /// <summary>
        /// Compares two <see cref="PostalInfo"/> types for equality.
        /// </summary>
        /// <param name="a"><see cref="PostalInfo"/> A.</param>
        /// <param name="b"><see cref="PostalInfo"/> B.</param>
        /// <returns><c>true</c> indicates equal; otherwise, <c>false</c> for not equal.</returns>
        public static bool operator == (PostalInfo? a, PostalInfo? b) => Equals(a, b);

        /// <summary>
        /// Compares two <see cref="PostalInfo"/> types for non-equality.
        /// </summary>
        /// <param name="a"><see cref="PostalInfo"/> A.</param>
        /// <param name="b"><see cref="PostalInfo"/> B.</param>
        /// <returns><c>true</c> indicates not equal; otherwise, <c>false</c> for equal.</returns>
        public static bool operator != (PostalInfo? a, PostalInfo? b) => !Equals(a, b);

        /// <summary>
        /// Returns the hash code for the <see cref="PostalInfo"/>.
        /// </summary>
        /// <returns>The hash code for the <see cref="PostalInfo"/>.</returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(CountrySid);
            hash.Add(City);
            hash.Add(State);
            hash.Add(Places);
            return base.GetHashCode() ^ hash.ToHashCode();
        }
    
        #endregion

        #region ICopyFrom
    
        /// <summary>
        /// Performs a copy from another <see cref="PostalInfo"/> updating this instance.
        /// </summary>
        /// <param name="from">The <see cref="PostalInfo"/> to copy from.</param>
        public override void CopyFrom(object from)
        {
            var fval = ValidateCopyFromType<PostalInfo>(from);
            CopyFrom(fval);
        }
        
        /// <summary>
        /// Performs a copy from another <see cref="PostalInfo"/> updating this instance.
        /// </summary>
        /// <param name="from">The <see cref="PostalInfo"/> to copy from.</param>
        public void CopyFrom(PostalInfo from)
        {
            if (from == null)
                throw new ArgumentNullException(nameof(from));

            CopyFrom((EntityBase)from);
            CountrySid = from.CountrySid;
            City = from.City;
            State = from.State;
            Places = from.Places;

            OnAfterCopyFrom(from);
        }

        #endregion

        #region ICloneable
        
        /// <summary>
        /// Creates a deep copy of the <see cref="PostalInfo"/>.
        /// </summary>
        /// <returns>A deep copy of the <see cref="PostalInfo"/>.</returns>
        public override object Clone()
        {
            var clone = new PostalInfo();
            clone.CopyFrom(this);
            return clone;
        }
        
        #endregion
        
        #region ICleanUp

        /// <summary>
        /// Performs a clean-up of the <see cref="PostalInfo"/> resetting property values as appropriate to ensure a basic level of data consistency.
        /// </summary>
        public override void CleanUp()
        {
            base.CleanUp();
            CountrySid = Cleaner.Clean(CountrySid);
            City = Cleaner.Clean(City, StringTrim.UseDefault, StringTransform.UseDefault);
            State = Cleaner.Clean(State, StringTrim.UseDefault, StringTransform.UseDefault);
            Places = Cleaner.Clean(Places);

            OnAfterCleanUp();
        }

        /// <summary>
        /// Indicates whether considered initial; i.e. all properties have their initial value.
        /// </summary>
        /// <returns><c>true</c> indicates is initial; otherwise, <c>false</c>.</returns>
        public override bool IsInitial
        {
            get
            {
                return Cleaner.IsInitial(CountrySid)
                    && Cleaner.IsInitial(City)
                    && Cleaner.IsInitial(State)
                    && Cleaner.IsInitial(Places);
            }
        }

        #endregion

        #region PartialMethods
      
        partial void OnAfterCleanUp();

        partial void OnAfterCopyFrom(PostalInfo from);

        #endregion
    }
}

#pragma warning restore
#nullable restore
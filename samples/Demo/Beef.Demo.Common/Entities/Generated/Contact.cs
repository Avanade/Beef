/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Beef.Entities;
using Newtonsoft.Json;

namespace Beef.Demo.Common.Entities
{
    /// <summary>
    /// Represents the Contact entity.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class Contact : IGuidIdentifier, IUniqueKey
    {
        /// <summary>
        /// Gets or sets the <see cref="Contact"/> identifier.
        /// </summary>
        [JsonProperty("id", DefaultValueHandling = DefaultValueHandling.Include)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the First Name.
        /// </summary>
        [JsonProperty("firstName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string? FirstName { get; set; }

        /// <summary>
        /// Gets or sets the Last Name.
        /// </summary>
        [JsonProperty("lastName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string? LastName { get; set; }

        /// <summary>
        /// Gets the list of property names that represent the unique key.
        /// </summary>
        public string[] UniqueKeyProperties => new string[] { nameof(Id) };
        
        /// <summary>
        /// Creates the <see cref="UniqueKey"/>.
        /// </summary>
        /// <returns>The <see cref="Beef.Entities.UniqueKey"/>.</returns>
        /// <param name="id">The <see cref="Id"/>.</param>
        public static UniqueKey CreateUniqueKey(Guid id) => new UniqueKey(id);

        /// <summary>
        /// Gets the <see cref="UniqueKey"/> (consists of the following property(s): <see cref="Id"/>).
        /// </summary>
        public UniqueKey UniqueKey => CreateUniqueKey(Id);
    }

    /// <summary>
    /// Represents the <see cref="Contact"/> collection.
    /// </summary>
    public partial class ContactCollection : List<Contact> { }

    /// <summary>
    /// Represents the <see cref="Contact"/> collection result.
    /// </summary>
    public class ContactCollectionResult : CollectionResult<ContactCollection, Contact>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactCollectionResult"/> class.
        /// </summary>
        public ContactCollectionResult() { }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactCollectionResult"/> class with <paramref name="paging"/>.
        /// </summary>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        public ContactCollectionResult(PagingArgs? paging) : base(paging) { }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactCollectionResult"/> class with a <paramref name="collection"/> of items to add.
        /// </summary>
        /// <param name="collection">A collection containing items to add.</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        public ContactCollectionResult(IEnumerable<Contact> collection, PagingArgs? paging = null) : base(paging) => Result.AddRange(collection);
    }
}

#pragma warning restore
#nullable restore
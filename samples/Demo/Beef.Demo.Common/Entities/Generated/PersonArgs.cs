/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Beef.Entities;
using Beef.RefData;
using Newtonsoft.Json;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Common.Entities
{
    /// <summary>
    /// Represents the <see cref="Person"/> arguments entity.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class PersonArgs : EntityBase
    {
        #region PropertyNames
      
        /// <summary>
        /// Represents the <see cref="FirstName"/> property name.
        /// </summary>
        public const string Property_FirstName = nameof(FirstName);

        /// <summary>
        /// Represents the <see cref="LastName"/> property name.
        /// </summary>
        public const string Property_LastName = nameof(LastName);

        /// <summary>
        /// Represents the <see cref="Genders"/> property name.
        /// </summary>
        public const string Property_Genders = nameof(Genders);

        #endregion

        #region Privates

        private string _firstName;
        private string _lastName;
        private List<string> _gendersSids;

        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the First Name.
        /// </summary>
        [JsonProperty("firstName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="First Name")]
        public string FirstName
        {
            get { return _firstName; }
            set { SetValue(ref _firstName, value, false, StringTrim.End, StringTransform.EmptyToNull, Property_FirstName); }
        }

        /// <summary>
        /// Gets or sets the Last Name.
        /// </summary>
        [JsonProperty("lastName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Last Name")]
        public string LastName
        {
            get { return _lastName; }
            set { SetValue(ref _lastName, value, false, StringTrim.End, StringTransform.EmptyToNull, Property_LastName); }
        }

        /// <summary>
        /// Gets or sets the <see cref="Genders"/> list using the underlying Serialization Identifier (SID).
        /// </summary>
        [JsonProperty("genders", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Genders")]
        public List<string> GendersSids
        {
            get { return _gendersSids; }
            set { SetValue<List<string>>(ref _gendersSids, value, false, false, Property_Genders); }
        }

        /// <summary>
        /// Gets or sets the Genders (see <see cref="Gender"/>).
        /// </summary>
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [Display(Name="Genders")]
        public ReferenceDataSidList<Gender, string> Genders
        {
            get { return new ReferenceDataSidList<Gender, string>(ref _gendersSids); }
            set { SetValue<List<string>>(ref _gendersSids, value?.ToSidList() ?? null, false, false, Property_Genders); }
        }

        #endregion

        #region ICopyFrom
    
        /// <summary>
        /// Performs a copy from another <see cref="PersonArgs"/> updating this instance.
        /// </summary>
        /// <param name="from">The <see cref="PersonArgs"/> to copy from.</param>
        public override void CopyFrom(object from)
        {
            var fval = ValidateCopyFromType<PersonArgs>(from);
            CopyFrom((PersonArgs)fval);
        }
        
        /// <summary>
        /// Performs a copy from another <see cref="PersonArgs"/> updating this instance.
        /// </summary>
        /// <param name="from">The <see cref="PersonArgs"/> to copy from.</param>
        public void CopyFrom(PersonArgs from)
        {
            CopyFrom((EntityBase)from);
            FirstName = from.FirstName;
            LastName = from.LastName;
            GendersSids = from.GendersSids;

            OnAfterCopyFrom(from);
        }
    
        #endregion
        
        #region ICloneable
        
        /// <summary>
        /// Creates a deep copy of the <see cref="PersonArgs"/>.
        /// </summary>
        /// <returns>A deep copy of the <see cref="PersonArgs"/>.</returns>
        public override object Clone()
        {
            var clone = new PersonArgs();
            clone.CopyFrom(this);
            return clone;
        }
        
        #endregion
        
        #region ICleanUp

        /// <summary>
        /// Performs a clean-up of the <see cref="PersonArgs"/> resetting property values as appropriate to ensure a basic level of data consistency.
        /// </summary>
        public override void CleanUp()
        {
            base.CleanUp();
            FirstName = Cleaner.Clean(FirstName, StringTrim.End, StringTransform.EmptyToNull);
            LastName = Cleaner.Clean(LastName, StringTrim.End, StringTransform.EmptyToNull);
            GendersSids = Cleaner.Clean(GendersSids);

            OnAfterCleanUp();
        }
    
        /// <summary>
        /// Indicates whether considered initial; i.e. all properties have their initial value.
        /// </summary>
        /// <returns><c>true</c> indicates is initial; otherwise, <c>false</c>.</returns>
        public override bool IsInitial
        {
            get
            {
                return Cleaner.IsInitial(FirstName)
                    && Cleaner.IsInitial(LastName)
                    && Cleaner.IsInitial(GendersSids);
            }
        }

        #endregion

        #region PartialMethods
      
        partial void OnAfterCleanUp();

        partial void OnAfterCopyFrom(PersonArgs from);

        #endregion
    } 
}

/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Beef.RefData;
using Beef.RefData.Caching;
using Beef.WebApi;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Common.Agents
{
    /// <summary>
    /// Provides the <see cref="ReferenceData"/> implementation using the corresponding Web API agent.
    /// </summary>
    public class ReferenceDataAgentProvider : RefDataNamespace.ReferenceData
    {
        private readonly Dictionary<string, Type> _nameDict = new Dictionary<string, Type>();
        private readonly Dictionary<Type, string> _typeDict = new Dictionary<Type, string>();
        private readonly IReferenceDataAgent _agent;
        private readonly Dictionary<Type, object> _cacheDict = new Dictionary<Type, object>();

        #region Ctor
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataAgentProvider"/> class.
        /// </summary>
        /// <param name="agent">The <see cref="IReferenceDataAgent"/>.</param>
        public ReferenceDataAgentProvider(IReferenceDataAgent agent)
        {
            _agent = Check.NotNull(agent, nameof(agent));

            _nameDict.Add(nameof(Country), typeof(RefDataNamespace.Country));
            _typeDict.Add(typeof(RefDataNamespace.Country), nameof(Country));
            _cacheDict.Add(typeof(RefDataNamespace.Country), new ReferenceDataCache<RefDataNamespace.CountryCollection, RefDataNamespace.Country>(() => _agent.CountryGetAllAsync().ContinueWith((t) => t.Result.Value, TaskScheduler.Current)));

            _nameDict.Add(nameof(USState), typeof(RefDataNamespace.USState));
            _typeDict.Add(typeof(RefDataNamespace.USState), nameof(USState));
            _cacheDict.Add(typeof(RefDataNamespace.USState), new ReferenceDataCache<RefDataNamespace.USStateCollection, RefDataNamespace.USState>(() => _agent.USStateGetAllAsync().ContinueWith((t) => t.Result.Value, TaskScheduler.Current)));

            _nameDict.Add(nameof(Gender), typeof(RefDataNamespace.Gender));
            _typeDict.Add(typeof(RefDataNamespace.Gender), nameof(Gender));
            _cacheDict.Add(typeof(RefDataNamespace.Gender), new ReferenceDataCache<RefDataNamespace.GenderCollection, RefDataNamespace.Gender>(() => _agent.GenderGetAllAsync().ContinueWith((t) => t.Result.Value, TaskScheduler.Current)));

            _nameDict.Add(nameof(EyeColor), typeof(RefDataNamespace.EyeColor));
            _typeDict.Add(typeof(RefDataNamespace.EyeColor), nameof(EyeColor));
            _cacheDict.Add(typeof(RefDataNamespace.EyeColor), new ReferenceDataCache<RefDataNamespace.EyeColorCollection, RefDataNamespace.EyeColor>(() => _agent.EyeColorGetAllAsync().ContinueWith((t) => t.Result.Value, TaskScheduler.Current)));

            _nameDict.Add(nameof(PowerSource), typeof(RefDataNamespace.PowerSource));
            _typeDict.Add(typeof(RefDataNamespace.PowerSource), nameof(PowerSource));
            _cacheDict.Add(typeof(RefDataNamespace.PowerSource), new ReferenceDataCache<RefDataNamespace.PowerSourceCollection, RefDataNamespace.PowerSource>(() => _agent.PowerSourceGetAllAsync().ContinueWith((t) => t.Result.Value, TaskScheduler.Current)));

            _nameDict.Add(nameof(Company), typeof(RefDataNamespace.Company));
            _typeDict.Add(typeof(RefDataNamespace.Company), nameof(Company));
            _cacheDict.Add(typeof(RefDataNamespace.Company), new ReferenceDataCache<RefDataNamespace.CompanyCollection, RefDataNamespace.Company>(() => _agent.CompanyGetAllAsync().ContinueWith((t) => t.Result.Value, TaskScheduler.Current)));

        }

        #endregion

        #region Collections

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.CountryCollection"/>.
        /// </summary>
        /// <returns>The <see cref="RefDataNamespace.CountryCollection"/>.</returns>
        public override RefDataNamespace.CountryCollection Country => (RefDataNamespace.CountryCollection)this[typeof(RefDataNamespace.Country)];

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.USStateCollection"/>.
        /// </summary>
        /// <returns>The <see cref="RefDataNamespace.USStateCollection"/>.</returns>
        public override RefDataNamespace.USStateCollection USState => (RefDataNamespace.USStateCollection)this[typeof(RefDataNamespace.USState)];

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.GenderCollection"/>.
        /// </summary>
        /// <returns>The <see cref="RefDataNamespace.GenderCollection"/>.</returns>
        public override RefDataNamespace.GenderCollection Gender => (RefDataNamespace.GenderCollection)this[typeof(RefDataNamespace.Gender)];

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.EyeColorCollection"/>.
        /// </summary>
        /// <returns>The <see cref="RefDataNamespace.EyeColorCollection"/>.</returns>
        public override RefDataNamespace.EyeColorCollection EyeColor => (RefDataNamespace.EyeColorCollection)this[typeof(RefDataNamespace.EyeColor)];

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.PowerSourceCollection"/>.
        /// </summary>
        /// <returns>The <see cref="RefDataNamespace.PowerSourceCollection"/>.</returns>
        public override RefDataNamespace.PowerSourceCollection PowerSource => (RefDataNamespace.PowerSourceCollection)this[typeof(RefDataNamespace.PowerSource)];

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.CompanyCollection"/>.
        /// </summary>
        /// <returns>The <see cref="RefDataNamespace.CompanyCollection"/>.</returns>
        public override RefDataNamespace.CompanyCollection Company => (RefDataNamespace.CompanyCollection)this[typeof(RefDataNamespace.Company)];

        #endregion
  
        #region This/GetCache/PrefetchAsync
    
        /// <summary>
        /// Gets the <see cref="IReferenceDataCollection"/> for the associated <see cref="ReferenceDataBase"/> <see cref="Type"/>.
        /// </summary>
        /// <param name="type">The <see cref="ReferenceDataBase"/> <see cref="Type"/>.</param>
        /// <returns>The <see cref="IReferenceDataCollection"/>.</returns>
        public override IReferenceDataCollection this[Type type] => GetCache(type).GetCollection();

        /// <summary>
        /// Gets the <see cref="IReferenceDataCache"/> for the associated <see cref="ReferenceDataBase"/> <see cref="Type"/>.
        /// </summary>
        /// <param name="type">The <see cref="ReferenceDataBase"/> <see cref="Type"/>.</param>
        /// <returns>The <see cref="IReferenceDataCache"/>.</returns>
        public IReferenceDataCache GetCache(Type type)
        {
            if (type == null)
                throw new ArgumentNullException(nameof(type));
        
            if (!_cacheDict.ContainsKey(type))
                throw new ArgumentException($"Type {type.Name} does not exist within the ReferenceDataProvider cache.");

            return (IReferenceDataCache)_cacheDict[type];
        }
        
        /// <summary>
        /// Prefetches all of the named <see cref="ReferenceDataBase"/> objects where not already cached or have expired.
        /// </summary>
        /// <param name="names">The list of <see cref="ReferenceDataBase"/> type names.</param>
        public override async Task PrefetchAsync(params string[] names)
        {
            if (names == null || names.Length == 0)
                return;

            var getNames = new List<string>();
            foreach (string name in names.Distinct())
            {
                if (_nameDict.ContainsKey(name) && GetCache(_nameDict[name]).IsExpired)
                    getNames.Add(name);
            }

            if (getNames.Count == 0)
                return;
                        
            var result = await _agent.GetNamedAsync(getNames.ToArray()).ConfigureAwait(false);
            foreach (var rdj in JObject.Parse("{ \"content\": " + result.Content ?? "[ ]" + " }")["content"]!.Children())
            {
                var name = rdj["name"]?.Value<string>();
                var items = rdj["items"]?.ToString();
                if (name != null)
                {
                    switch (name)
                    {
                        case nameof(Country): GetCache(_nameDict[nameof(Country)]).SetCollection(JsonConvert.DeserializeObject<RefDataNamespace.Country[]>(items!)); break;
                        case nameof(USState): GetCache(_nameDict[nameof(USState)]).SetCollection(JsonConvert.DeserializeObject<RefDataNamespace.USState[]>(items!)); break;
                        case nameof(Gender): GetCache(_nameDict[nameof(Gender)]).SetCollection(JsonConvert.DeserializeObject<RefDataNamespace.Gender[]>(items!)); break;
                        case nameof(EyeColor): GetCache(_nameDict[nameof(EyeColor)]).SetCollection(JsonConvert.DeserializeObject<RefDataNamespace.EyeColor[]>(items!)); break;
                        case nameof(PowerSource): GetCache(_nameDict[nameof(PowerSource)]).SetCollection(JsonConvert.DeserializeObject<RefDataNamespace.PowerSource[]>(items!)); break;
                        case nameof(Company): GetCache(_nameDict[nameof(Company)]).SetCollection(JsonConvert.DeserializeObject<RefDataNamespace.Company[]>(items!)); break;
                    }
                 }
            }
        }
        
        #endregion
    }
}

#pragma warning restore IDE0005
#nullable restore
/*
 * This file is automatically generated; any changes will be lost. 
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Beef.RefData;
using Beef.RefData.Caching;
using Beef.WebApi;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Beef.Demo.Common.Entities;
using RefDataNamespace = Beef.Demo.Common.Entities;

namespace Beef.Demo.Common.Agents
{
    /// <summary>
    /// Provides the <see cref="ReferenceData"/> implementation using the corresponding Web API agent.
    /// </summary>
    public class ReferenceDataAgentProvider : RefDataNamespace.ReferenceData
    {
        private static readonly Dictionary<string, Type> _nameDict = new Dictionary<string, Type>();
        private static readonly Dictionary<Type, string> _typeDict = new Dictionary<Type, string>();

        private readonly ReferenceDataAgent _agent;
        private readonly Dictionary<Type, object> _cacheDict = new Dictionary<Type, object>();

        #region Ctor
        
        /// <summary>
        /// Static constructor.
        /// </summary>
        static ReferenceDataAgentProvider()
        {
            _nameDict.Add(Property_Gender, typeof(RefDataNamespace.Gender));
            _typeDict.Add(typeof(RefDataNamespace.Gender), Property_Gender);

            _nameDict.Add(Property_EyeColor, typeof(RefDataNamespace.EyeColor));
            _typeDict.Add(typeof(RefDataNamespace.EyeColor), Property_EyeColor);

            _nameDict.Add(Property_PowerSource, typeof(RefDataNamespace.PowerSource));
            _typeDict.Add(typeof(RefDataNamespace.PowerSource), Property_PowerSource);

            _nameDict.Add(Property_Company, typeof(RefDataNamespace.Company));
            _typeDict.Add(typeof(RefDataNamespace.Company), Property_Company);
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataAgentProvider"/> class.
        /// </summary>
        /// <param name="httpClient">The <see cref="HttpClient"/> (where overridding the default value).</param>
        /// <param name="beforeRequest">The <see cref="Action{HttpRequestMessage}"/> to invoke before the <see cref="HttpRequestMessage">Http Request</see> is made (see <see cref="WebApiServiceAgentBase.BeforeRequest"/>).</param>
        public ReferenceDataAgentProvider(HttpClient httpClient = null, Action<HttpRequestMessage> beforeRequest = null)
        {
            _agent = new ReferenceDataAgent(httpClient, beforeRequest);

            _cacheDict.Add(typeof(RefDataNamespace.Gender), new ReferenceDataCache<RefDataNamespace.GenderCollection, RefDataNamespace.Gender>(() => _agent.GenderGetAllAsync().ContinueWith((t) => t.Result.Value)));
            _cacheDict.Add(typeof(RefDataNamespace.EyeColor), new ReferenceDataCache<RefDataNamespace.EyeColorCollection, RefDataNamespace.EyeColor>(() => _agent.EyeColorGetAllAsync().ContinueWith((t) => t.Result.Value)));
            _cacheDict.Add(typeof(RefDataNamespace.PowerSource), new ReferenceDataCache<RefDataNamespace.PowerSourceCollection, RefDataNamespace.PowerSource>(() => _agent.PowerSourceGetAllAsync().ContinueWith((t) => t.Result.Value)));
            _cacheDict.Add(typeof(RefDataNamespace.Company), new ReferenceDataCache<RefDataNamespace.CompanyCollection, RefDataNamespace.Company>(() => _agent.CompanyGetAllAsync().ContinueWith((t) => t.Result.Value)));
        }

        #endregion

        #region Collections

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.GenderCollection"/>.
        /// </summary>
        /// <returns>The <see cref="RefDataNamespace.GenderCollection"/>.</returns>
        public override RefDataNamespace.GenderCollection Gender => (RefDataNamespace.GenderCollection)this[typeof(RefDataNamespace.Gender)];

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.EyeColorCollection"/>.
        /// </summary>
        /// <returns>The <see cref="RefDataNamespace.EyeColorCollection"/>.</returns>
        public override RefDataNamespace.EyeColorCollection EyeColor => (RefDataNamespace.EyeColorCollection)this[typeof(RefDataNamespace.EyeColor)];

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.PowerSourceCollection"/>.
        /// </summary>
        /// <returns>The <see cref="RefDataNamespace.PowerSourceCollection"/>.</returns>
        public override RefDataNamespace.PowerSourceCollection PowerSource => (RefDataNamespace.PowerSourceCollection)this[typeof(RefDataNamespace.PowerSource)];

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.CompanyCollection"/>.
        /// </summary>
        /// <returns>The <see cref="RefDataNamespace.CompanyCollection"/>.</returns>
        public override RefDataNamespace.CompanyCollection Company => (RefDataNamespace.CompanyCollection)this[typeof(RefDataNamespace.Company)];

        #endregion
  
        #region This/GetCache/PrefetchAsync
    
        /// <summary>
        /// Gets the <see cref="IReferenceDataCollection"/> for the associated <see cref="ReferenceDataBase"/> <see cref="Type"/>.
        /// </summary>
        /// <param name="type">The <see cref="ReferenceDataBase"/> <see cref="Type"/>.</param>
        /// <returns>The <see cref="IReferenceDataCollection"/>.</returns>
        public override IReferenceDataCollection this[Type type] => GetCache(type).GetCollection();

        /// <summary>
        /// Gets the <see cref="IReferenceDataCache"/> for the associated <see cref="ReferenceDataBase"/> <see cref="Type"/>.
        /// </summary>
        /// <param name="type">The <see cref="ReferenceDataBase"/> <see cref="Type"/>.</param>
        /// <returns>The <see cref="IReferenceDataCache"/>.</returns>
        public IReferenceDataCache GetCache(Type type)
        {
            if (!_cacheDict.ContainsKey(Beef.Check.NotNull(type, nameof(type))))
                throw new ArgumentException(string.Format("Type {0} does not exist within the ReferenceDataProvider cache.", type.Name));

            return (IReferenceDataCache)_cacheDict[type];
        }
        
        /// <summary>
        /// Prefetches all of the named <see cref="ReferenceDataBase"/> objects where not already cached or have expired.
        /// </summary>
        /// <param name="names">The list of <see cref="ReferenceDataBase"/> type names.</param>
        public override async Task PrefetchAsync(params string[] names)
        {
            if (names == null || names.Length == 0)
                return;

            var getNames = new List<string>();
            foreach (string name in names.Distinct())
            {
                if (_nameDict.ContainsKey(name) && GetCache(_nameDict[name]).IsExpired)
                    getNames.Add(name);
            }

            if (getNames.Count == 0)
                return;
                        
            var result = await _agent.GetNamedAsync(getNames.ToArray()).ConfigureAwait(false);
            foreach (var rdj in JObject.Parse("{ \"content\":" + result.Content + "}")["content"].Children())
            {
                switch (rdj["name"].Value<string>())
                {
                    case Property_Gender: GetCache(_nameDict[ReferenceData.Property_Gender]).SetCollection(JsonConvert.DeserializeObject<Gender[]>(rdj["items"].ToString())); break;
                    case Property_EyeColor: GetCache(_nameDict[ReferenceData.Property_EyeColor]).SetCollection(JsonConvert.DeserializeObject<EyeColor[]>(rdj["items"].ToString())); break;
                    case Property_PowerSource: GetCache(_nameDict[ReferenceData.Property_PowerSource]).SetCollection(JsonConvert.DeserializeObject<PowerSource[]>(rdj["items"].ToString())); break;
                    case Property_Company: GetCache(_nameDict[ReferenceData.Property_Company]).SetCollection(JsonConvert.DeserializeObject<Company[]>(rdj["items"].ToString())); break;
                }
            }
        }
        
        #endregion
    }
}
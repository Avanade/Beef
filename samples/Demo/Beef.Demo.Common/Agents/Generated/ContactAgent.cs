/*
 * This file is automatically generated; any changes will be lost.
 */

#nullable enable
#pragma warning disable

namespace Beef.Demo.Common.Agents;

/// <summary>
/// Provides the <see cref="Contact"/> HTTP agent.
/// </summary>
/// <param name="client">The underlying <see cref="HttpClient"/>.</param>
/// <param name="jsonSerializer">The optional <see cref="IJsonSerializer"/>.</param>
/// <param name="executionContext">The optional <see cref="CoreEx.ExecutionContext"/>.</param>
public partial class ContactAgent(HttpClient client, IJsonSerializer? jsonSerializer = null, CoreEx.ExecutionContext? executionContext = null) : TypedHttpClientBase<ContactAgent>(client, jsonSerializer, executionContext), IContactAgent
{
    /// <inheritdoc/>
    public Task<HttpResult<ContactCollectionResult>> GetByQueryAsync(QueryArgs? query = null, PagingArgs? paging = null, HttpRequestOptions? requestOptions = null, CancellationToken cancellationToken = default)
        => GetAsync<ContactCollectionResult>("api/v1/contacts/query", requestOptions: requestOptions.IncludeQuery(query).IncludePaging(paging), cancellationToken: cancellationToken);

    /// <inheritdoc/>
    public Task<HttpResult<ContactCollectionResult>> GetAllAsync(HttpRequestOptions? requestOptions = null, CancellationToken cancellationToken = default)
        => GetAsync<ContactCollectionResult>("api/v1/contacts", requestOptions: requestOptions, cancellationToken: cancellationToken);

    /// <inheritdoc/>
    public Task<HttpResult<Contact?>> GetAsync(Guid id, HttpRequestOptions? requestOptions = null, CancellationToken cancellationToken = default)
        => GetAsync<Contact?>("api/v1/contacts/{id}", requestOptions, [new HttpArg<Guid>("id", id)], cancellationToken);

    /// <inheritdoc/>
    public Task<HttpResult<Contact>> CreateAsync(Contact value, HttpRequestOptions? requestOptions = null, CancellationToken cancellationToken = default)
        => PostAsync<Contact, Contact>("api/v1/contacts", value, requestOptions, cancellationToken: cancellationToken);

    /// <inheritdoc/>
    public Task<HttpResult<Contact>> UpdateAsync(Contact value, Guid id, HttpRequestOptions? requestOptions = null, CancellationToken cancellationToken = default)
        => PutAsync<Contact, Contact>("api/v1/contacts/{id}", value, requestOptions, [new HttpArg<Guid>("id", id)], cancellationToken);

    /// <inheritdoc/>
    public Task<HttpResult<Contact>> PatchAsync(HttpPatchOption patchOption, string value, Guid id, HttpRequestOptions? requestOptions = null, CancellationToken cancellationToken = default)
        => PatchAsync<Contact>("api/v1/contacts/{id}", patchOption, value, requestOptions, [new HttpArg<Guid>("id", id)], cancellationToken);

    /// <inheritdoc/>
    public Task<HttpResult> DeleteAsync(Guid id, HttpRequestOptions? requestOptions = null, CancellationToken cancellationToken = default)
        => DeleteAsync("api/v1/contacts/{id}", requestOptions, [new HttpArg<Guid>("id", id)], cancellationToken);

    /// <inheritdoc/>
    public Task<HttpResult> RaiseEventAsync(bool throwError, HttpRequestOptions? requestOptions = null, CancellationToken cancellationToken = default)
        => PostAsync("api/v1/contacts/raise", requestOptions, [new HttpArg<bool>("throwError", throwError)], cancellationToken);
}

#pragma warning restore
#nullable restore
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using Beef.Data.Database.Cdc;
using Beef.Entities;
using Beef.Mapper;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;

namespace Beef.Demo.CdcPublisher.Entities
{
    /// <summary>
    /// Represents the CDC model for the root (parent) database table 'Demo.Person2'.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class Person2Cdc : ITableKey, IETag, ICdcLogicallyDeleted
    {
        /// <summary>
        /// Gets or sets the 'Person Id' (Demo.Person2.PersonId) column value.
        /// </summary>
        [JsonProperty("personId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public Guid PersonId { get; set; }

        /// <summary>
        /// Gets or sets the 'First Name' (Demo.Person2.FirstName) column value.
        /// </summary>
        [JsonProperty("firstName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string? FirstName { get; set; }

        /// <summary>
        /// Gets or sets the 'Last Name' (Demo.Person2.LastName) column value.
        /// </summary>
        [JsonProperty("lastName", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string? LastName { get; set; }

        /// <summary>
        /// Gets or sets the 'Birthday' (Demo.Person2.Birthday) column value.
        /// </summary>
        [JsonProperty("birthday", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public DateTime? Birthday { get; set; }

        /// <summary>
        /// Gets or sets the 'Gender Id' (Demo.Person2.GenderId) column value.
        /// </summary>
        [JsonProperty("genderId", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public Guid? GenderId { get; set; }

        /// <summary>
        /// Gets or sets the 'Street' (Demo.Person2.Street) column value.
        /// </summary>
        [JsonProperty("street", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string? Street { get; set; }

        /// <summary>
        /// Gets or sets the 'City' (Demo.Person2.City) column value.
        /// </summary>
        [JsonProperty("city", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string? City { get; set; }

        /// <summary>
        /// Gets or sets the 'Row Version' (Demo.Person2.RowVersion) column value.
        /// </summary>
        [JsonProperty("rowVersion", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public byte[]? RowVersion { get; set; }

        /// <summary>
        /// Gets or sets the 'Created By' (Demo.Person2.CreatedBy) column value.
        /// </summary>
        [JsonProperty("createdBy", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string? CreatedBy { get; set; }

        /// <summary>
        /// Gets or sets the 'Created Date' (Demo.Person2.CreatedDate) column value.
        /// </summary>
        [JsonProperty("createdDate", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or sets the 'Updated By' (Demo.Person2.UpdatedBy) column value.
        /// </summary>
        [JsonProperty("updatedBy", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string? UpdatedBy { get; set; }

        /// <summary>
        /// Gets or sets the 'Updated Date' (Demo.Person2.UpdatedDate) column value.
        /// </summary>
        [JsonProperty("updatedDate", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public DateTime? UpdatedDate { get; set; }

        /// <summary>
        /// Gets or sets the entity tag (calculated as a JSON serialized hash value).
        /// </summary>
        [JsonProperty("etag", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [MapperIgnore()]
        public string? ETag { get; set; }

        /// <summary>
        /// Indicates whether the entity is logically deleted ('IsDeleted' column).
        /// </summary>
        [MapperProperty("IsDeleted")]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Clears all the non-key (i.e non <see cref="Beef.Entities.UniqueKey"/>) properties where <see cref="IsDeleted"/> as the data is technically non-existing.
        /// </summary>
        public void ClearWhereDeleted()
        {
            if (!IsDeleted.HasValue || !IsDeleted.Value)
                return;

            FirstName = default!;
            LastName = default!;
            Birthday = default!;
            GenderId = default!;
            Street = default!;
            City = default!;
            RowVersion = default!;
            CreatedBy = default!;
            CreatedDate = default!;
        }

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        [MapperIgnore()]
        public UniqueKey UniqueKey => new UniqueKey(PersonId);

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        [MapperIgnore()]
        public string[] UniqueKeyProperties => new string[] { nameof(PersonId) };

        /// <summary>
        /// Gets or sets the 'Person Id' <i>primary key</i> (Demo.Person2.PersonId) column value (from the actual database table primary key; not from the change-data-capture source).
        /// </summary>
        /// <remarks>Will have a <c>default</c> value when the record no longer exists within the database (i.e. has been physically deleted).</remarks>
        public Guid TableKey_PersonId { get; set; }

        /// <summary>
        /// <inheritdoc/>
        /// </summary>
        /// <remarks><inheritdoc/></remarks>
        public UniqueKey TableKey => new UniqueKey(TableKey_PersonId);
    }
}

#pragma warning restore
#nullable restore
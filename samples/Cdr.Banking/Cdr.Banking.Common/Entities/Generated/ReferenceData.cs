/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Threading.Tasks;
using Beef.RefData;
using RefDataNamespace = Cdr.Banking.Common.Entities;

namespace Cdr.Banking.Common.Entities
{
    /// <summary>
    /// Provides a standard mechanism for accessing the <b>ReferenceData</b>. 
    /// </summary>
    public abstract partial class ReferenceData : IReferenceData
    {
        /// <summary>
        /// Gets the current <see cref="ReferenceData"/> instance.
        /// </summary>
        public static ReferenceData Current => (ReferenceData)ReferenceDataManager.Current.GetProvider(typeof(IReferenceData));
        
        /// <summary>
        /// Gets all the underlying <see cref="ReferenceDataBase"/> <see cref="Type">types</see>.
        /// </summary>
        /// <returns>An array of the <see cref="ReferenceDataBase"/> <see cref="Type">types</see>.</returns>
        public static Type[] GetAllTypes() => new Type[] 
            {
                typeof(OpenStatus),
                typeof(ProductCategory),
                typeof(AccountUType),
                typeof(MaturityInstructions),
                typeof(TransactionType),
                typeof(TransactionStatus)
            };

        /// <summary>
        /// Gets the provider interface cref="Type"/> used for <see cref="ReferenceDataManager.GetProvider(Type)"/>. The value is <see cref="IReferenceData"/>.
        /// </summary>
        public Type ProviderType => typeof(IReferenceData);

        /// <summary>
        /// Gets the <see cref="IReferenceDataCollection"/> for the associated <see cref="ReferenceDataBase"/> <see cref="Type"/>.
        /// </summary>
        /// <param name="type">The associated <see cref="ReferenceDataBase"/> <see cref="Type"/>.</param>
        /// <returns>The corresponding <see cref="IReferenceDataCollection"/>.</returns>
        public abstract IReferenceDataCollection this[Type type] { get; }

        /// <summary>
        /// Prefetches all of the named <see cref="ReferenceDataBase"/> objects.
        /// </summary>
        /// <param name="names">The list of <see cref="ReferenceDataBase"/> names.</param>
        /// <remarks>Note for implementers; should only fetch where not already cached or expired. This is provided to improve performance for consuming applications to reduce the overhead of
        /// making multiple individual invocations, i.e. reduces chattiness across a potentially high-latency connection.</remarks>
        public abstract Task PrefetchAsync(params string[] names);
        
        #region Collections

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.OpenStatusCollection"/>.
        /// </summary>
        public abstract RefDataNamespace.OpenStatusCollection OpenStatus { get; }

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.ProductCategoryCollection"/>.
        /// </summary>
        public abstract RefDataNamespace.ProductCategoryCollection ProductCategory { get; }

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.AccountUTypeCollection"/>.
        /// </summary>
        public abstract RefDataNamespace.AccountUTypeCollection AccountUType { get; }

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.MaturityInstructionsCollection"/>.
        /// </summary>
        public abstract RefDataNamespace.MaturityInstructionsCollection MaturityInstructions { get; }

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.TransactionTypeCollection"/>.
        /// </summary>
        public abstract RefDataNamespace.TransactionTypeCollection TransactionType { get; }

        /// <summary> 
        /// Gets the <see cref="RefDataNamespace.TransactionStatusCollection"/>.
        /// </summary>
        public abstract RefDataNamespace.TransactionStatusCollection TransactionStatus { get; }

        #endregion
    }
}

#pragma warning restore
#nullable restore
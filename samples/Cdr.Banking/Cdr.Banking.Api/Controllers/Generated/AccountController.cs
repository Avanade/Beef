/*
 * This file is automatically generated; any changes will be lost. 
 */

namespace Cdr.Banking.Api.Controllers;

/// <summary>
/// Provides the <see cref="Account"/> Web API functionality.
/// </summary>
[Tags("Banking")]
[Consumes(System.Net.Mime.MediaTypeNames.Application.Json)]
[Produces(System.Net.Mime.MediaTypeNames.Application.Json)]
public partial class AccountController : ControllerBase
{
    private readonly WebApi _webApi;
    private readonly IAccountManager _manager;

    /// <summary>
    /// Initializes a new instance of the <see cref="AccountController"/> class.
    /// </summary>
    /// <param name="webApi">The <see cref="WebApi"/>.</param>
    /// <param name="manager">The <see cref="IAccountManager"/>.</param>
    public AccountController(WebApi webApi, IAccountManager manager)
        { _webApi = webApi.ThrowIfNull(); _manager = manager.ThrowIfNull(); AccountControllerCtor(); }

    partial void AccountControllerCtor(); // Enables additional functionality to be added to the constructor.

    /// <summary>
    /// Get all accounts.
    /// </summary>
    /// <param name="productCategory">The Product Category.</param>
    /// <param name="openStatus">The Open Status.</param>
    /// <param name="isOwned">Indicates whether Is Owned.</param>
    /// <returns>The <c>Account</c> array</returns>
    [Tags("Banking", "Accounts")]
    [HttpGet("api/v1/banking/accounts", Name="Account_GetAccounts")]
    [Paging]
    [ProducesResponseType(typeof(Common.Entities.AccountCollection), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> GetAccounts([FromQuery(Name="product-category")] string? productCategory = default, [FromQuery(Name="open-status")] string? openStatus = default, [FromQuery(Name="is-owned")] bool? isOwned = default)
    {
        var args = new AccountArgs { ProductCategorySid = productCategory, OpenStatusSid = openStatus, IsOwned = isOwned };
        return _webApi.GetWithResultAsync<AccountCollectionResult>(Request, p => _manager.GetAccountsAsync(args, p.RequestOptions.Paging), alternateStatusCode: HttpStatusCode.NoContent);
    }

    /// <summary>
    /// Get all accounts.
    /// </summary>
    /// <returns>The <c>Account</c> array</returns>
    [Tags("Banking", "Accounts")]
    [HttpGet("api/v1/banking/accounts/query", Name="Account_GetAccountsQuery")]
    [Paging]
    [Query]
    [ProducesResponseType(typeof(Common.Entities.AccountCollection), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> GetAccountsQuery()
        => _webApi.GetWithResultAsync<AccountCollectionResult>(Request, p => _manager.GetAccountsQueryAsync(p.RequestOptions.Query, p.RequestOptions.Paging), alternateStatusCode: HttpStatusCode.NoContent);

    /// <summary>
    /// Get <c>AccountDetail</c>.
    /// </summary>
    /// <param name="accountId">The <c>Account</c> identifier.</param>
    /// <returns>The selected <c>AccountDetail</c> where found.</returns>
    [HttpGet("api/v1/banking/accounts/{accountId}", Name="Account_GetDetail")]
    [ProducesResponseType(typeof(Common.Entities.AccountDetail), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> GetDetail(string? accountId)
        => _webApi.GetWithResultAsync<AccountDetail?>(Request, p => _manager.GetDetailAsync(accountId));

    /// <summary>
    /// Get <c>Account</c> <c>Balance</c>.
    /// </summary>
    /// <param name="accountId">The <c>Account</c> identifier.</param>
    /// <returns>The selected <c>Balance</c> where found.</returns>
    [HttpGet("api/v1/banking/accounts/{accountId}/balance", Name="Account_GetBalance")]
    [ProducesResponseType(typeof(Common.Entities.Balance), (int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NotFound)]
    public Task<IActionResult> GetBalance(string? accountId)
        => _webApi.GetWithResultAsync<Balance?>(Request, p => _manager.GetBalanceAsync(accountId));

    /// <summary>
    /// Get <c>Account</c> statement (file).
    /// </summary>
    /// <param name="accountId">The <c>Account</c> identifier.</param>
    /// <returns>A resultant <c>FileContentResult</c>.</returns>
    [HttpGet("api/v1/banking/accounts/{accountId}/statement", Name="Account_GetStatement")]
    [Produces("text/plain")]
    [ProducesResponseType((int)HttpStatusCode.OK)]
    [ProducesResponseType((int)HttpStatusCode.NoContent)]
    public Task<IActionResult> GetStatement(string? accountId)
        => _webApi.GetWithResultAsync<FileContentResult?>(Request, p => _manager.GetStatementAsync(accountId), alternateStatusCode: HttpStatusCode.NoContent, operationType: CoreEx.OperationType.Unspecified);
}
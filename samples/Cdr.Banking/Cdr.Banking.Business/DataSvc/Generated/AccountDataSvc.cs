/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005, IDE0044 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using Cdr.Banking.Business.Data;
using Cdr.Banking.Common.Entities;
using RefDataNamespace = Cdr.Banking.Common.Entities;

namespace Cdr.Banking.Business.DataSvc
{
    /// <summary>
    /// Provides the Account data repository services.
    /// </summary>
    public partial class AccountDataSvc : IAccountDataSvc
    {
        private readonly IAccountData _data;

        /// <summary>
        /// Parameterless constructor is explictly not supported.
        /// </summary>
        private AccountDataSvc() => throw new NotSupportedException();

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountDataSvc"/> class.
        /// </summary>
        /// <param name="dataService">The <see cref="IAccountData"/>.</param>
        public AccountDataSvc(IAccountData data) { _data = data ?? throw new ArgumentNullException(nameof(data)); AccountDataSvcCtor(); }

        /// <summary>
        /// Enables additional functionality to be added to the constructor.
        /// </summary>
        partial void AccountDataSvcCtor();

        /// <summary>
        /// Get all accounts.
        /// </summary>
        /// <param name="args">The Args (see <see cref="AccountArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>A <see cref="AccountCollectionResult"/>.</returns>
        public Task<AccountCollectionResult> GetAccountsAsync(AccountArgs? args, PagingArgs? paging)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(AccountDataSvc), async () => 
            {
                var __result = await _data.GetAccountsAsync(args, paging).ConfigureAwait(false);
                return __result;
            });
        }

        /// <summary>
        /// Get <see cref="AccountDetail"/>.
        /// </summary>
        /// <param name="accountId">The <see cref="Account"/> identifier.</param>
        /// <returns>The selected <see cref="AccountDetail"/> object where found; otherwise, <c>null</c>.</returns>
        public Task<AccountDetail?> GetDetailAsync(string? accountId)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(AccountDataSvc), async () => 
            {
                var __key = new UniqueKey(accountId);
                if (ExecutionContext.Current.TryGetCacheValue(__key, out AccountDetail __val))
                    return __val;

                var __result = await _data.GetDetailAsync(accountId).ConfigureAwait(false);
                ExecutionContext.Current.CacheSet(__key, __result!);
                return __result;
            });
        }

        /// <summary>
        /// Get <see cref="Account"/> <see cref="Balance"/>.
        /// </summary>
        /// <param name="accountId">The <see cref="Account"/> identifier.</param>
        /// <returns>The selected <see cref="Balance"/> object where found; otherwise, <c>null</c>.</returns>
        public Task<Balance?> GetBalanceAsync(string? accountId)
        {
            return DataSvcInvoker.Default.InvokeAsync(typeof(AccountDataSvc), async () => 
            {
                var __key = new UniqueKey(accountId);
                if (ExecutionContext.Current.TryGetCacheValue(__key, out Balance __val))
                    return __val;

                var __result = await _data.GetBalanceAsync(accountId).ConfigureAwait(false);
                ExecutionContext.Current.CacheSet(__key, __result!);
                return __result;
            });
        }
    }
}

#pragma warning restore IDE0005, IDE0044
#nullable restore
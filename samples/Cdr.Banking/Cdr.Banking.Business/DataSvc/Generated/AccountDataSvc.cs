/*
 * This file is automatically generated; any changes will be lost. 
 */

namespace Cdr.Banking.Business.DataSvc;

/// <summary>
/// Provides the <see cref="Account"/> data repository services.
/// </summary>
public partial class AccountDataSvc : IAccountDataSvc
{
    private readonly IAccountData _data;
    private readonly IRequestCache _cache;

    /// <summary>
    /// Initializes a new instance of the <see cref="AccountDataSvc"/> class.
    /// </summary>
    /// <param name="data">The <see cref="IAccountData"/>.</param>
    /// <param name="cache">The <see cref="IRequestCache"/>.</param>
    public AccountDataSvc(IAccountData data, IRequestCache cache)
        { _data = data.ThrowIfNull(); _cache = cache.ThrowIfNull(); AccountDataSvcCtor(); }

    partial void AccountDataSvcCtor(); // Enables additional functionality to be added to the constructor.

    /// <inheritdoc/>
    public Task<Result<AccountCollectionResult>> GetAccountsAsync(AccountArgs? args, PagingArgs? paging) => _data.GetAccountsAsync(args, paging);

    /// <inheritdoc/>
    public Task<Result<AccountCollectionResult>> GetAccountsQueryAsync(QueryArgs? query, PagingArgs? paging) => _data.GetAccountsQueryAsync(query, paging);

    /// <inheritdoc/>
    public Task<Result<AccountDetail?>> GetDetailAsync(string? accountId) => Result.Go().CacheGetOrAddAsync(_cache, accountId, () => _data.GetDetailAsync(accountId));

    /// <inheritdoc/>
    public Task<Result<Balance?>> GetBalanceAsync(string? accountId) => Result.Go().CacheGetOrAddAsync(_cache, accountId, () => _data.GetBalanceAsync(accountId));

    /// <inheritdoc/>
    public Task<Result<FileContentResult?>> GetStatementAsync(string? accountId) => _data.GetStatementAsync(accountId);
}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json.Serialization;
using CoreEx.Entities;
using CoreEx.Entities.Extended;
using CoreEx.RefData;
using RefDataNamespace = Cdr.Banking.Business.Entities;

namespace Cdr.Banking.Business.Entities
{
    /// <summary>
    /// Represents the <see cref="Account"/> Detail entity.
    /// </summary>
    public partial class AccountDetail : Account, IEquatable<AccountDetail>
    {
        private string? _bsb;
        private string? _accountNumber;
        private string? _bundleName;
        private string? _specificAccountUTypeSid;
        private TermDepositAccount? _termDeposit;
        private CreditCardAccount? _creditCard;

        /// <summary>
        /// Gets or sets the Bsb.
        /// </summary>
        public string? Bsb { get => _bsb; set => SetValue(ref _bsb, value); }

        /// <summary>
        /// Gets or sets the Account Number.
        /// </summary>
        public string? AccountNumber { get => _accountNumber; set => SetValue(ref _accountNumber, value); }

        /// <summary>
        /// Gets or sets the Bundle Name.
        /// </summary>
        public string? BundleName { get => _bundleName; set => SetValue(ref _bundleName, value); }

        /// <summary>
        /// Gets or sets the <see cref="SpecificAccountUType"/> using the underlying Serialization Identifier (SID).
        /// </summary>
        [JsonPropertyName("specificAccountUType")]
        public string? SpecificAccountUTypeSid { get => _specificAccountUTypeSid; set => SetValue(ref _specificAccountUTypeSid, value); }

        /// <summary>
        /// Gets or sets the Specific Account U Type (see <see cref="RefDataNamespace.AccountUType"/>).
        /// </summary>
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [JsonIgnore]
        public RefDataNamespace.AccountUType? SpecificAccountUType { get => _specificAccountUTypeSid; set => SetValue(ref _specificAccountUTypeSid, value); }

        /// <summary>
        /// Gets or sets the Term Deposit (see <see cref="Business.Entities.TermDepositAccount"/>).
        /// </summary>
        public TermDepositAccount? TermDeposit { get => _termDeposit; set => SetValue(ref _termDeposit, value); }

        /// <summary>
        /// Gets or sets the Credit Card (see <see cref="Business.Entities.CreditCardAccount"/>).
        /// </summary>
        public CreditCardAccount? CreditCard { get => _creditCard; set => SetValue(ref _creditCard, value); }

        /// <inheritdoc/>
        protected override IEnumerable<IPropertyValue> GetPropertyValues()
        {
            foreach (var pv in base.GetPropertyValues())
                yield return pv;

            yield return CreateProperty(Bsb, v => Bsb = v);
            yield return CreateProperty(AccountNumber, v => AccountNumber = v);
            yield return CreateProperty(BundleName, v => BundleName = v);
            yield return CreateProperty(SpecificAccountUTypeSid, v => SpecificAccountUTypeSid = v);
            yield return CreateProperty(TermDeposit, v => TermDeposit = v);
            yield return CreateProperty(CreditCard, v => CreditCard = v);
        }

        /// <inheritdoc/>
        public bool Equals(AccountDetail? other) => base.Equals(other);

        /// <summary>
        /// Compares two values for equality.
        /// </summary>
        /// <param name="a"><see cref="AccountDetail"/> A.</param>
        /// <param name="b"><see cref="AccountDetail"/> B.</param>
        /// <returns><c>true</c> indicates equal; otherwise, <c>false</c> for not equal.</returns>
        public static bool operator ==(AccountDetail? a, AccountDetail? b) => Equals(a, b);
    
        /// <summary>
        /// Compares two values for non-equality.
        /// </summary>
        /// <param name="a"><see cref="AccountDetail"/> A.</param>
        /// <param name="b"><see cref="AccountDetail"/> B.</param>
        /// <returns><c>true</c> indicates not equal; otherwise, <c>false</c> for equal.</returns>
        public static bool operator !=(AccountDetail? a, AccountDetail? b) => !Equals(a, b);
 
        /// <inheritdoc/>
        public override int GetHashCode() => base.GetHashCode();

        /// <inheritdoc/>
        public override object Clone() => CreateClone<AccountDetail>(this);
    }
}

#pragma warning restore
#nullable restore
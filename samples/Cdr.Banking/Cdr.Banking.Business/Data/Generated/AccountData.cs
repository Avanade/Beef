/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Cdr.Banking.Business.Data
{
    /// <summary>
    /// Provides the <see cref="Account"/> data access.
    /// </summary>
    public partial class AccountData : IAccountData
    {
        private readonly ICosmos _cosmos;
        private Func<IQueryable<Model.Account>, AccountArgs?, IQueryable<Model.Account>>? _getAccountsOnQuery;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountData"/> class.
        /// </summary>
        /// <param name="cosmos">The <see cref="ICosmos"/>.</param>
        public AccountData(ICosmos cosmos)
            { _cosmos = cosmos ?? throw new ArgumentNullException(nameof(cosmos)); AccountDataCtor(); }

        partial void AccountDataCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Get all accounts.
        /// </summary>
        /// <param name="args">The Args (see <see cref="Entities.AccountArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>The <see cref="AccountCollectionResult"/>.</returns>
        public Task<AccountCollectionResult> GetAccountsAsync(AccountArgs? args, PagingArgs? paging)
        {
            return _cosmos.Accounts.Query(q => _getAccountsOnQuery?.Invoke(q, args) ?? q).WithPaging(paging).SelectResultAsync<AccountCollectionResult, AccountCollection>();
        }

        /// <summary>
        /// Get <see cref="AccountDetail"/>.
        /// </summary>
        /// <param name="accountId">The <see cref="Account"/> identifier.</param>
        /// <returns>The selected <see cref="AccountDetail"/> where found.</returns>
        public Task<AccountDetail?> GetDetailAsync(string? accountId)
        {
            return _cosmos.AccountDetails.GetAsync(accountId);
        }

        /// <summary>
        /// Get <see cref="Account"/> <see cref="Balance"/>.
        /// </summary>
        /// <param name="accountId">The <see cref="Account"/> identifier.</param>
        /// <returns>The selected <see cref="Balance"/> where found.</returns>
        public Task<Balance?> GetBalanceAsync(string? accountId) => GetBalanceOnImplementationAsync(accountId);

        /// <summary>
        /// Provides the <see cref="Account"/> and Entity Framework <see cref="Model.Account"/> <i>AutoMapper</i> mapping.
        /// </summary>
        public partial class CosmosMapperProfile : AutoMapper.Profile
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="CosmosMapperProfile"/> class.
            /// </summary>
            public CosmosMapperProfile()
            {
                var s2d = CreateMap<Account, Model.Account>();
                s2d.ForMember(d => d.Id, o => o.MapFrom(s => s.Id));
                s2d.ForMember(d => d.CreationDate, o => o.MapFrom(s => s.CreationDate));
                s2d.ForMember(d => d.DisplayName, o => o.MapFrom(s => s.DisplayName));
                s2d.ForMember(d => d.Nickname, o => o.MapFrom(s => s.Nickname));
                s2d.ForMember(d => d.OpenStatus, o => o.MapFrom(s => s.OpenStatusSid));
                s2d.ForMember(d => d.IsOwned, o => o.MapFrom(s => s.IsOwned));
                s2d.ForMember(d => d.MaskedNumber, o => o.MapFrom(s => s.MaskedNumber));
                s2d.ForMember(d => d.ProductCategory, o => o.MapFrom(s => s.ProductCategorySid));
                s2d.ForMember(d => d.ProductName, o => o.MapFrom(s => s.ProductName));

                var d2s = CreateMap<Model.Account, Account>();
                d2s.ForMember(s => s.Id, o => o.MapFrom(d => d.Id));
                d2s.ForMember(s => s.CreationDate, o => o.MapFrom(d => d.CreationDate));
                d2s.ForMember(s => s.DisplayName, o => o.MapFrom(d => d.DisplayName));
                d2s.ForMember(s => s.Nickname, o => o.MapFrom(d => d.Nickname));
                d2s.ForMember(s => s.OpenStatusSid, o => o.MapFrom(d => d.OpenStatus));
                d2s.ForMember(s => s.IsOwned, o => o.MapFrom(d => d.IsOwned));
                d2s.ForMember(s => s.MaskedNumber, o => o.MapFrom(d => d.MaskedNumber));
                d2s.ForMember(s => s.ProductCategorySid, o => o.MapFrom(d => d.ProductCategory));
                d2s.ForMember(s => s.ProductName, o => o.MapFrom(d => d.ProductName));

                CosmosMapperProfileCtor(s2d, d2s);
            }

            partial void CosmosMapperProfileCtor(AutoMapper.IMappingExpression<Account, Model.Account> s2d, AutoMapper.IMappingExpression<Model.Account, Account> d2s); // Enables the constructor to be extended.
        }
    }
}

#pragma warning restore
#nullable restore
/*
 * This file is automatically generated; any changes will be lost. 
 */

namespace Cdr.Banking.Business.Data;

/// <summary>
/// Provides the <see cref="Account"/> data access.
/// </summary>
public partial class AccountData : IAccountData
{
    private readonly ICosmos _cosmos;
    private Func<IQueryable<Model.Account>, AccountArgs?, IQueryable<Model.Account>>? _getAccountsOnQuery;
    private Func<IQueryable<Model.Account>, QueryArgs?, IQueryable<Model.Account>>? _getAccountsQueryOnQuery;

    /// <summary>
    /// Initializes a new instance of the <see cref="AccountData"/> class.
    /// </summary>
    /// <param name="cosmos">The <see cref="ICosmos"/>.</param>
    public AccountData(ICosmos cosmos)
        { _cosmos = cosmos.ThrowIfNull(); AccountDataCtor(); }

    partial void AccountDataCtor(); // Enables additional functionality to be added to the constructor.

    /// <inheritdoc/>
    public Task<Result<AccountCollectionResult>> GetAccountsAsync(AccountArgs? args, PagingArgs? paging)
        => _cosmos.Accounts.Query(q => _getAccountsOnQuery?.Invoke(q, args) ?? q).WithPaging(paging).SelectResultWithResultAsync<AccountCollectionResult, AccountCollection>();

    /// <inheritdoc/>
    public Task<Result<AccountCollectionResult>> GetAccountsQueryAsync(QueryArgs? query, PagingArgs? paging)
        => _cosmos.Accounts.Query(q => _getAccountsQueryOnQuery?.Invoke(q, query) ?? q).WithPaging(paging).SelectResultWithResultAsync<AccountCollectionResult, AccountCollection>();

    /// <inheritdoc/>
    public Task<Result<AccountDetail?>> GetDetailAsync(string? accountId)
        => _cosmos.AccountDetails.GetWithResultAsync(accountId);

    /// <inheritdoc/>
    public Task<Result<Balance?>> GetBalanceAsync(string? accountId) => GetBalanceOnImplementationAsync(accountId);

    /// <inheritdoc/>
    public Task<Result<FileContentResult?>> GetStatementAsync(string? accountId) => GetStatementOnImplementationAsync(accountId);

    /// <summary>
    /// Provides the <see cref="Account"/> to Cosmos <see cref="Model.Account"/> mapping.
    /// </summary>
    public partial class EntityToModelCosmosMapper : Mapper<Account, Model.Account>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityToModelCosmosMapper"/> class.
        /// </summary>
        public EntityToModelCosmosMapper()
        {
            Map((s, d) => d.Id = s.Id, OperationTypes.Any, s => s.Id == default, d => d.Id = default);
            Map((s, d) => d.CreationDate = s.CreationDate, OperationTypes.Any, s => s.CreationDate == default, d => d.CreationDate = default);
            Map((s, d) => d.DisplayName = s.DisplayName, OperationTypes.Any, s => s.DisplayName == default, d => d.DisplayName = default);
            Map((s, d) => d.Nickname = s.Nickname, OperationTypes.Any, s => s.Nickname == default, d => d.Nickname = default);
            Map((s, d) => d.OpenStatus = s.OpenStatusSid, OperationTypes.Any, s => s.OpenStatusSid == default, d => d.OpenStatus = default);
            Map((s, d) => d.IsOwned = s.IsOwned, OperationTypes.Any, s => s.IsOwned == default, d => d.IsOwned = default);
            Map((s, d) => d.MaskedNumber = s.MaskedNumber, OperationTypes.Any, s => s.MaskedNumber == default, d => d.MaskedNumber = default);
            Map((s, d) => d.ProductCategory = s.ProductCategorySid, OperationTypes.Any, s => s.ProductCategorySid == default, d => d.ProductCategory = default);
            Map((s, d) => d.ProductName = s.ProductName, OperationTypes.Any, s => s.ProductName == default, d => d.ProductName = default);
            EntityToModelCosmosMapperCtor();
        }

        partial void EntityToModelCosmosMapperCtor(); // Enables the constructor to be extended.
    }

    /// <summary>
    /// Provides the Cosmos <see cref="Model.Account"/> to <see cref="Account"/> mapping.
    /// </summary>
    public partial class ModelToEntityCosmosMapper : Mapper<Model.Account, Account>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelToEntityCosmosMapper"/> class.
        /// </summary>
        public ModelToEntityCosmosMapper()
        {
            Map((s, d) => d.Id = (string?)s.Id!, OperationTypes.Any, s => s.Id == default, d => d.Id = default);
            Map((s, d) => d.CreationDate = (DateTime)s.CreationDate!, OperationTypes.Any, s => s.CreationDate == default, d => d.CreationDate = default);
            Map((s, d) => d.DisplayName = (string?)s.DisplayName!, OperationTypes.Any, s => s.DisplayName == default, d => d.DisplayName = default);
            Map((s, d) => d.Nickname = (string?)s.Nickname!, OperationTypes.Any, s => s.Nickname == default, d => d.Nickname = default);
            Map((s, d) => d.OpenStatusSid = (string?)s.OpenStatus!, OperationTypes.Any, s => s.OpenStatus == default, d => d.OpenStatusSid = default);
            Map((s, d) => d.IsOwned = (bool)s.IsOwned!, OperationTypes.Any, s => s.IsOwned == default, d => d.IsOwned = default);
            Map((s, d) => d.MaskedNumber = (string?)s.MaskedNumber!, OperationTypes.Any, s => s.MaskedNumber == default, d => d.MaskedNumber = default);
            Map((s, d) => d.ProductCategorySid = (string?)s.ProductCategory!, OperationTypes.Any, s => s.ProductCategory == default, d => d.ProductCategorySid = default);
            Map((s, d) => d.ProductName = (string?)s.ProductName!, OperationTypes.Any, s => s.ProductName == default, d => d.ProductName = default);
            ModelToEntityCosmosMapperCtor();
        }

        partial void ModelToEntityCosmosMapperCtor(); // Enables the constructor to be extended.
    }
}
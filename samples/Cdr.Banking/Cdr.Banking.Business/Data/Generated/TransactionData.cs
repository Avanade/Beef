/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Cdr.Banking.Business.Data
{
    /// <summary>
    /// Provides the <see cref="Transaction"/> data access.
    /// </summary>
    public partial class TransactionData : ITransactionData
    {
        private readonly ICosmos _cosmos;
        private Func<IQueryable<Model.Transaction>, string?, TransactionArgs?, IQueryable<Model.Transaction>>? _getTransactionsOnQuery;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionData"/> class.
        /// </summary>
        /// <param name="cosmos">The <see cref="ICosmos"/>.</param>
        public TransactionData(ICosmos cosmos)
            { _cosmos = cosmos ?? throw new ArgumentNullException(nameof(cosmos)); TransactionDataCtor(); }

        partial void TransactionDataCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Get transaction for account.
        /// </summary>
        /// <param name="accountId">The Account Id.</param>
        /// <param name="args">The Args (see <see cref="Entities.TransactionArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>The <see cref="TransactionCollectionResult"/>.</returns>
        public Task<TransactionCollectionResult> GetTransactionsAsync(string? accountId, TransactionArgs? args, PagingArgs? paging)
        {
            return _cosmos.Transactions.Query(new Mac.PartitionKey(accountId), q => _getTransactionsOnQuery?.Invoke(q, accountId, args) ?? q).WithPaging(paging).SelectResultAsync<TransactionCollectionResult, TransactionCollection>();
        }

        /// <summary>
        /// Provides the <see cref="Transaction"/> to Entity Framework <see cref="Model.Transaction"/> mapping.
        /// </summary>
        public partial class EntityToModelCosmosMapper : Mapper<Transaction, Model.Transaction>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="EntityToModelCosmosMapper"/> class.
            /// </summary>
            public EntityToModelCosmosMapper()
            {
                Map((s, d) => d.Id = s.Id);
                Map((s, d) => d.AccountId = s.AccountId);
                Map((s, d) => d.IsDetailAvailable = s.IsDetailAvailable);
                Map((s, d) => d.Type = s.TypeSid);
                Map((s, d) => d.Status = s.StatusSid);
                Map((s, d) => d.Description = s.Description);
                Map((s, d) => d.PostingDateTime = s.PostingDateTime);
                Map((s, d) => d.ExecutionDateTime = s.ExecutionDateTime);
                Map((s, d) => d.Amount = s.Amount);
                Map((s, d) => d.Currency = s.Currency);
                Map((s, d) => d.Reference = s.Reference);
                Map((s, d) => d.MerchantName = s.MerchantName);
                Map((s, d) => d.MerchantCategoryCode = s.MerchantCategoryCode);
                Map((s, d) => d.BillerCode = s.BillerCode);
                Map((s, d) => d.BillerName = s.BillerName);
                Map((s, d) => d.ApcaNumber = s.ApcaNumber);
                EntityToModelCosmosMapperCtor();
            }

            partial void EntityToModelCosmosMapperCtor(); // Enables the constructor to be extended.
        }

        /// <summary>
        /// Provides the Entity Framework <see cref="Model.Transaction"/> to <see cref="Transaction"/> mapping.
        /// </summary>
        public partial class ModelToEntityCosmosMapper : Mapper<Model.Transaction, Transaction>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ModelToEntityCosmosMapper"/> class.
            /// </summary>
            public ModelToEntityCosmosMapper()
            {
                Map((s, d) => d.Id = (string?)s.Id);
                Map((s, d) => d.AccountId = (string?)s.AccountId);
                Map((s, d) => d.IsDetailAvailable = (bool)s.IsDetailAvailable);
                Map((s, d) => d.TypeSid = (string?)s.Type);
                Map((s, d) => d.StatusSid = (string?)s.Status);
                Map((s, d) => d.Description = (string?)s.Description);
                Map((s, d) => d.PostingDateTime = (DateTime)s.PostingDateTime);
                Map((s, d) => d.ExecutionDateTime = (DateTime)s.ExecutionDateTime);
                Map((s, d) => d.Amount = (decimal)s.Amount);
                Map((s, d) => d.Currency = (string?)s.Currency);
                Map((s, d) => d.Reference = (string?)s.Reference);
                Map((s, d) => d.MerchantName = (string?)s.MerchantName);
                Map((s, d) => d.MerchantCategoryCode = (string?)s.MerchantCategoryCode);
                Map((s, d) => d.BillerCode = (string?)s.BillerCode);
                Map((s, d) => d.BillerName = (string?)s.BillerName);
                Map((s, d) => d.ApcaNumber = (string?)s.ApcaNumber);
                ModelToEntityCosmosMapperCtor();
            }

            /// <inheritdoc/>
            public override bool IsSourceInitial(Model.Transaction s)
                => s.Id == default
                && s.AccountId == default
                && s.IsDetailAvailable == default
                && s.Type == default
                && s.Status == default
                && s.Description == default
                && s.PostingDateTime == default
                && s.ExecutionDateTime == default
                && s.Amount == default
                && s.Currency == default
                && s.Reference == default
                && s.MerchantName == default
                && s.MerchantCategoryCode == default
                && s.BillerCode == default
                && s.BillerName == default
                && s.ApcaNumber == default;

            partial void ModelToEntityCosmosMapperCtor(); // Enables the constructor to be extended.
        }
    }
}

#pragma warning restore
#nullable restore
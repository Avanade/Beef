/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Cdr.Banking.Business.Data
{
    /// <summary>
    /// Provides the <see cref="Transaction"/> data access.
    /// </summary>
    public partial class TransactionData : ITransactionData
    {
        private readonly ICosmos _cosmos;
        private Func<IQueryable<Model.Transaction>, string?, TransactionArgs?, IQueryable<Model.Transaction>>? _getTransactionsOnQuery;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionData"/> class.
        /// </summary>
        /// <param name="cosmos">The <see cref="ICosmos"/>.</param>
        public TransactionData(ICosmos cosmos)
            { _cosmos = cosmos ?? throw new ArgumentNullException(nameof(cosmos)); TransactionDataCtor(); }

        partial void TransactionDataCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Get transaction for account.
        /// </summary>
        /// <param name="accountId">The Account Id.</param>
        /// <param name="args">The Args (see <see cref="Entities.TransactionArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>The <see cref="TransactionCollectionResult"/>.</returns>
        public Task<TransactionCollectionResult> GetTransactionsAsync(string? accountId, TransactionArgs? args, PagingArgs? paging) => DataInvoker.Current.InvokeAsync(this, _ =>
        {
            return _cosmos.Transactions.Query(new Mac.PartitionKey(accountId), q => _getTransactionsOnQuery?.Invoke(q, accountId, args) ?? q).WithPaging(paging).SelectResultAsync<TransactionCollectionResult, TransactionCollection>();
        });

        /// <summary>
        /// Provides the <see cref="Transaction"/> and Entity Framework <see cref="Model.Transaction"/> <i>AutoMapper</i> mapping.
        /// </summary>
        public partial class CosmosMapperProfile : AutoMapper.Profile
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="CosmosMapperProfile"/> class.
            /// </summary>
            public CosmosMapperProfile()
            {
                var s2d = CreateMap<Transaction, Model.Transaction>();
                s2d.ForMember(d => d.Id, o => o.MapFrom(s => s.Id));
                s2d.ForMember(d => d.AccountId, o => o.MapFrom(s => s.AccountId));
                s2d.ForMember(d => d.IsDetailAvailable, o => o.MapFrom(s => s.IsDetailAvailable));
                s2d.ForMember(d => d.Type, o => o.MapFrom(s => s.TypeSid));
                s2d.ForMember(d => d.Status, o => o.MapFrom(s => s.StatusSid));
                s2d.ForMember(d => d.Description, o => o.MapFrom(s => s.Description));
                s2d.ForMember(d => d.PostingDateTime, o => o.MapFrom(s => s.PostingDateTime));
                s2d.ForMember(d => d.ExecutionDateTime, o => o.MapFrom(s => s.ExecutionDateTime));
                s2d.ForMember(d => d.Amount, o => o.MapFrom(s => s.Amount));
                s2d.ForMember(d => d.Currency, o => o.MapFrom(s => s.Currency));
                s2d.ForMember(d => d.Reference, o => o.MapFrom(s => s.Reference));
                s2d.ForMember(d => d.MerchantName, o => o.MapFrom(s => s.MerchantName));
                s2d.ForMember(d => d.MerchantCategoryCode, o => o.MapFrom(s => s.MerchantCategoryCode));
                s2d.ForMember(d => d.BillerCode, o => o.MapFrom(s => s.BillerCode));
                s2d.ForMember(d => d.BillerName, o => o.MapFrom(s => s.BillerName));
                s2d.ForMember(d => d.ApcaNumber, o => o.MapFrom(s => s.ApcaNumber));

                var d2s = CreateMap<Model.Transaction, Transaction>();
                d2s.ForMember(s => s.Id, o => o.MapFrom(d => d.Id));
                d2s.ForMember(s => s.AccountId, o => o.MapFrom(d => d.AccountId));
                d2s.ForMember(s => s.IsDetailAvailable, o => o.MapFrom(d => d.IsDetailAvailable));
                d2s.ForMember(s => s.TypeSid, o => o.MapFrom(d => d.Type));
                d2s.ForMember(s => s.StatusSid, o => o.MapFrom(d => d.Status));
                d2s.ForMember(s => s.Description, o => o.MapFrom(d => d.Description));
                d2s.ForMember(s => s.PostingDateTime, o => o.MapFrom(d => d.PostingDateTime));
                d2s.ForMember(s => s.ExecutionDateTime, o => o.MapFrom(d => d.ExecutionDateTime));
                d2s.ForMember(s => s.Amount, o => o.MapFrom(d => d.Amount));
                d2s.ForMember(s => s.Currency, o => o.MapFrom(d => d.Currency));
                d2s.ForMember(s => s.Reference, o => o.MapFrom(d => d.Reference));
                d2s.ForMember(s => s.MerchantName, o => o.MapFrom(d => d.MerchantName));
                d2s.ForMember(s => s.MerchantCategoryCode, o => o.MapFrom(d => d.MerchantCategoryCode));
                d2s.ForMember(s => s.BillerCode, o => o.MapFrom(d => d.BillerCode));
                d2s.ForMember(s => s.BillerName, o => o.MapFrom(d => d.BillerName));
                d2s.ForMember(s => s.ApcaNumber, o => o.MapFrom(d => d.ApcaNumber));

                CosmosMapperProfileCtor(s2d, d2s);
            }

            partial void CosmosMapperProfileCtor(AutoMapper.IMappingExpression<Transaction, Model.Transaction> s2d, AutoMapper.IMappingExpression<Model.Transaction, Transaction> d2s); // Enables the constructor to be extended.
        }
    }
}

#pragma warning restore
#nullable restore
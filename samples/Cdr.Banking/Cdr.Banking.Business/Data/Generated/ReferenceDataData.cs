/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Azure.Cosmos;
using Beef;
using Beef.Business;
using Beef.Data.Cosmos;
using Beef.Mapper;
using Beef.Mapper.Converters;
using RefDataNamespace = Cdr.Banking.Common.Entities;

namespace Cdr.Banking.Business.Data
{
    /// <summary>
    /// Provides the <b>ReferenceData</b> data access.
    /// </summary>
    public partial class ReferenceDataData : IReferenceDataData
    {
        private readonly ICosmosDb _cosmos;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataData"/> class.
        /// </summary>
        /// <param name="cosmos">The <see cref="ICosmosDb"/>.</param>
        public ReferenceDataData(ICosmosDb cosmos)
            { _cosmos = Check.NotNull(cosmos, nameof(cosmos)); DataCtor(); }

        partial void DataCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets all the <see cref="RefDataNamespace.OpenStatus"/> items.
        /// </summary>
        /// <returns>The <see cref="RefDataNamespace.OpenStatusCollection"/>.</returns>
        public async Task<RefDataNamespace.OpenStatusCollection> OpenStatusGetAllAsync()
        {
            var __coll = new RefDataNamespace.OpenStatusCollection();
            await DataInvoker.Current.InvokeAsync(this, async () => { _cosmos.ValueQuery<RefDataNamespace.OpenStatus, Model.OpenStatus>(OpenStatusMapper.CreateArgs("RefData")).SelectQuery(__coll); await Task.CompletedTask.ConfigureAwait(false); }).ConfigureAwait(false);
            return __coll;
        }

        /// <summary>
        /// Gets all the <see cref="RefDataNamespace.ProductCategory"/> items.
        /// </summary>
        /// <returns>The <see cref="RefDataNamespace.ProductCategoryCollection"/>.</returns>
        public async Task<RefDataNamespace.ProductCategoryCollection> ProductCategoryGetAllAsync()
        {
            var __coll = new RefDataNamespace.ProductCategoryCollection();
            await DataInvoker.Current.InvokeAsync(this, async () => { _cosmos.ValueQuery<RefDataNamespace.ProductCategory, Model.ProductCategory>(ProductCategoryMapper.CreateArgs("RefData")).SelectQuery(__coll); await Task.CompletedTask.ConfigureAwait(false); }).ConfigureAwait(false);
            return __coll;
        }

        /// <summary>
        /// Gets all the <see cref="RefDataNamespace.AccountUType"/> items.
        /// </summary>
        /// <returns>The <see cref="RefDataNamespace.AccountUTypeCollection"/>.</returns>
        public async Task<RefDataNamespace.AccountUTypeCollection> AccountUTypeGetAllAsync()
        {
            var __coll = new RefDataNamespace.AccountUTypeCollection();
            await DataInvoker.Current.InvokeAsync(this, async () => { _cosmos.ValueQuery<RefDataNamespace.AccountUType, Model.AccountUType>(AccountUTypeMapper.CreateArgs("RefData")).SelectQuery(__coll); await Task.CompletedTask.ConfigureAwait(false); }).ConfigureAwait(false);
            return __coll;
        }

        /// <summary>
        /// Gets all the <see cref="RefDataNamespace.MaturityInstructions"/> items.
        /// </summary>
        /// <returns>The <see cref="RefDataNamespace.MaturityInstructionsCollection"/>.</returns>
        public async Task<RefDataNamespace.MaturityInstructionsCollection> MaturityInstructionsGetAllAsync()
        {
            var __coll = new RefDataNamespace.MaturityInstructionsCollection();
            await DataInvoker.Current.InvokeAsync(this, async () => { _cosmos.ValueQuery<RefDataNamespace.MaturityInstructions, Model.MaturityInstructions>(MaturityInstructionsMapper.CreateArgs("RefData")).SelectQuery(__coll); await Task.CompletedTask.ConfigureAwait(false); }).ConfigureAwait(false);
            return __coll;
        }

        /// <summary>
        /// Gets all the <see cref="RefDataNamespace.TransactionType"/> items.
        /// </summary>
        /// <returns>The <see cref="RefDataNamespace.TransactionTypeCollection"/>.</returns>
        public async Task<RefDataNamespace.TransactionTypeCollection> TransactionTypeGetAllAsync()
        {
            var __coll = new RefDataNamespace.TransactionTypeCollection();
            await DataInvoker.Current.InvokeAsync(this, async () => { _cosmos.ValueQuery<RefDataNamespace.TransactionType, Model.TransactionType>(TransactionTypeMapper.CreateArgs("RefData")).SelectQuery(__coll); await Task.CompletedTask.ConfigureAwait(false); }).ConfigureAwait(false);
            return __coll;
        }

        /// <summary>
        /// Gets all the <see cref="RefDataNamespace.TransactionStatus"/> items.
        /// </summary>
        /// <returns>The <see cref="RefDataNamespace.TransactionStatusCollection"/>.</returns>
        public async Task<RefDataNamespace.TransactionStatusCollection> TransactionStatusGetAllAsync()
        {
            var __coll = new RefDataNamespace.TransactionStatusCollection();
            await DataInvoker.Current.InvokeAsync(this, async () => { _cosmos.ValueQuery<RefDataNamespace.TransactionStatus, Model.TransactionStatus>(TransactionStatusMapper.CreateArgs("RefData")).SelectQuery(__coll); await Task.CompletedTask.ConfigureAwait(false); }).ConfigureAwait(false);
            return __coll;
        }

        /// <summary>
        /// Provides the <see cref="RefDataNamespace.OpenStatus"/> and Cosmos <see cref="Model.OpenStatus"/> property mapping.
        /// </summary>
        public static CosmosDbMapper<RefDataNamespace.OpenStatus, Model.OpenStatus> OpenStatusMapper => CosmosDbMapper.CreateAuto<RefDataNamespace.OpenStatus, Model.OpenStatus>()
            .AddStandardProperties();

        /// <summary>
        /// Provides the <see cref="RefDataNamespace.ProductCategory"/> and Cosmos <see cref="Model.ProductCategory"/> property mapping.
        /// </summary>
        public static CosmosDbMapper<RefDataNamespace.ProductCategory, Model.ProductCategory> ProductCategoryMapper => CosmosDbMapper.CreateAuto<RefDataNamespace.ProductCategory, Model.ProductCategory>()
            .AddStandardProperties();

        /// <summary>
        /// Provides the <see cref="RefDataNamespace.AccountUType"/> and Cosmos <see cref="Model.AccountUType"/> property mapping.
        /// </summary>
        public static CosmosDbMapper<RefDataNamespace.AccountUType, Model.AccountUType> AccountUTypeMapper => CosmosDbMapper.CreateAuto<RefDataNamespace.AccountUType, Model.AccountUType>()
            .AddStandardProperties();

        /// <summary>
        /// Provides the <see cref="RefDataNamespace.MaturityInstructions"/> and Cosmos <see cref="Model.MaturityInstructions"/> property mapping.
        /// </summary>
        public static CosmosDbMapper<RefDataNamespace.MaturityInstructions, Model.MaturityInstructions> MaturityInstructionsMapper => CosmosDbMapper.CreateAuto<RefDataNamespace.MaturityInstructions, Model.MaturityInstructions>()
            .AddStandardProperties();

        /// <summary>
        /// Provides the <see cref="RefDataNamespace.TransactionType"/> and Cosmos <see cref="Model.TransactionType"/> property mapping.
        /// </summary>
        public static CosmosDbMapper<RefDataNamespace.TransactionType, Model.TransactionType> TransactionTypeMapper => CosmosDbMapper.CreateAuto<RefDataNamespace.TransactionType, Model.TransactionType>()
            .AddStandardProperties();

        /// <summary>
        /// Provides the <see cref="RefDataNamespace.TransactionStatus"/> and Cosmos <see cref="Model.TransactionStatus"/> property mapping.
        /// </summary>
        public static CosmosDbMapper<RefDataNamespace.TransactionStatus, Model.TransactionStatus> TransactionStatusMapper => CosmosDbMapper.CreateAuto<RefDataNamespace.TransactionStatus, Model.TransactionStatus>()
            .AddStandardProperties();
    }
}

#pragma warning restore
#nullable restore
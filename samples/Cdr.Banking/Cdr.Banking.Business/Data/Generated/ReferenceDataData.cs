/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Cdr.Banking.Business.Data
{
    /// <summary>
    /// Provides the <b>ReferenceData</b> data access.
    /// </summary>
    public partial class ReferenceDataData : IReferenceDataData
    {
        private readonly ICosmos _cosmos;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceDataData"/> class.
        /// </summary>
        /// <param name="cosmos">The <see cref="ICosmos"/>.</param>
        public ReferenceDataData(ICosmos cosmos)
            { _cosmos = cosmos ?? throw new ArgumentNullException(nameof(cosmos)); ReferenceDataDataCtor(); }

        partial void ReferenceDataDataCtor(); // Enables additional functionality to be added to the constructor.

        /// <inheritdoc/>
        public Task<RefDataNamespace.OpenStatusCollection> OpenStatusGetAllAsync()
            => DataInvoker.Current.InvokeAsync(this, _ => _cosmos.ValueContainer<RefDataNamespace.OpenStatus, Model.OpenStatus>("RefData").Query().SelectQueryAsync<RefDataNamespace.OpenStatusCollection>());

        /// <inheritdoc/>
        public Task<RefDataNamespace.ProductCategoryCollection> ProductCategoryGetAllAsync()
            => DataInvoker.Current.InvokeAsync(this, _ => _cosmos.ValueContainer<RefDataNamespace.ProductCategory, Model.ProductCategory>("RefData").Query().SelectQueryAsync<RefDataNamespace.ProductCategoryCollection>());

        /// <inheritdoc/>
        public Task<RefDataNamespace.AccountUTypeCollection> AccountUTypeGetAllAsync()
            => DataInvoker.Current.InvokeAsync(this, _ => _cosmos.ValueContainer<RefDataNamespace.AccountUType, Model.AccountUType>("RefData").Query().SelectQueryAsync<RefDataNamespace.AccountUTypeCollection>());

        /// <inheritdoc/>
        public Task<RefDataNamespace.MaturityInstructionsCollection> MaturityInstructionsGetAllAsync()
            => DataInvoker.Current.InvokeAsync(this, _ => _cosmos.ValueContainer<RefDataNamespace.MaturityInstructions, Model.MaturityInstructions>("RefData").Query().SelectQueryAsync<RefDataNamespace.MaturityInstructionsCollection>());

        /// <inheritdoc/>
        public Task<RefDataNamespace.TransactionTypeCollection> TransactionTypeGetAllAsync()
            => DataInvoker.Current.InvokeAsync(this, _ => _cosmos.ValueContainer<RefDataNamespace.TransactionType, Model.TransactionType>("RefData").Query().SelectQueryAsync<RefDataNamespace.TransactionTypeCollection>());

        /// <inheritdoc/>
        public Task<RefDataNamespace.TransactionStatusCollection> TransactionStatusGetAllAsync()
            => DataInvoker.Current.InvokeAsync(this, _ => _cosmos.ValueContainer<RefDataNamespace.TransactionStatus, Model.TransactionStatus>("RefData").Query().SelectQueryAsync<RefDataNamespace.TransactionStatusCollection>());

        /// <summary>
        /// Provides the <see cref="RefDataNamespace.OpenStatus"/> to Entity Framework <see cref="Model.OpenStatus"/> mapping.
        /// </summary>
        public partial class OpenStatusToModelCosmosMapper : Mapper<RefDataNamespace.OpenStatus, Model.OpenStatus>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="OpenStatusToModelCosmosMapper"/> class.
            /// </summary>
            public OpenStatusToModelCosmosMapper()
            {
                Map((s, d) => d.Id = s.Id);
                Map((s, d) => d.Code = s.Code);
                Map((s, d) => d.Text = s.Text);
                Map((s, d) => d.IsActive = s.IsActive);
                Map((s, d) => d.SortOrder = s.SortOrder);
                Map((s, d) => d.ETag = s.ETag);
                OpenStatusToModelCosmosMapperCtor();
            }

            partial void OpenStatusToModelCosmosMapperCtor(); // Enables the constructor to be extended.
        }

        /// <summary>
        /// Provides the Entity Framework <see cref="Model.OpenStatus"/> to <see cref="RefDataNamespace.OpenStatus"/> mapping.
        /// </summary>
        public partial class ModelToOpenStatusCosmosMapper : Mapper<Model.OpenStatus, RefDataNamespace.OpenStatus>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ModelToEntityCosmosMapper"/> class.
            /// </summary>
            public ModelToOpenStatusCosmosMapper()
            {
                Map((s, d) => d.Id = (Guid)s.Id);
                Map((s, d) => d.Code = (string?)s.Code);
                Map((s, d) => d.Text = (string?)s.Text);
                Map((s, d) => d.IsActive = (bool)s.IsActive);
                Map((s, d) => d.SortOrder = (int)s.SortOrder);
                Map((s, d) => d.ETag = (string?)s.ETag);
                ModelToOpenStatusCosmosMapperCtor();
            }

            partial void ModelToOpenStatusCosmosMapperCtor(); // Enables the constructor to be extended.
        }

        /// <summary>
        /// Provides the <see cref="RefDataNamespace.ProductCategory"/> to Entity Framework <see cref="Model.ProductCategory"/> mapping.
        /// </summary>
        public partial class ProductCategoryToModelCosmosMapper : Mapper<RefDataNamespace.ProductCategory, Model.ProductCategory>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ProductCategoryToModelCosmosMapper"/> class.
            /// </summary>
            public ProductCategoryToModelCosmosMapper()
            {
                Map((s, d) => d.Id = s.Id);
                Map((s, d) => d.Code = s.Code);
                Map((s, d) => d.Text = s.Text);
                Map((s, d) => d.IsActive = s.IsActive);
                Map((s, d) => d.SortOrder = s.SortOrder);
                Map((s, d) => d.ETag = s.ETag);
                ProductCategoryToModelCosmosMapperCtor();
            }

            partial void ProductCategoryToModelCosmosMapperCtor(); // Enables the constructor to be extended.
        }

        /// <summary>
        /// Provides the Entity Framework <see cref="Model.ProductCategory"/> to <see cref="RefDataNamespace.ProductCategory"/> mapping.
        /// </summary>
        public partial class ModelToProductCategoryCosmosMapper : Mapper<Model.ProductCategory, RefDataNamespace.ProductCategory>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ModelToEntityCosmosMapper"/> class.
            /// </summary>
            public ModelToProductCategoryCosmosMapper()
            {
                Map((s, d) => d.Id = (Guid)s.Id);
                Map((s, d) => d.Code = (string?)s.Code);
                Map((s, d) => d.Text = (string?)s.Text);
                Map((s, d) => d.IsActive = (bool)s.IsActive);
                Map((s, d) => d.SortOrder = (int)s.SortOrder);
                Map((s, d) => d.ETag = (string?)s.ETag);
                ModelToProductCategoryCosmosMapperCtor();
            }

            partial void ModelToProductCategoryCosmosMapperCtor(); // Enables the constructor to be extended.
        }

        /// <summary>
        /// Provides the <see cref="RefDataNamespace.AccountUType"/> to Entity Framework <see cref="Model.AccountUType"/> mapping.
        /// </summary>
        public partial class AccountUTypeToModelCosmosMapper : Mapper<RefDataNamespace.AccountUType, Model.AccountUType>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="AccountUTypeToModelCosmosMapper"/> class.
            /// </summary>
            public AccountUTypeToModelCosmosMapper()
            {
                Map((s, d) => d.Id = s.Id);
                Map((s, d) => d.Code = s.Code);
                Map((s, d) => d.Text = s.Text);
                Map((s, d) => d.IsActive = s.IsActive);
                Map((s, d) => d.SortOrder = s.SortOrder);
                Map((s, d) => d.ETag = s.ETag);
                AccountUTypeToModelCosmosMapperCtor();
            }

            partial void AccountUTypeToModelCosmosMapperCtor(); // Enables the constructor to be extended.
        }

        /// <summary>
        /// Provides the Entity Framework <see cref="Model.AccountUType"/> to <see cref="RefDataNamespace.AccountUType"/> mapping.
        /// </summary>
        public partial class ModelToAccountUTypeCosmosMapper : Mapper<Model.AccountUType, RefDataNamespace.AccountUType>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ModelToEntityCosmosMapper"/> class.
            /// </summary>
            public ModelToAccountUTypeCosmosMapper()
            {
                Map((s, d) => d.Id = (Guid)s.Id);
                Map((s, d) => d.Code = (string?)s.Code);
                Map((s, d) => d.Text = (string?)s.Text);
                Map((s, d) => d.IsActive = (bool)s.IsActive);
                Map((s, d) => d.SortOrder = (int)s.SortOrder);
                Map((s, d) => d.ETag = (string?)s.ETag);
                ModelToAccountUTypeCosmosMapperCtor();
            }

            partial void ModelToAccountUTypeCosmosMapperCtor(); // Enables the constructor to be extended.
        }

        /// <summary>
        /// Provides the <see cref="RefDataNamespace.MaturityInstructions"/> to Entity Framework <see cref="Model.MaturityInstructions"/> mapping.
        /// </summary>
        public partial class MaturityInstructionsToModelCosmosMapper : Mapper<RefDataNamespace.MaturityInstructions, Model.MaturityInstructions>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="MaturityInstructionsToModelCosmosMapper"/> class.
            /// </summary>
            public MaturityInstructionsToModelCosmosMapper()
            {
                Map((s, d) => d.Id = s.Id);
                Map((s, d) => d.Code = s.Code);
                Map((s, d) => d.Text = s.Text);
                Map((s, d) => d.IsActive = s.IsActive);
                Map((s, d) => d.SortOrder = s.SortOrder);
                Map((s, d) => d.ETag = s.ETag);
                MaturityInstructionsToModelCosmosMapperCtor();
            }

            partial void MaturityInstructionsToModelCosmosMapperCtor(); // Enables the constructor to be extended.
        }

        /// <summary>
        /// Provides the Entity Framework <see cref="Model.MaturityInstructions"/> to <see cref="RefDataNamespace.MaturityInstructions"/> mapping.
        /// </summary>
        public partial class ModelToMaturityInstructionsCosmosMapper : Mapper<Model.MaturityInstructions, RefDataNamespace.MaturityInstructions>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ModelToEntityCosmosMapper"/> class.
            /// </summary>
            public ModelToMaturityInstructionsCosmosMapper()
            {
                Map((s, d) => d.Id = (Guid)s.Id);
                Map((s, d) => d.Code = (string?)s.Code);
                Map((s, d) => d.Text = (string?)s.Text);
                Map((s, d) => d.IsActive = (bool)s.IsActive);
                Map((s, d) => d.SortOrder = (int)s.SortOrder);
                Map((s, d) => d.ETag = (string?)s.ETag);
                ModelToMaturityInstructionsCosmosMapperCtor();
            }

            partial void ModelToMaturityInstructionsCosmosMapperCtor(); // Enables the constructor to be extended.
        }

        /// <summary>
        /// Provides the <see cref="RefDataNamespace.TransactionType"/> to Entity Framework <see cref="Model.TransactionType"/> mapping.
        /// </summary>
        public partial class TransactionTypeToModelCosmosMapper : Mapper<RefDataNamespace.TransactionType, Model.TransactionType>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="TransactionTypeToModelCosmosMapper"/> class.
            /// </summary>
            public TransactionTypeToModelCosmosMapper()
            {
                Map((s, d) => d.Id = s.Id);
                Map((s, d) => d.Code = s.Code);
                Map((s, d) => d.Text = s.Text);
                Map((s, d) => d.IsActive = s.IsActive);
                Map((s, d) => d.SortOrder = s.SortOrder);
                Map((s, d) => d.ETag = s.ETag);
                TransactionTypeToModelCosmosMapperCtor();
            }

            partial void TransactionTypeToModelCosmosMapperCtor(); // Enables the constructor to be extended.
        }

        /// <summary>
        /// Provides the Entity Framework <see cref="Model.TransactionType"/> to <see cref="RefDataNamespace.TransactionType"/> mapping.
        /// </summary>
        public partial class ModelToTransactionTypeCosmosMapper : Mapper<Model.TransactionType, RefDataNamespace.TransactionType>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ModelToEntityCosmosMapper"/> class.
            /// </summary>
            public ModelToTransactionTypeCosmosMapper()
            {
                Map((s, d) => d.Id = (Guid)s.Id);
                Map((s, d) => d.Code = (string?)s.Code);
                Map((s, d) => d.Text = (string?)s.Text);
                Map((s, d) => d.IsActive = (bool)s.IsActive);
                Map((s, d) => d.SortOrder = (int)s.SortOrder);
                Map((s, d) => d.ETag = (string?)s.ETag);
                ModelToTransactionTypeCosmosMapperCtor();
            }

            partial void ModelToTransactionTypeCosmosMapperCtor(); // Enables the constructor to be extended.
        }

        /// <summary>
        /// Provides the <see cref="RefDataNamespace.TransactionStatus"/> to Entity Framework <see cref="Model.TransactionStatus"/> mapping.
        /// </summary>
        public partial class TransactionStatusToModelCosmosMapper : Mapper<RefDataNamespace.TransactionStatus, Model.TransactionStatus>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="TransactionStatusToModelCosmosMapper"/> class.
            /// </summary>
            public TransactionStatusToModelCosmosMapper()
            {
                Map((s, d) => d.Id = s.Id);
                Map((s, d) => d.Code = s.Code);
                Map((s, d) => d.Text = s.Text);
                Map((s, d) => d.IsActive = s.IsActive);
                Map((s, d) => d.SortOrder = s.SortOrder);
                Map((s, d) => d.ETag = s.ETag);
                TransactionStatusToModelCosmosMapperCtor();
            }

            partial void TransactionStatusToModelCosmosMapperCtor(); // Enables the constructor to be extended.
        }

        /// <summary>
        /// Provides the Entity Framework <see cref="Model.TransactionStatus"/> to <see cref="RefDataNamespace.TransactionStatus"/> mapping.
        /// </summary>
        public partial class ModelToTransactionStatusCosmosMapper : Mapper<Model.TransactionStatus, RefDataNamespace.TransactionStatus>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref="ModelToEntityCosmosMapper"/> class.
            /// </summary>
            public ModelToTransactionStatusCosmosMapper()
            {
                Map((s, d) => d.Id = (Guid)s.Id);
                Map((s, d) => d.Code = (string?)s.Code);
                Map((s, d) => d.Text = (string?)s.Text);
                Map((s, d) => d.IsActive = (bool)s.IsActive);
                Map((s, d) => d.SortOrder = (int)s.SortOrder);
                Map((s, d) => d.ETag = (string?)s.ETag);
                ModelToTransactionStatusCosmosMapperCtor();
            }

            partial void ModelToTransactionStatusCosmosMapperCtor(); // Enables the constructor to be extended.
        }
    }
}

#pragma warning restore
#nullable restore
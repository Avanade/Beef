/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using Beef.Validation;
using Cdr.Banking.Common.Entities;
using Cdr.Banking.Business.Validation;
using Cdr.Banking.Business.DataSvc;
using RefDataNamespace = Cdr.Banking.Common.Entities;

namespace Cdr.Banking.Business
{
    /// <summary>
    /// Provides the Transaction business functionality.
    /// </summary>
    public partial class TransactionManager : ITransactionManager
    {
        #region Private
        #pragma warning disable CS0649 // Defaults to null by design; can be overridden in constructor.

        private readonly Func<string?, TransactionArgs?, PagingArgs?, Task>? _getTransactionsOnPreValidateAsync;
        private readonly Action<MultiValidator, string?, TransactionArgs?, PagingArgs?>? _getTransactionsOnValidate;
        private readonly Func<string?, TransactionArgs?, PagingArgs?, Task>? _getTransactionsOnBeforeAsync;
        private readonly Func<TransactionCollectionResult, string?, TransactionArgs?, PagingArgs?, Task>? _getTransactionsOnAfterAsync;

        #pragma warning restore CS0649
        #endregion

        /// <summary>
        /// Get transaction for account.
        /// </summary>
        /// <param name="accountId">The Account Id.</param>
        /// <param name="args">The Args (see <see cref="TransactionArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>A <see cref="TransactionCollectionResult"/>.</returns>
        public Task<TransactionCollectionResult> GetTransactionsAsync(string? accountId, TransactionArgs? args, PagingArgs? paging)
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Read;
                EntityBase.CleanUp(accountId, args);
                if (_getTransactionsOnPreValidateAsync != null) await _getTransactionsOnPreValidateAsync(accountId, args, paging).ConfigureAwait(false);

                MultiValidator.Create()
                    .Add(accountId.Validate(nameof(accountId)).Mandatory().Common(Validators.AccountId))
                    .Add(args.Validate(nameof(args)).Entity(TransactionArgsValidator.Default))
                    .Additional((__mv) => _getTransactionsOnValidate?.Invoke(__mv, accountId, args, paging))
                    .Run().ThrowOnError();

                if (_getTransactionsOnBeforeAsync != null) await _getTransactionsOnBeforeAsync(accountId, args, paging).ConfigureAwait(false);
                var __result = await TransactionDataSvc.GetTransactionsAsync(accountId, args, paging).ConfigureAwait(false);
                if (_getTransactionsOnAfterAsync != null) await _getTransactionsOnAfterAsync(__result, accountId, args, paging).ConfigureAwait(false);
                Cleaner.Clean(__result);
                return __result;
            });
        }
    }
}

#pragma warning restore IDE0005
#nullable restore
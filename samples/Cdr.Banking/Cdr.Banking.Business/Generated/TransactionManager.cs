/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

namespace Cdr.Banking.Business
{
    /// <summary>
    /// Provides the <see cref="Transaction"/> business functionality.
    /// </summary>
    public partial class TransactionManager : ITransactionManager
    {
        private readonly ITransactionDataSvc _dataService;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionManager"/> class.
        /// </summary>
        /// <param name="dataService">The <see cref="ITransactionDataSvc"/>.</param>
        public TransactionManager(ITransactionDataSvc dataService)
            { _dataService = dataService.ThrowIfNull(); TransactionManagerCtor(); }

        partial void TransactionManagerCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Get transaction for account.
        /// </summary>
        /// <param name="accountId">The Account Id.</param>
        /// <param name="args">The Args (see <see cref="Entities.TransactionArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>The <see cref="TransactionCollectionResult"/>.</returns>
        public Task<Result<TransactionCollectionResult>> GetTransactionsAsync(string? accountId, TransactionArgs? args, PagingArgs? paging) => ManagerInvoker.Current.InvokeAsync(this, _ =>
        {
            return Result.Go().Requires(accountId)
                         .ValidateAsync(() => MultiValidator.Create()
                             .Add(accountId.Validate().Common(Validators.AccountId))
                             .Add(args.Validate().Entity().With<TransactionArgsValidator>()))
                         .ThenAsAsync(() => _dataService.GetTransactionsAsync(accountId, args, paging));
        }, InvokerArgs.Read);
    }
}

#pragma warning restore
#nullable restore
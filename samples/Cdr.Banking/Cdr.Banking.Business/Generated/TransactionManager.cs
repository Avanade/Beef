/*
 * This file is automatically generated; any changes will be lost. 
 */

namespace Cdr.Banking.Business;

/// <summary>
/// Provides the <see cref="Transaction"/> business functionality.
/// </summary>
public partial class TransactionManager : ITransactionManager
{
    private readonly ITransactionDataSvc _dataService;

    /// <summary>
    /// Initializes a new instance of the <see cref="TransactionManager"/> class.
    /// </summary>
    /// <param name="dataService">The <see cref="ITransactionDataSvc"/>.</param>
    public TransactionManager(ITransactionDataSvc dataService)
        { _dataService = dataService.ThrowIfNull(); TransactionManagerCtor(); }

    partial void TransactionManagerCtor(); // Enables additional functionality to be added to the constructor.

    /// <inheritdoc/>
    public Task<Result<TransactionCollectionResult>> GetTransactionsAsync(string? accountId, TransactionArgs? args, PagingArgs? paging) => ManagerInvoker.Current.InvokeAsync(this, (_, ct) =>
    {
        return Result.Go().Requires(accountId)
                     .ValidateAsync(() => MultiValidator.Create()
                         .Add(accountId.Validate().Common(Validators.AccountId))
                         .Add(args.Validate().Entity().With<TransactionArgsValidator>()))
                     .ThenAsAsync(() => _dataService.GetTransactionsAsync(accountId, args, paging));
    }, InvokerArgs.Read);
}
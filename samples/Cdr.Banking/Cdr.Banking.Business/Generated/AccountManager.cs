/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable IDE0005 // Using directive is unnecessary; are required depending on code-gen options

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using Beef.Validation;
using Cdr.Banking.Common.Entities;
using Cdr.Banking.Business.Validation;
using Cdr.Banking.Business.DataSvc;
using RefDataNamespace = Cdr.Banking.Common.Entities;

namespace Cdr.Banking.Business
{
    /// <summary>
    /// Provides the Account business functionality.
    /// </summary>
    public partial class AccountManager : IAccountManager
    {
        #region Private
        #pragma warning disable CS0649 // Defaults to null by design; can be overridden in constructor.

        private readonly Func<AccountArgs?, PagingArgs?, Task>? _getAccountsOnPreValidateAsync;
        private readonly Action<MultiValidator, AccountArgs?, PagingArgs?>? _getAccountsOnValidate;
        private readonly Func<AccountArgs?, PagingArgs?, Task>? _getAccountsOnBeforeAsync;
        private readonly Func<AccountCollectionResult, AccountArgs?, PagingArgs?, Task>? _getAccountsOnAfterAsync;

        private readonly Func<string?, Task>? _getDetailOnPreValidateAsync;
        private readonly Action<MultiValidator, string?>? _getDetailOnValidate;
        private readonly Func<string?, Task>? _getDetailOnBeforeAsync;
        private readonly Func<AccountDetail?, string?, Task>? _getDetailOnAfterAsync;

        private readonly Func<string?, Task>? _getBalanceOnPreValidateAsync;
        private readonly Action<MultiValidator, string?>? _getBalanceOnValidate;
        private readonly Func<string?, Task>? _getBalanceOnBeforeAsync;
        private readonly Func<Balance?, string?, Task>? _getBalanceOnAfterAsync;

        #pragma warning restore CS0649
        #endregion

        /// <summary>
        /// Get all accounts.
        /// </summary>
        /// <param name="args">The Args (see <see cref="AccountArgs"/>).</param>
        /// <param name="paging">The <see cref="PagingArgs"/>.</param>
        /// <returns>A <see cref="AccountCollectionResult"/>.</returns>
        public Task<AccountCollectionResult> GetAccountsAsync(AccountArgs? args, PagingArgs? paging)
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Read;
                EntityBase.CleanUp(args);
                if (_getAccountsOnPreValidateAsync != null) await _getAccountsOnPreValidateAsync(args, paging).ConfigureAwait(false);

                MultiValidator.Create()
                    .Add(args.Validate(nameof(args)).Entity(AccountArgsValidator.Default))
                    .Additional((__mv) => _getAccountsOnValidate?.Invoke(__mv, args, paging))
                    .Run().ThrowOnError();

                if (_getAccountsOnBeforeAsync != null) await _getAccountsOnBeforeAsync(args, paging).ConfigureAwait(false);
                var __result = await AccountDataSvc.GetAccountsAsync(args, paging).ConfigureAwait(false);
                if (_getAccountsOnAfterAsync != null) await _getAccountsOnAfterAsync(__result, args, paging).ConfigureAwait(false);
                Cleaner.Clean(__result);
                return __result;
            });
        }

        /// <summary>
        /// Get <see cref="AccountDetail"/>.
        /// </summary>
        /// <param name="accountId">The <see cref="Account"/> identifier.</param>
        /// <returns>The selected <see cref="AccountDetail"/> object where found; otherwise, <c>null</c>.</returns>
        public Task<AccountDetail?> GetDetailAsync(string? accountId)
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Read;
                EntityBase.CleanUp(accountId);
                if (_getDetailOnPreValidateAsync != null) await _getDetailOnPreValidateAsync(accountId).ConfigureAwait(false);

                MultiValidator.Create()
                    .Add(accountId.Validate(nameof(accountId)).Mandatory())
                    .Additional((__mv) => _getDetailOnValidate?.Invoke(__mv, accountId))
                    .Run().ThrowOnError();

                if (_getDetailOnBeforeAsync != null) await _getDetailOnBeforeAsync(accountId).ConfigureAwait(false);
                var __result = await AccountDataSvc.GetDetailAsync(accountId).ConfigureAwait(false);
                if (_getDetailOnAfterAsync != null) await _getDetailOnAfterAsync(__result, accountId).ConfigureAwait(false);
                Cleaner.Clean(__result);
                return __result;
            });
        }

        /// <summary>
        /// Get <see cref="Account"/> <see cref="Balance"/>.
        /// </summary>
        /// <param name="accountId">The <see cref="Account"/> identifier.</param>
        /// <returns>The selected <see cref="Balance"/> object where found; otherwise, <c>null</c>.</returns>
        public Task<Balance?> GetBalanceAsync(string? accountId)
        {
            return ManagerInvoker.Default.InvokeAsync(this, async () =>
            {
                ExecutionContext.Current.OperationType = OperationType.Read;
                EntityBase.CleanUp(accountId);
                if (_getBalanceOnPreValidateAsync != null) await _getBalanceOnPreValidateAsync(accountId).ConfigureAwait(false);

                MultiValidator.Create()
                    .Add(accountId.Validate(nameof(accountId)).Mandatory())
                    .Additional((__mv) => _getBalanceOnValidate?.Invoke(__mv, accountId))
                    .Run().ThrowOnError();

                if (_getBalanceOnBeforeAsync != null) await _getBalanceOnBeforeAsync(accountId).ConfigureAwait(false);
                var __result = await AccountDataSvc.GetBalanceAsync(accountId).ConfigureAwait(false);
                if (_getBalanceOnAfterAsync != null) await _getBalanceOnAfterAsync(__result, accountId).ConfigureAwait(false);
                Cleaner.Clean(__result);
                return __result;
            });
        }
    }
}

#pragma warning restore IDE0005
#nullable restore
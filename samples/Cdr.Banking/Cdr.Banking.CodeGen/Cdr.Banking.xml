<?xml version="1.0" encoding="utf-8" ?>
<CodeGeneration RefDataNamespace="Cdr.Banking.Common.Entities" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://github.com/Avanade/Beef/raw/master/tools/Beef.CodeGen.Core/Schema/codegen.entity.xsd">

  <!-- Account as per the defined schema, including corresponding collection/result.
       API route prefixed defined. 
       Auto-implementing data access using Cosmos with Container 'Account', leveraging auto-mapping to a 'Model.Account'.
       -->
  <Entity Name="Account" Text="Account" Collection="true" CollectionResult="true" WebApiRoutePrefix="api/v1/banking/accounts" AutoImplement="Cosmos" CosmosEntity="Model.Account" CosmosContainerId="Account">
    <!-- Convention of Id property within entity.
         Reference as accountId otherwise (ArgumentName and JsonName).
         It is the UniqueKey. 
         -->
    <Property Name="Id" ArgumentName="accountId" JsonName="accountId" Text="{{Account}} identifier" Type="string" UniqueKey="true" />
    <!-- Creation date should have no time associated; therefore, DateTimeTransform is set to DateOnly.
         -->
    <Property Name="CreationDate" Type="DateTime" DateTimeTransform="DateOnly" />
    <Property Name="DisplayName" Type="string" />
    <Property Name="Nickname" Type="string" />
    <!-- Property is ReferenceData and as per the defined Type.
         For serialization the RefDataType is set to string; i.e. only the underlying code is serialized. 
         -->
    <Property Name="OpenStatus" Type="RefDataNamespace.OpenStatus" RefDataType="string" />
    <Property Name="IsOwned" Type="bool" />
    <Property Name="MaskedNumber" Type="string" />
    <Property Name="ProductCategory" Type="RefDataNamespace.ProductCategory" RefDataType="string" />
    <Property Name="ProductName" Type="string" />

    <!-- Operation to get all Accounts for the user.
         No further route information defined.
         Supports filtering using defined properies from AccountArgs (the args will be validated (AccountArgsValidator) to ensure valid values are passed).
         Supports paging.
         Data access will be auto-implemented for Cosmos as defined for the entity. 
         -->
    <Operation Name="GetAccounts" Text="Get all accounts" OperationType="GetColl" WebApiRoute="" PagingArgs="true">
      <Parameter Name="Args" Type="AccountArgs" Validator="AccountArgsValidator" />
    </Operation>
    
    <!-- Operation to get the AccountDetail for a specified account.
         Operation attached to Account for logical grouping.
         Returns AccountDetail (the DataEntityMapper is overridden to ensure correct mapper is used).
         UniqueKey="true" indicates that all properties marked as UniqueKey are to be used for parameters (avoids having to explicitly define again).
         Route requires accountId; e.g. api/v1/banking/accounts/{accountId}
         Data access will be auto-implemented for Cosmos as defined for the entity. 
         -->
    <Operation Name="GetDetail" Text="Get {{AccountDetail}}" OperationType="Get" ReturnType="AccountDetail" WebApiRoute="{accountId}" UniqueKey="true" DataEntityMapper="AccountDetailData.CosmosMapper" />
    
    <!-- Operation to get the Balance for a specified account.
         Operation attached to Account for logical grouping.
         Returns Balanace and no DataEntityMapper is required as implementing using custom logic.
         UniqueKey="true" indicates that all properties marked as UniqueKey are to be used for parameters (avoids having to explicitly define again).
         Route requires accountId; e.g. api/v1/banking/accounts/{accountId}/balance
         Data access logic cannot be auto-implemented. 
         -->
    <Operation Name="GetBalance" Text="Get {{Account}} {{Balance}}" OperationType="Get" ReturnType="Balance" WebApiRoute="{accountId}/balance" UniqueKey="true" AutoImplement="None" />
  </Entity>

  <!-- Specifying the arguments for the Account.GetAccounts; note usage of the JsonName to override the default query string parameter names.
       ExcludeAll ensures that only the corresponding Entity is generated; i.e. other layer artefacts are only required where an operation is being exposed.
       -->
  <Entity Name="AccountArgs" Text="{{Account}} arguments" ExcludeAll="true">
    <Property Name="ProductCategory" JsonName="product-category" Type="RefDataNamespace.ProductCategory" RefDataType="string" />
    <Property Name="OpenStatus" JsonName="open-status" Type="RefDataNamespace.OpenStatus" RefDataType="string" />
    <Property Name="IsOwned" JsonName="is-owned" Type="bool" Nullable="true" />
  </Entity>

  <!-- As per the AccountDetail schema it inherits from Account and extends the properties (also inherits the data mapper). 
       -->
  <Entity Name="AccountDetail" Text="{{Account}} Detail" Inherits="Account" ExcludeAll="true" ExcludeData="false" AutoImplement="Cosmos" CosmosEntity="Model.Account" CosmosContainerId="Account" DataCosmosValueContainer="true" DataCosmosMapperInheritsFrom="AccountData.CosmosMapper">
    <Property Name="Bsb" Type="string" />
    <Property Name="AccountNumber" Type="string" />
    <Property Name="BundleName" Type="string" />
    <Property Name="SpecificAccountUType" Type="RefDataNamespace.AccountUType" RefDataType="string" />
    <Property Name="TermDeposit" Type="TermDepositAccount" IsEntity="true" />
    <Property Name="CreditCard" Type="CreditCardAccount" IsEntity="true" />
  </Entity>

  <!-- Remaining entities required as per defined schema. 
       -->
  <Entity Name="TermDepositAccount" ExcludeAll="true">
    <Property Name="LodgementDate" Type="DateTime" DateTimeTransform="DateOnly" />
    <Property Name="MaturityDate" Type="DateTime" DateTimeTransform="DateOnly" />
    <Property Name="MaturityAmount" Type="decimal" />
    <Property Name="MaturityCurrency" Type="string" />
    <Property Name="MaturityInstructions" Type="RefDataNamespace.MaturityInstructions" RefDataType="string" />
  </Entity>

  <Entity Name="CreditCardAccount" ExcludeAll="true">
    <Property Name="MinPaymentAmount" Type="decimal" />
    <Property Name="PaymentDueAmount" Type="decimal" />
    <Property Name="PaymentCurrency" Type="string" />
    <Property Name="PaymentDueDate" Type="DateTime" DateTimeTransform="DateOnly" />
  </Entity>

  <Entity Name="Balance" ExcludeAll="true">
    <Property Name="Id" JsonName="accountId" Text="{{Account}} identifier" Type="string" />
    <Property Name="CurrentBalance" Type="decimal" EmitDefaultValue="true" />
    <Property Name="AvailableBalance" Type="decimal" EmitDefaultValue="true" />
    <Property Name="CreditLimit" Type="decimal" />
    <Property Name="AmortisedLimit" Type="decimal" />
    <Property Name="Currency" Type="string" />
    <Property Name="Purses" Type="BalancePurseCollection" IsEntity="true" />
  </Entity>

  <Entity Name="BalancePurse" Collection="true" ExcludeAll="true">
    <Property Name="Amount" Type="decimal" />
    <Property Name="Currency" Type="string" />
  </Entity>

  <!-- Account as per the defined schema, including corresponding collection/result.
       API route prefixed defined (note same as Account to ensure correct API surface). 
       Auto-implementing data access using Cosmos with Container 'Transaction', leveraging auto-mapping to a 'Model.Transaction'.  
       -->
  <Entity Name="Transaction" Text="Transaction" Collection="true" CollectionResult="true" WebApiRoutePrefix="api/v1/banking/accounts" AutoImplement="Cosmos" CosmosEntity="Model.Transaction" CosmosContainerId="Transaction">
    <Property Name="Id" JsonName="transactionId" Text="{{Account}} identifier" Type="string" UniqueKey="true" DataAutoGenerated="false" />
    <Property Name="AccountId" Type="string" />
    <Property Name="IsDetailAvailable" Type="bool" />
    <Property Name="Type" Type="RefDataNamespace.TransactionType" RefDataType="string" />
    <Property Name="Status" Type="RefDataNamespace.TransactionStatus" RefDataType="string" />
    <Property Name="Description" Type="string" />
    <Property Name="PostingDateTime" Type="DateTime" />
    <Property Name="ExecutionDateTime" Type="DateTime" />
    <Property Name="Amount" Type="decimal" />
    <Property Name="Currency" Type="string" />
    <Property Name="Reference" Type="string" />
    <Property Name="MerchantName" Type="string" />
    <Property Name="MerchantCategoryCode" Type="string" />
    <Property Name="BillerCode" Type="string" />
    <Property Name="BillerName" Type="string" />
    <Property Name="ApcaNumber" Type="string" />

    <!-- Operation to get all Transactions for a specified Account.
         Operation and Route requires accountId; e.g. api/v1/banking/accounts/{accountId}/transactions
         Supports filtering using defined properies from TransactionArgs (the args will be validated (TransactionArgsValidator) to ensure valid values are passed).
         Supports paging. 
         Data access will be auto-implemented for Cosmos as defined for the entity.
         Cosmos PartitionKey will be set to the accountId parameter value for data access.
         -->
    <Operation Name="GetTransactions" Text="Get transaction for account" OperationType="GetColl" WebApiRoute="{accountId}/transactions" PagingArgs="true" DataCosmosPartitionKey="accountId">
      <!-- Note usage of ValidatorFluent which will inject the code as-is into the validation logic; being a common validator 'Validators.Account' that will perform the authorization check. -->
      <Parameter Name="AccountId" Type="string" ValidatorFluent="Common(Validators.AccountId)" WebApiFrom="FromRoute" IsMandatory="true" />
      <Parameter Name="Args" Type="TransactionArgs" Validator="TransactionArgsValidator" />
    </Operation>
  </Entity>

  <!-- Specifying the arguments for the Transaction.GetTransactions; note usage of the JsonName to override the default query string parameter names.
       FromDate & ToDate are so named for C# access; however, they are referred to 'Oldest time' and 'Newest time' externally - DisplayName is used for corresponding error message text.
       -->
  <Entity Name="TransactionArgs" Text="{{Account}} arguments" ExcludeAll="true">
    <Property Name="FromDate" Text="From (oldest time)" DisplayName="Oldest time" JsonName="oldest-time" Type="DateTime" Nullable="true" />
    <Property Name="ToDate" Text="To (newest time)" DisplayName="Newest time" JsonName="newest-time" Type="DateTime" Nullable="true" />
    <Property Name="MinAmount" JsonName="min-amount" Type="decimal" Nullable="true" />
    <Property Name="MaxAmount" JsonName="max-amount" Type="decimal" Nullable="true" />
    <Property Name="Text" JsonName="text" Type="string" />
  </Entity>
</CodeGeneration>
using Beef.Mapper.Converters;
using Beef.Reflection;
using System;

namespace Beef.Mapper
{
    /// <summary>
    /// Enables property mapping capabilities.
    /// </summary>
    public interface IPropertyMapperBase
    {
        /// <summary>
        /// Gets the source property name.
        /// </summary>
        string SrcePropertyName { get; }

        /// <summary>
        /// Gets the source property <see cref="Type"/>.
        /// </summary>
        Type SrcePropertyType { get; }

        /// <summary>
        /// Gets the destination property name;
        /// </summary>
        string DestPropertyName { get; }

        /// <summary>
        /// Gets the destination property <see cref="Type"/>.
        /// </summary>
        Type DestPropertyType { get; }

        /// <summary>
        /// Indicates whether the property forms part of the unique (primary) key. 
        /// </summary>
        bool IsUniqueKey { get; }

        /// <summary>
        /// Indicates whether the destination property value is auto-generated on create. 
        /// </summary>
        bool IsUniqueKeyAutoGeneratedOnCreate { get; }

        /// <summary>
        /// Sets the unique key (<see cref="IsUniqueKey"/> and <see cref="IsUniqueKeyAutoGeneratedOnCreate"/>).
        /// </summary>
        /// <param name="autoGeneratedOnCreate">Indicates whether the destination property value is auto-generated on create (defaults to <c>true</c>).</param>
        void SetUniqueKey(bool autoGeneratedOnCreate);

        /// <summary>
        /// Gets the <see cref="IPropertyMapperConverter"/> (used where a specific source and destination type conversion is required).
        /// </summary>
        IPropertyMapperConverter Converter { get; }

        /// <summary>
        /// Sets the <see cref="Converter"/>.
        /// </summary>
        /// <param name="converter">The <see cref="IPropertyMapperConverter"/>.</param>
        /// <remarks>The <see cref="Converter"/> and <see cref="Mapper"/> are mutually exclusive.</remarks>
        void SetConverter(IPropertyMapperConverter converter);

        /// <summary>
        /// Gets the <see cref="IEntityMapperBase"/> to map complex types.
        /// </summary>
        IEntityMapperBase Mapper { get; }

        /// <summary>
        /// Set the <see cref="IEntityMapperBase"/> to map complex types.
        /// </summary>
        /// <param name="mapper">The <see cref="IEntityMapperBase"/>.</param>
        /// <remarks>The <see cref="Mapper"/> and <see cref="Converter"/> are mutually exclusive.</remarks>
        void SetMapper(IEntityMapperBase mapper);

        /// <summary>
        /// Gets the <see cref="Mapper.OperationTypes"/> selection to enable inclusion or exclusion of property (default to <see cref="OperationTypes.Any"/>).
        /// </summary>
        OperationTypes OperationTypes { get; }

        /// <summary>
        /// Sets the <see cref="OperationTypes"/>.
        /// </summary>
        /// <param name="operationTypes">The <see cref="Mapper.OperationTypes"/> selection to enable inclusion or exclusion of property.</param>
        void SetOperationTypes(OperationTypes operationTypes);

        /// <summary>
        /// Gets the <see cref="Beef.Reflection.ComplexTypeReflector"/> (only set where the property <see cref="IsSrceComplexType"/>).
        /// </summary>
        ComplexTypeReflector SrceComplexTypeReflector { get; }

        /// <summary>
        /// Indicates whether the property is a complex type or complex type collection (see <see cref="SrceComplexTypeReflector"/>).
        /// </summary>
        bool IsSrceComplexType { get; }
    }
}

//#if (implement_database)
eventSubjectRoot: Company
eventActionFormat: PastTense
eventSourceRoot: Company/AppName
eventSourceKind: Relative
webApiAutoLocation: true
refDataText: true
databaseSchema: AppName
entities:
  # The following is an example Entity with CRUD operations defined accessing a SQL Database using Stored Procedures.
- { name: Person, text: Person, collection: true, collectionResult: true, identifierGenerator: true, validator: PersonValidator, webApiRoutePrefix: persons, get: true, create: true, update: true, patch: true, delete: true, autoImplement: Database,
    properties: [
      { name: Id, text: '{{Person}} identifier', type: Guid, primaryKey: true, dataName: PersonId },
      { name: FirstName },
      { name: LastName },
      { name: Gender, type: ^Gender, dataName: GenderCode },
      { name: Birthday, type: DateTime, dateTimeTransform: DateOnly },
      { name: ETag, type: string },
      { name: ChangeLog, type: ChangeLog }
    ],
    operations: [
      { name: GetByArgs, type: GetColl, paging: true,
        parameters: [
          { name: Args, type: PersonArgs, validator: PersonArgsValidator }
        ]
      }
    ]
  }

- { name: PersonArgs, text: '{{Person}} arguments',
    properties: [
      { name: FirstName },
      { name: LastName },
      { name: Genders, type: ^Gender, refDataList: true }
    ]
  }
//#endif
//#if (implement_entityframework)
eventSubjectRoot: Company
eventActionFormat: PastTense
eventSourceRoot: Company/AppName
eventSourceKind: Relative
webApiAutoLocation: true
refDataText: true
entities:
  # The following is an example Entity with CRUD operations defined accessing a SQL Database using EntityFramework.
- { name: Person, text: Person, collection: true, collectionResult: true, validator: PersonValidator, webApiRoutePrefix: persons, get: true, create: true, update: true, patch: true, delete: true, autoImplement: EntityFramework, entityFrameworkModel: EfModel.Person,
    properties: [
      { name: Id, text: '{{Person}} identifier', type: Guid, primaryKey: true, identifierGenerator: IGuidIdentifierGenerator, dataName: PersonId },
      { name: FirstName },
      { name: LastName },
      { name: Gender, type: ^Gender, dataName: GenderCode },
      { name: Birthday, type: DateTime, dateTimeTransform: DateOnly },
      { name: ETag, type: string },
      { name: ChangeLog, type: ChangeLog }
    ],
    operations: [
      { name: GetByArgs, type: GetColl, paging: true,
        parameters: [
          { name: Args, type: PersonArgs, validator: PersonArgsValidator }
        ]
      }
    ]
  }

- { name: PersonArgs, text: '{{Person}} arguments',
    properties: [
      { name: FirstName },
      { name: LastName },
      { name: Genders, type: ^Gender, refDataList: true }
    ]
  }
//#endif
//#if (implement_cosmos)
eventSubjectRoot: Company
eventActionFormat: PastTense
eventSourceRoot: Company/AppName
eventSourceKind: Relative
webApiAutoLocation: true
refDataText: true
entities:
  # The following is an example Entity with CRUD operations defined accessing Cosmos DB.

- { name: Person, text: Person, collection: true, collectionResult: true, validator: PersonValidator, webApiRoutePrefix: persons, get: true, create: true, update: true, patch: true, delete: true, dataModel: true, autoImplement: Cosmos, cosmosContainerId: Person, cosmosModel: Model.Person,
    properties: [
      { name: Id, text: '{{Person}} identifier', type: Guid, primaryKey: true, identifierGenerator: IGuidIdentifierGenerator },
      { name: FirstName },
      { name: LastName },
      { name: Gender, type: ^Gender },
      { name: Birthday, type: DateTime, dateTimeTransform: DateOnly },
      { name: ETag, type: string, jsonDataModelName: _etag },
      { name: ChangeLog, type: ChangeLog }
    ],
    operations: [
      { name: GetByArgs, type: GetColl, paging: true,
        parameters: [
          { name: Args, type: PersonArgs, validator: PersonArgsValidator }
        ]
      }
    ]
  }

- { name: PersonArgs, text: '{{Person}} arguments',
    properties: [
      { name: FirstName },
      { name: LastName },
      { name: Genders, type: ^Gender, refDataList: true }
    ]
  }
//#endif
//#if (implement_httpagent)
eventSubjectRoot: Company
eventActionFormat: PastTense
eventSourceRoot: Company/AppName
eventSourceKind: Relative
webApiAutoLocation: true
httpAgentName: IXxxAgent
refDataText: true
entities:
  # The following is an example Entity with CRUD operations defined accessing a SQL Database using Stored Procedures.
- { name: Person, text: Person, collection: true, collectionResult: true, validator: PersonValidator, webApiRoutePrefix: persons, get: true, create: true, update: true, patch: true, delete: true, dataModel: true, autoImplement: HttpAgent, httpAgentModel: Model.Person, httpAgentRoutePrefix: People,
    properties: [
      { name: Id, text: '{{Person}} identifier', type: Guid, primaryKey: true, identifierGenerator: IGuidIdentifierGenerator },
      { name: FirstName },
      { name: LastName },
      { name: Gender, type: ^Gender },
      { name: Birthday, type: DateTime, dateTimeTransform: DateOnly },
      { name: ETag, type: string },
      { name: ChangeLog, type: ChangeLog }
    ]
  }
//#endif
//#if (implement_none)
eventSubjectRoot: Company
eventActionFormat: PastTense
eventSourceRoot: Company/AppName
eventSourceKind: Relative
webApiAutoLocation: true
refDataText: true
entities:
  # The following is an example Entity with CRUD operations defined accessing a SQL Database using Stored Procedures.
- { name: Person, text: Person, collection: true, collectionResult: true, validator: PersonValidator, webApiRoutePrefix: persons, get: true, create: true, update: true, patch: true, delete: true,
    properties: [
      { name: Id, text: '{{Person}} identifier', type: Guid, primaryKey: true, identifierGenerator: IGuidIdentifierGenerator },
      { name: FirstName },
      { name: LastName },
      { name: Gender, type: ^Gender },
      { name: Birthday, type: DateTime, dateTimeTransform: DateOnly },
      { name: ETag, type: string },
      { name: ChangeLog, type: ChangeLog }
    ],
    operations: [
      { name: GetByArgs, type: GetColl, paging: true,
        parameters: [
          { name: Args, type: PersonArgs, validator: PersonArgsValidator }
        ]
      }
    ]
  }

- { name: PersonArgs, text: '{{Person}} arguments',
    properties: [
      { name: FirstName },
      { name: LastName },
      { name: Genders, type: ^Gender, refDataList: true }
    ]
  }
//#endif
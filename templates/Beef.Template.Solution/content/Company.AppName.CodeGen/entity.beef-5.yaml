//#if (implement_database)
eventSubjectRoot: Company
eventActionFormat: PastTense
eventSourceRoot: Company/AppName
eventSourceKind: Relative
webApiAutoLocation: true
refDataText: true
databaseSchema: AppName
entities:
  # The following is an example Entity with CRUD operations defined accessing a SQL Database using Stored Procedures.
- { name: Person, collection: true, collectionResult: true, identifierGenerator: true, validator: PersonValidator, webApiRoutePrefix: persons, behavior: crupd, autoImplement: Database,
    properties: [
      { name: Id, type: Guid, primaryKey: true, dataName: PersonId },
      { name: FirstName },
      { name: LastName },
      { name: Gender, type: ^Gender, dataName: GenderCode },
      { name: Birthday, type: DateTime, dateTimeTransform: DateOnly },
      { name: ETag, type: string },
      { name: ChangeLog, type: ChangeLog }
    ],
    operations: [
      { name: GetByArgs, type: GetColl, paging: true,
        parameters: [
          { name: Args, type: PersonArgs, validator: PersonArgsValidator }
        ]
      }
    ]
  }

- { name: PersonArgs,
    properties: [
      { name: FirstName },
      { name: LastName },
      { name: Genders, type: ^Gender, refDataList: true }
    ]
  }
//#endif
//#if (implement_entityframework)
eventSubjectRoot: Company
eventActionFormat: PastTense
eventSourceRoot: Company/AppName
eventSourceKind: Relative
webApiAutoLocation: true
autoImplement: EntityFramework
//#if (implement_mysql)
etagDefaultMapperConverter: EncodedStringToDateTimeConverter
//#endif
//#if (implement_postgres)
etagDefaultMapperConverter: EncodedStringToUInt32Converter
//#endif
refDataText: true
entities:
  # The following is an example Entity with CRUD and Query operations defined accessing a database using EntityFramework.
- { name: Person, collection: true, collectionResult: true, validator: PersonValidator, webApiRoutePrefix: persons, behavior: crupdq, entityFrameworkModel: EfModel.Person,
    properties: [
//#if (implement_sqlserver)
      { name: Id, type: Guid, primaryKey: true, dataName: PersonId },
//#endif
//#if (implement_mysql || implement_postgres)
      { name: Id, type: int, primaryKey: true, dataName: PersonId },
//#endif
      { name: FirstName },
      { name: LastName },
      { name: Gender, type: ^Gender, dataName: GenderCode },
      { name: Birthday, type: DateTime, dateTimeTransform: DateOnly },
      { name: ETag, type: string },
      { name: ChangeLog, type: ChangeLog }
    ],
    operations: [
      { name: GetByArgs, type: GetColl, paging: true,
        parameters: [
          { name: Args, type: PersonArgs, validator: PersonArgsValidator }
        ]
      }
    ]
  }

- { name: PersonArgs,
    properties: [
      { name: FirstName },
      { name: LastName },
      { name: Genders, type: ^Gender, refDataList: true }
    ]
  }
//#endif
//#if (implement_cosmos)
cosmosType: AppNameCosmosDb
eventSubjectRoot: Company
eventActionFormat: PastTense
eventSourceRoot: Company/AppName
eventSourceKind: Relative
webApiAutoLocation: true
autoImplement: Cosmos
refDataText: true
entities:
  # The following is an example Entity with CRUD and Query operations defined accessing a Cosmos DB.

- { name: Person, collection: true, collectionResult: true, validator: PersonValidator, identifierGenerator: true, webApiRoutePrefix: persons, behavior: crupdq, cosmosContainerId: Persons, cosmosModel: Model.Person,
    properties: [
      { name: Id, type: Guid, primaryKey: true, dataConverter: 'TypeToStringConverter<Guid>' },
      { name: FirstName },
      { name: LastName },
      { name: Gender, type: ^Gender },
      { name: Birthday, type: DateTime, dateTimeTransform: DateOnly },
      { name: ETag, type: string, jsonDataModelName: _etag },
      { name: ChangeLog, type: ChangeLog }
    ],
    operations: [
      { name: GetByArgs, type: GetColl, paging: true,
        parameters: [
          { name: Args, type: PersonArgs, validator: PersonArgsValidator }
        ]
      }
    ]
  }

- { name: PersonArgs,
    properties: [
      { name: FirstName },
      { name: LastName },
      { name: Genders, type: ^Gender, refDataList: true }
    ]
  }
//#endif
//#if (implement_httpagent)
eventSubjectRoot: Company
eventActionFormat: PastTense
eventSourceRoot: Company/AppName
eventSourceKind: Relative
webApiAutoLocation: true
autoImplement: HttpAgent
httpAgentType: XxxAgent
refDataText: true
entities:
  # The following is an example Entity with CRUD operations defined accessing an HTTP endpoint.
- { name: Person, collection: true, collectionResult: true, validator: PersonValidator, webApiRoutePrefix: persons, behavior: crupd, dataModel: true, httpAgentModel: Model.Person, httpAgentRoutePrefix: People,
    properties: [
      { name: Id, type: Guid, primaryKey: true },
      { name: FirstName },
      { name: LastName },
      { name: Gender, type: ^Gender },
      { name: Birthday, type: DateTime, dateTimeTransform: DateOnly },
      { name: ETag, type: string },
      { name: ChangeLog, type: ChangeLog }
    ]
  }
//#endif
//#if (implement_none)
eventSubjectRoot: Company
eventActionFormat: PastTense
eventSourceRoot: Company/AppName
eventSourceKind: Relative
webApiAutoLocation: true
refDataText: true
//entities:
//#endif